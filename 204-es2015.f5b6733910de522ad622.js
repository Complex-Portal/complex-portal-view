"use strict";(self.webpackChunkcomplex_portal_view=self.webpackChunkcomplex_portal_view||[]).push([[204],{42204:function(e,t,s){s.r(t),s.d(t,{BasketModule:function(){return g}});var a=s(10639),n=s(38583),o=s(35076),i=s(40819),l=s(65787),r=s(83747),c=s(39075),p=s(20658),m=s(45178),h=s(23186);let d=class{constructor(e,t,s,a,n){this._basketService=e,this.titleService=t,this.complexPortalService=s,this.route=a,this.router=n,this.complexSearchBasket=null,this.allInteractorsInComplexSearchBasket=[],this._complexBasket=this._basketService.complexBasket}ngOnInit(){this.titleService.setTitle("Complex Portal - Basket"),this.complexNavigatorLoading(),this.route.fragment.subscribe(e=>{e===h.aA?this.DisplayType=h.aA:this.DisplayType=h.aM})}onDisplayTypeChange(e){this.DisplayType!==e&&(this.DisplayType=e,this.router.navigate([],{fragment:this.DisplayType}))}isDisplayComplexNavigatorView(){return this.DisplayType===h.aA}ngAfterViewInit(){r.R.hide()}deleteFromBasket(e){this._basketService.deleteFromBasket(e),this.complexNavigatorLoading()}deleteComplexFromBasket(e){for(const t of this.getKeys(this.complexBasket))this.complexBasket[t].id===e&&this._basketService.deleteFromBasket(t);this.complexNavigatorLoading()}get complexBasket(){return this._complexBasket}set complexBasket(e){this._complexBasket=e}isComplexBasketEmpty(){return 0===this.getKeys(this._complexBasket).length}getKeys(e){return Object.keys(e)}createQuery(e){return"complex_id: "+Object.values(e).map(e=>e.id).join(",")}requestComplexesForNavigator(){const e=Object.values(this._complexBasket).length;this.complexPortalService.findComplex(this.createQuery(this._complexBasket),[],[],[],1,e).subscribe(e=>{if(this.complexSearchBasket=e,console.log(this.complexSearchBasket),0!==this.complexSearchBasket.totalNumberOfResults)for(let t=0;t<e.elements.length;t++)for(const s of e.elements[t].interactors)this.allInteractorsInComplexSearchBasket.some(e=>e.identifier===s.identifier)||this.allInteractorsInComplexSearchBasket.push(new m.Q(s.identifier,s.identifierLink,s.name,s.description,s.interactorType,s.organismName))})}complexNavigatorLoading(){this.complexSearchBasket=null,this.allInteractorsInComplexSearchBasket=[],this.requestComplexesForNavigator()}};d.ctorParameters=()=>[{type:l.v},{type:c.Dx},{type:p.H},{type:o.gz},{type:o.F0}],d=function(e,t,s,a){var n,o=arguments.length,i=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,s):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,s,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(i=(o<3?n(i):o>3?n(t,s,i):n(t,s))||i);return o>3&&i&&Object.defineProperty(t,s,i),i}([(0,a.wA2)({selector:"cp-basket",template:'<div class="margin-top-large margin-bottom-large">\n  <div *ngIf="!isComplexBasketEmpty()" class="columns medium-12">\n    <h2>Personal collection of favourite complexes</h2>\n    <h4>{{getKeys(complexBasket).length}} complexes in your basket</h4>\n    <div class="row">\n      <cp-complex-list-display-buttons\n        [displayType]="DisplayType"\n        (displayTypeChange)="onDisplayTypeChange($event)">\n      </cp-complex-list-display-buttons>\n    </div>\n    <table class="hover" *ngIf="!this.isDisplayComplexNavigatorView()">\n      <thead>\n      <tr>\n        <th>Name</th>\n        <th>ID</th>\n        <th>Organism</th>\n        <th></th>\n      </tr>\n      </thead>\n      <tbody>\n      <tr *ngFor="let key of getKeys(complexBasket)">\n        <td>\n          <a [routerLink]="[\'/complex\', complexBasket[key].id]">{{ complexBasket[key].name }}</a>\n        </td>\n        <td>\n          {{ complexBasket[key].id }}\n        </td>\n        <td>\n          {{ complexBasket[key].organism }}\n        </td>\n        <td>\n          <a class="button primary columns medium-12" (click)="deleteFromBasket(key)"> <span\n            class="icon icon-functional" data-icon="d"></span></a>\n        </td>\n      </tr>\n      </tbody>\n    </table>\n    <div *ngIf="isDisplayComplexNavigatorView()">\n      <ng-container *ngIf="complexSearchBasket;else loadingSpinner">\n        <div class="ComplexNavigator"\n             [ngClass]="complexSearchBasket.totalNumberOfResults <=6 ? \'smallCN\' : \'\'">\n          <cp-complex-navigator\n            [complexSearch]="complexSearchBasket"\n            [interactors]="allInteractorsInComplexSearchBasket"\n            [canAddComplexesToBasket]="false"\n            [canRemoveComplexesFromBasket]="true"\n            (onComplexRemovedFromBasket)="deleteComplexFromBasket($event)">\n          </cp-complex-navigator>\n        </div>\n      </ng-container>\n      <ng-template #loadingSpinner>\n        <cp-progress-spinner></cp-progress-spinner>\n      </ng-template>\n    </div>\n\n  </div>\n  <div *ngIf="isComplexBasketEmpty()" class="columns medium-12">\n    <div class="callout">\n      <h3>Your basket is currently empty. :\'-(</h3>\n      <h5>Search for a complex and click on <i class="icon icon-generic" data-icon="b"></i>-symbol to create your own\n        collection of favorite complexes.</h5>\n    </div>\n  </div>\n</div>\n',styles:[i]})],d);var x=s(32696),y=s(64356);let g=class{};g=function(e,t,s,a){var n,o=arguments.length,i=o<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,s):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,s,a);else for(var l=e.length-1;l>=0;l--)(n=e[l])&&(i=(o<3?n(i):o>3?n(t,s,i):n(t,s))||i);return o>3&&i&&Object.defineProperty(t,s,i),i}([(0,a.LVF)({imports:[o.Bz.forChild([{path:"",component:d}]),n.ez,x.r,y.L],declarations:[d]})],g)},40819:function(e){e.exports=".ComplexNavigator {\n  float: left;\n}\n\n.smallCN {\n  width: 100%;\n}\n"}}]);