{
  "version": 3,
  "sources": ["angular:jit:template:file:src/app/complex/complex-results/complex-navigator/complex-navigator.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/complex-navigator.component.css", "src/app/complex/complex-results/complex-navigator/complex-navigator.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.css", "src/app/complex/complex-portal-utils.ts", "src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/complex-navigator-utils.ts", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.css", "src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.css", "src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.ts", "src/app/complex/complex-results/complex-navigator/complex-navigator.module.ts"],
  "sourcesContent": ["<div class=\"ComplexNavigator\">\n  <div class=\"Buttons\" [ngClass]=\"complexSearch.totalNumberOfResults <=6 ? 'smallCNButtons' : ''\">\n    <cp-complex-navigator-buttons\n      [(interactorsSorting)]=\"interactorsSorting\"\n      [(organismIconDisplay)]=\"organismIconDisplay\"\n      [(interactorTypeDisplay)]=\"interactorTypeDisplay\"\n      [(IDDisplay)]=\"IDDisplay\">\n    </cp-complex-navigator-buttons>\n  </div>\n  <cp-table-structure [complexSearch]=\"complexSearch\"\n                      [interactors]=\"interactors\"\n                      [interactorsSorting]=\"interactorsSorting\"\n                      [organismIconDisplay]=\"organismIconDisplay\"\n                      [interactorTypeDisplay]=\"interactorTypeDisplay\"\n                      [IDDisplay]=\"IDDisplay\"\n                      [canAddComplexesToBasket]=\"canAddComplexesToBasket\"\n                      [canRemoveComplexesFromBasket]=\"canRemoveComplexesFromBasket\"\n                      (onComplexRemovedFromBasket)=\"onComplexRemovedFromBasket.emit($event)\">\n  </cp-table-structure>\n</div>\n\n", "/* src/app/complex/complex-results/complex-navigator/complex-navigator.component.css */\n/*# sourceMappingURL=complex-navigator.component.css.map */\n", "import {Component, EventEmitter, Input, output, Output} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-navigator',\n  templateUrl: './complex-navigator.component.html',\n  styleUrls: ['./complex-navigator.component.css']\n})\n\nexport class ComplexNavigatorComponent {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket = output<string>();\n\n  interactorsSorting = 'Occurrence';\n  organismIconDisplay = true;\n  interactorTypeDisplay = true;\n  IDDisplay = true;\n}\n", "<div class=\"complexNavigatorTable\">\n  <div class=\"header\"\n       (scroll)=\"body.scrollLeft = header.scrollLeft\" #header>\n\n    <cp-table-header [complexes]=\"sortedComplexes\"\n                     [interactorsSorting]=\"interactorsSorting\"\n                     [canAddComplexesToBasket]=\"canAddComplexesToBasket\"\n                     [canRemoveComplexesFromBasket]=\"canRemoveComplexesFromBasket\"\n                     (onComplexRemovedFromBasket)=\"onComplexRemovedFromBasket.emit($event)\">\n    </cp-table-header>\n  </div>\n  <div class=\"interactors\"\n       (scroll)=\"header.scrollLeft = body.scrollLeft\" #body>\n    <cp-table-interactor-column\n      [complexes]=\"sortedComplexes\"\n      [interactors]=\"interactors\"\n      [interactorsSorting]=\"interactorsSorting\"\n      [organismIconDisplay]=\"organismIconDisplay\"\n      [interactorTypeDisplay]=\"interactorTypeDisplay\"\n      [IDDisplay]=\"IDDisplay\">\n    </cp-table-interactor-column>\n  </div>\n  <div class=\"spaceHolder\"></div>\n</div>\n\n", "/* src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.css */\n.complexNavigatorTable {\n  border-collapse: separate;\n  height: 100%;\n}\n.header {\n  position: sticky;\n  top: 20px;\n  z-index: 2;\n  overflow-x: auto;\n  overflow-y: hidden;\n  transform: rotateX(180deg);\n}\n.interactors {\n  z-index: 1;\n  position: relative;\n  overflow-y: hidden;\n}\n/*# sourceMappingURL=table-structure.component.css.map */\n", "import {Component, EventEmitter, Input, OnChanges, Output} from '@angular/core';\nimport {ComplexSearchResult} from '../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../shared/model/complex-results/interactor.model';\nimport {Element} from '../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../shared/model/complex-results/complex-component.model';\n\n@Component({\n  selector: 'cp-table-structure',\n  templateUrl: './table-structure.component.html',\n  styleUrls: ['./table-structure.component.css']\n})\nexport class TableStructureComponent implements OnChanges {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  sortedComplexes: Element[] = [];\n\n  ngOnChanges(): void {\n    this.sortedComplexes = this.classifyComplexesSimilaritiesV2(this.complexSearch.elements);\n  }\n\n  private getComponentAsComplex(component: ComplexComponent): Element | undefined {\n    return this.complexSearch.elements.find(interactor => interactor.complexAC === component.identifier);\n  }\n\n  private getAllComponents(complex?: Element, components: ComplexComponent[] = []): ComplexComponent[] {\n    for (const component of complex.interactors) {\n      if (component.interactorType === 'stable complex') {\n        const subComplex = this.getComponentAsComplex(component);\n        if (subComplex) {\n          components.push(...this.getAllComponents(subComplex));\n        } else {\n          components.push(component);\n        }\n      } else {\n        components.push(component);\n      }\n    }\n    return components;\n  }\n\n  private calculateSimilarity(complex1: Element, complex2: Element) {\n    if (complex1 === complex2) {\n      return new Set(this.getAllComponents(complex1)).size;\n    }\n\n    const [components1, components2] =\n      [complex1, complex2]\n        .map(complex => new Set(this.getAllComponents(complex).map(c => c.identifier)));\n\n    return [...components1.values()].reduce((s, c1) => components2.has(c1) ? s + 1 : s, 0);\n  }\n\n  classifyComplexesSimilaritiesV2(complexesList: Element[]) {\n    const comparedComplexes: [Element, Element, number][] = [];\n    for (const complex of complexesList) {\n      for (const comparedComplex of complexesList) {\n        // for unique comparison\n        if (complex.complexAC >= comparedComplex.complexAC) {\n          comparedComplexes.push([complex, comparedComplex, this.calculateSimilarity(complex, comparedComplex)]);\n        }\n      }\n    }\n    comparedComplexes.sort((a, b) => b[2] - a[2]); // sorting by similarityScore\n    const complexesOrderedSet = this.uniqueComplexesListOrderedBySimilarity(comparedComplexes);\n    // to be used in the table as a 1D array\n    return Array.from(complexesOrderedSet);\n  }\n\n  uniqueComplexesListOrderedBySimilarity(complexesListSimilarities: [Element, Element, number][]) {\n    const complexesOrderedSet = new Set<Element>();\n    for (let i = 0; i < complexesListSimilarities.length; i++) {\n      const [complex1, complex2, similarityScore] = complexesListSimilarities[i];\n      if (similarityScore !== 0) {\n        complexesOrderedSet.add(complex1);\n        complexesOrderedSet.add(complex2);\n        for (let j = i + 1; j < complexesListSimilarities.length; j++) {\n          const [complex3, complex4, similarityScore2nd] = complexesListSimilarities[j];\n          if (complex1 === complex3 && similarityScore2nd !== 0) {\n            complexesOrderedSet.add(complex4);\n          }\n        }\n        if (complexesOrderedSet.size === this.complexSearch.elements.length) {\n          // All complexes have been added, we can return and stop the loops\n          return complexesOrderedSet;\n        }\n      }\n      if (complexesOrderedSet.size === this.complexSearch.elements.length) {\n        // All complexes have been added, we can return and stop the loops\n        return complexesOrderedSet;\n      }\n    }\n    return complexesOrderedSet;\n  }\n}\n", "<div class=\"Complex-navigator\">\n  <table class=\"table CN-table\">\n    <!-- When table is not overflowing -->\n    <thead class=\"tableHead\" *ngIf=\"complexes.length<=6\">\n    <tr>\n      <th *ngIf=\"isInteractorSortingSet()\" class=\"spaceHolderSorting\"></th>\n      <th class=\"interactorsHeader horizontal\">\n        Components\n      </th>\n      <th class=\"horizontal\" *ngFor=\"let complex of complexes\" [class.predicted]=\"complex.predictedComplex\">\n        <div class=\"horizontal-label\">\n          <a [routerLink]=\"['/complex', complex.complexAC]\"\n             target=\"_blank\">\n            <div>\n              <span [matTooltip]=\"complex.complexName+ ' - '+ complex.complexAC + ' - ' + complex.organismName\">\n                <div class=\"line\"></div>\n                <i class=\"{{iconOrganism(complex.organismName)}}\"></i>\n                <i class=\"icon icon-generic small\" data-icon=\"x\"></i>\n                {{ complex.complexName }}\n              </span>\n            </div>\n          </a>\n        </div>\n        <div class=\"basketButton\">\n          <a class=\"button\" (click)=\"toggleBasket(complex)\">\n            <i class=\"icon icon-common\" [attr.data-icon]=\"isInBasket(complex.complexAC) ? '\uF1F8':'\uF217'\"></i>\n          </a>\n        </div>\n      </th>\n    </tr>\n    </thead>\n    <!-- When table is overflowing -->\n    <thead class=\"tableHeadOverflow\" *ngIf=\"complexes.length > 6\"\n           [ngClass]=\"isInteractorSortingSet() ? 'tableHeadOverflowWithSorting' : 'tableHeadOverflow'\">\n    <tr [style.--cols]=\"complexes.length\"\n        [style.--intHeader]=\"isInteractorSortingSet() ? '156px':''\"\n        [style.--sizeSpaceHolder]=\"'185px'\">\n      <th class=\"spaceHolderHeaderOverflow\"\n          [style]=\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\">\n      </th>\n      <th class=\"rotate\" *ngFor=\"let complex of complexes\"\n          [class.predicted]=\"complex.predictedComplex\"\n          [style.--cols]=\"complexes.length\">\n        <a [routerLink]=\"['/complex', complex.complexAC]\"\n           [matTooltip]=\"complex.complexName+ ' - '+ complex.complexAC\"\n           target=\"_blank\">\n          <div>\n            <span>\n              <div class=\"tilted-label\">\n                <i class=\"icon icon-generic small\" data-icon=\"x\"></i>\n                {{ complex.complexName }}\n              </div>\n            </span>\n          </div>\n        </a>\n      </th>\n      <div class=\"spaceHolder\"></div>\n    </tr>\n    <!-- icons row -->\n    <tr [style.--cols]=\"complexes.length\"\n        [style.--intHeader]=\"isInteractorSortingSet() ? '156px':''\"\n        [style.--sizeSpaceHolder]=\"'185px'\">\n      <th class=\"interactorsHeader overflow\"\n          [style]=\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\">\n        Components\n      </th>\n      <ng-container *ngFor=\" let complex of complexes;\">\n        <th class=\"iconOrganism\" [class.predicted]=\"complex.predictedComplex\">\n          <div>\n            <a class=\"button\" (click)=\"toggleBasket(complex)\">\n              <i class=\"icon icon-common\" [attr.data-icon]=\"isInBasket(complex.complexAC) ? '\uF1F8':'\uF217'\"></i>\n            </a>\n          </div>\n          <div>\n            <i class=\"{{iconOrganism(complex.organismName)}}\" [matTooltip]=\"complex.organismName\"></i>\n          </div>\n        </th>\n      </ng-container>\n      <div class=\"spaceHolder\"></div>\n    </tr>\n    </thead>\n  </table>\n</div>\n\n\n", "/* src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.css */\n.CN-table {\n  transform: rotateX(180deg);\n}\nthead {\n  border: 0;\n  background-color: white;\n  border-right: 0 solid white;\n  overflow: scroll;\n}\n.CN-table {\n  clip-path: fill-box;\n  overflow: scroll;\n}\n.spaceHolderSorting {\n  width: 3ch;\n  border-bottom: 3px solid var(--primary);\n}\n.spaceHolderHeaderOverflow {\n  min-width: 130px;\n  max-width: 130px;\n  position: sticky;\n  left: 0;\n  z-index: 4;\n  color: var(--primary);\n  background-color: var(--on-primary);\n  padding-top: 173px;\n  text-align: right;\n}\n.iconOrganism {\n  position: sticky;\n  text-align: center;\n  background-color: var(--primary);\n  color: var(--on-primary);\n  border-left: 1px solid white;\n  font-size: medium;\n  height: 60px;\n}\n.tilted-label {\n  text-overflow: ellipsis;\n  width: 28ch;\n  white-space: nowrap;\n  overflow: hidden;\n}\n.CN-table .tableHeadOverflow tr {\n  --cols: 1;\n  --intHeader: 130px;\n  --parentWidth: 100%;\n  --sizeSpaceHolder: calc(var(--parentWidth) - 70px * var(--cols) - var(--intHeader));\n  display: grid;\n  grid-template-columns: var(--intHeader) repeat(auto-fit, 70px);\n  width: calc(var(--intHeader) + 70px * var(--cols) + var(--sizeSpaceHolder));\n  overflow: hidden;\n}\n.CN-table .tableHeadOverflowWithSorting tr {\n  --cols: 1;\n  --intHeader: 130px;\n  --parentWidth: 100%;\n  --sizeSpaceHolder: calc(var(--parentWidth) - 70px * var(--cols) - var(--intHeader));\n  display: grid;\n  grid-template-columns: var(--intHeader) repeat(auto-fit, 70px);\n  width: calc(var(--intHeader) + 70px * var(--cols) + var(--sizeSpaceHolder) - 3ch);\n  overflow: hidden;\n}\n.CN-table .tableHeadOverflow th.rotate {\n  position: relative;\n  width: 350px;\n  height: 51px !important;\n  color: var(--on-primary);\n  font-size: 14px;\n  text-align: left;\n  border: 1px solid white;\n  top: 70px;\n  left: -52px;\n  display: flex;\n  align-items: center;\n  align-content: center;\n  padding: 0;\n  transform: rotate(-45deg);\n  border-collapse: collapse;\n}\n.CN-table .tableHeadOverflow th.rotate a {\n  width: 100%;\n  height: 100%;\n  align-content: center;\n  background-color: var(--primary);\n  padding: 0 0 0 70px;\n  border: none;\n}\n.spaceHolder {\n  width: 183px;\n  background-color: var(--primary);\n  border-left: 1px solid white;\n}\n.interactorsHeader.overflow {\n  min-width: 130px;\n  max-width: 130px;\n  width: 130px;\n  position: sticky;\n  left: 0;\n  z-index: 4;\n  background-color: var(--on-primary);\n  border-bottom: 3px solid var(--primary);\n  height: 60px;\n  line-height: 70px;\n  text-align: right;\n  color: var(--primary);\n}\n.CN-table th.horizontal.interactorsHeader {\n  padding: 5px;\n  min-width: 130px;\n  max-width: 130px;\n  font-size: medium;\n  border-left: none;\n  text-align: right;\n  color: var(--primary);\n  background-color: var(--on-primary);\n  border-bottom: 3px solid var(--primary);\n}\n.horizontal-label {\n  text-align: center;\n  text-overflow: ellipsis;\n  width: 90%;\n  white-space: nowrap;\n  overflow: hidden;\n  margin: auto;\n}\n.CN-table th.horizontal {\n  color: white;\n  background-color: var(--primary);\n  border-left: 1px solid white;\n  min-width: 80px;\n  max-width: 80px;\n  height: 35px;\n  font-size: 15px;\n}\na:visited {\n  color: var(--on-primary);\n}\na {\n  color: var(--on-primary);\n}\n.basket-icons {\n  margin-left: 5px;\n}\n.button {\n  padding: 0;\n  margin: 0;\n}\n.basketButton {\n  text-align: center;\n}\n/*# sourceMappingURL=table-header.component.css.map */\n", "export function interactorTypeIcon(type: string): string {\n  switch (type) {\n    case 'small molecule':\n      return 'icon icon-conceptual icon-chemical';\n    case 'protein':\n    case 'peptide':\n      return 'icon icon-conceptual icon-structures-3d';\n    case 'stable complex':\n      return 'icon icon-conceptual icon-systems';\n    case 'molecule set':\n      return 'icon icon-generic icon-math';\n    case 'single stranded deoxyribonucleic acid':\n    case 'double stranded deoxyribonucleic acid':\n    case 'small nuclear rna':\n    case 'small nucleolar rna':\n    case 'ribosomal rna':\n    case 'messenger rna':\n    case 'transfer rna':\n    case 'signal recognition particle rna':\n    case 'ribonucleic acid':\n    case 'nucleic acid':\n    case 'long non-coding ribonucleic acid':\n      return 'icon icon-conceptual icon-dna';\n  }\n}\n\nexport function organismIcon(organism: string): string {\n  const formattedName = formatOrganismName(organism);\n  switch (formattedName) {\n    case 'Homo sapiens':\n      return 'icon icon-species icon-human';\n    case 'Mus musculus':\n      return 'icon icon-species icon-mouse';\n    case 'Schizosaccharomyces pombe':\n    case 'Saccharomyces cerevisiae':\n      return 'icon icon-species icon-yeast';\n    case 'Escherichia coli':\n    case 'Pseudomonas aeruginosa':\n    case 'Klebsiella pneumoniae':\n    case 'Chlamydomonas reinhardtii':\n      return 'icon icon-species icon-ecoli';\n    case 'Rattus norvegicus':\n      return 'icon icon-species icon-rat';\n    case 'Caenorhabditis elegans':\n      return 'icon icon-species icon-c-elegans';\n    case 'Gallus gallus':\n      return 'icon icon-species icon-chicken';\n    case 'Drosophila melanogaster':\n      return 'icon icon-species icon-fly';\n    case 'Bos taurus':\n      return 'icon icon-species icon-cow';\n    case 'Oryctolagus cuniculus':\n      return 'icon icon-species icon-rabbit';\n    case 'Ovis aries':\n      return 'icon icon-species icon-sheep';\n    case 'Xenopus laevis':\n      return 'icon icon-species icon-frog';\n    case 'Canis lupus':\n    case 'Canis familiaris':\n      return 'icon icon-species icon-dog';\n    case 'Vibrio cholerae':\n      return 'assets/images/EMBL_Species_Vibrio_cholerae.svg';\n    case 'Crotalus durissus':\n      return 'assets/images/EMBL_Species_RattleSnake.svg';\n    case 'Sus scrofa':\n      return 'icon icon-species icon-pig';\n    case 'Torpedo marmorata':\n    case 'Tetronarce californica':\n      return 'icon icon-species icon-ray';\n    case 'Lymnaea stagnalis':\n      return 'icon icon-species icon-snail';\n    case 'Arabidopsis thaliana':\n      return 'icon icon-species icon-brassica';\n    case 'Danio rerio':\n      return 'icon icon-species icon-zebrafish';\n    case 'Severe acute':\n    case 'Human SARS' :\n    case 'SARS-CoV-2':\n    case 'Middle East':\n    case 'Human betacoronavirus':\n      return 'icon icon-species icon-virus';\n  }\n  return '';\n}\n\nfunction formatOrganismName(name: string): string {\n  return (name || '?')\n    .split(';')[0]\n    .split(' ').slice(0, 2)\n    .join(' ');\n}\n", "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\nimport {organismIcon} from '../../../../complex-portal-utils';\nimport {BasketService} from '../../../../../shared/basket/service/basket.service';\n\n@Component({\n  selector: 'cp-table-header',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css'],\n})\n\nexport class TableHeaderComponent {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private basketService: BasketService) {\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  iconOrganism(organismName: string) {\n    return organismIcon(organismName);\n  }\n\n  toggleBasket(complex: Element) {\n    if (this.isInBasket(complex.complexAC)) {\n      this.removeComplex(complex.complexAC);\n    } else {\n      this.saveComplex(complex);\n    }\n  }\n\n  saveComplex(complex: Element) {\n    this.basketService.saveInBasket(complex);\n  }\n\n  removeComplex(complexAC: string): void {\n    this.basketService.deleteFromBasket(complexAC);\n    this.onComplexRemovedFromBasket.emit(complexAC);\n  }\n\n  isInBasket(complexAC: string): boolean {\n    return this.basketService.isInBasket(complexAC);\n  }\n}\n", "<div class=\"Complex-navigator\">\n  <table class=\"interactors-table\"\n         [ngClass]=\"{'inheritedWidth': complexes.length > 6}\"\n         [style.--cols]=\"complexes.length\">\n    <ng-container *ngFor=\" let interactor of enrichedInteractors; let i=index\">\n      <tr *ngIf=\"!interactor.hidden\">\n        <ng-container *ngFor=\"let oneType of ranges\" class=\"interactorsOrdering\">\n          <td *ngIf=\"oneType[2]===i\" [attr.rowspan]=\"oneType[1]\" class=\"interactorSeparation\"\n              [matTooltip]=\"oneType[0]\">\n            <div class=\"interactorNameContainer\" [style.--rowspanSize]=\"oneType[1]\">\n              {{ oneType[0] }}\n            </div>\n          </td>\n        </ng-container>\n        <td class=\"interactorsColumn\"\n            [ngClass]=\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\"\n            [style]=\"ranges.length!=0 ? 'left:3ch':''\">\n          <cp-table-interactor-name\n            [interactorName]=\"interactor.interactor.name\"\n            [interactorType]=\"interactor.interactor.interactorType\"\n            [interactorId]=\"interactor.interactor.identifier\"\n            [interactorOrganism]=\"interactor.interactor.organismName\"\n            [identifierLink]=\"interactor.interactor.identifierLink\"\n            [organismIconDisplay]=\"organismIconDisplay\"\n            [interactorTypeDisplay]=\"interactorTypeDisplay\"\n            [IDDisplay]=\"IDDisplay\"\n          ></cp-table-interactor-name>\n          <!-- Icon for the expandable -->\n          <div class=\"container\" *ngIf=\"interactor.isSubComplex\">\n            <a (click)=\"toggleSubcomplexExpandable(i)\"\n               [matTooltip]=\"interactor.interactor.name + ' components'\">\n              Components\n              <i class=\"icon icon-common\" data-icon=\"&#xf078;\"\n                 style=\"font-size:small;\n                \"></i>\n            </a>\n          </div>\n        </td>\n        <!-- Interactors' stoichiometry -->\n        <ng-container *ngFor=\"let complex of enrichedComplexes\">\n          <td class=\"intStoich\" [ngClass]=\"{'intStoichFixedWidth': complexes.length > 6}\" [class.predicted]=\"complex.complex.predictedComplex\">\n            <cp-table-main-interactor\n              [complex]=\"complex\"\n              [i]=\"i\"\n              [enrichedInteractors]=\"enrichedInteractors\"\n            ></cp-table-main-interactor>\n          </td>\n        </ng-container>\n        <div *ngIf=\"complexes.length>6\"\n             [ngClass]=\"isInteractorSortingSet() ? 'spaceHolderWithSorting' : 'spaceHolder'\"></div>\n      </tr>\n      <!-- Expandable menu for subcomplexes -->\n      <ng-container *ngIf=\"interactor.expanded\">\n        <ng-container *ngIf=\"!!interactor.subComponents\">\n          <tr *ngFor=\"let el of interactor.subComponents; let j=index\"\n              class=\"expandedRows\"\n              [ngClass]=\"getExpandedRowClass(j, interactor.subComponents.length)\">\n            <td [attr.rowspan]=\"interactor.subComponents.length\" class=\"interactorSeparation\"\n                [matTooltip]=\"interactor.interactor.name + ' components'\"\n                *ngIf=\"j === 0 && (interactorsSorting === 'Type' || interactorsSorting === 'Organism')\">\n              <div class=\"interactorSeparationName\"\n                   [style.--rowspanSize]=\"interactor.subComponents.length\"> {{ interactor.interactor.name }} components\n              </div>\n            </td>\n            <td class=\"subComponentColumn\"\n                [ngClass]=\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\"\n                [style]=\"ranges.length!=0 ? 'left:3ch':''\">\n              <div>\n                <cp-table-interactor-name\n                  [interactorName]=\"el.name\"\n                  [interactorType]=\"el.interactorType\"\n                  [interactorId]=\"el.identifier\"\n                  [interactorOrganism]=\"interactor.interactor.organismName\"\n                  [identifierLink]=\"el.identifierLink\"\n                  [organismIconDisplay]=\"organismIconDisplay\"\n                  [interactorTypeDisplay]=\"interactorTypeDisplay\"\n                  [IDDisplay]=\"IDDisplay\"\n                ></cp-table-interactor-name>\n              </div>\n            </td>\n            <ng-container *ngFor=\"let complex of enrichedComplexes\">\n              <td class=\"intStoich\" [ngClass]=\"{'intStoichFixedWidth': complexes.length > 6}\">\n                <cp-table-subcomponent-interactor\n                  [complex]=\"complex\"\n                  [i]=\"i\"\n                  [j]=\"j\"\n                  [enrichedInteractors]=\"enrichedInteractors\"\n                ></cp-table-subcomponent-interactor>\n              </td>\n            </ng-container>\n            <div class=\"spaceHolder\" *ngIf=\"enrichedComplexes.length > 6\"></div>\n          </tr>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </table>\n</div>\n", "/* src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.css */\ntable {\n  --cols: 1;\n  height: 1px;\n  overflow: scroll;\n}\n.inheritedWidth {\n  width: calc(130px + var(--cols) * 70px + 183px);\n}\n.interactorsColumn {\n  position: sticky;\n  left: 0;\n  z-index: 5;\n  height: 45px;\n  min-width: 130px;\n  max-width: 130px;\n  padding: 5px;\n  text-align: end;\n  color: #0e6f76;\n  font-weight: bold;\n  background: inherit;\n}\n.interactorsColumnFixedWidth {\n  width: 130px;\n}\n.interactorsColumn a {\n  font-weight: normal;\n}\n.intStoich {\n  height: 100%;\n  max-width: 70px;\n  min-width: 70px;\n  font-size: medium;\n  text-align: end;\n  z-index: 1;\n}\n.intStoichFixedWidth {\n  width: 70px;\n}\ni:not(.small) {\n  font-size: large;\n}\ntr:nth-child(even) {\n  background-color: #f7f7f7;\n}\ntr:nth-child(odd) {\n  background-color: #fff;\n}\na,\na:visited {\n  color: #0e6f76;\n}\n.spaceHolder {\n  width: 183px;\n}\n.spaceHolderWithSorting {\n  width: calc(183px - 3ch);\n}\n.subComponentColumn {\n  left: 0;\n  z-index: 30;\n  height: 45px;\n  min-width: 130px;\n  max-width: 130px;\n  padding: 5px;\n  text-align: end;\n  color: #0e6f76;\n  font-weight: bold;\n  background: inherit;\n  position: sticky;\n}\n.expandedRows {\n  color: #0e6f76;\n  position: relative;\n}\n.firstExpandedRow:after {\n  z-index: 40;\n  content: \"\";\n  position: absolute;\n  inset: -2px -1px -2px -1px;\n  pointer-events: none;\n  background:\n    linear-gradient(\n      180deg,\n      #0e6f7696 0px,\n      transparent 10px);\n}\n.lastExpandedRow:after {\n  z-index: 40;\n  content: \"\";\n  position: absolute;\n  inset: -2px -1px -2px -1px;\n  pointer-events: none;\n  background:\n    linear-gradient(\n      0deg,\n      #0e6f7696 0px,\n      transparent 10px);\n}\n.singleExpandedRow:after {\n  z-index: 40;\n  content: \"\";\n  position: absolute;\n  inset: -2px -1px -2px -1px;\n  pointer-events: none;\n  background:\n    linear-gradient(\n      180deg,\n      #0e6f7696 0px,\n      transparent 10px),\n    linear-gradient(\n      0deg,\n      #0e6f7696 0px,\n      transparent 10px);\n}\n.interactorSeparation {\n  max-width: 3ch;\n  min-width: 3ch;\n  background-color: #0e6f76;\n  border: 1px solid white;\n  overflow: hidden;\n  width: 1%;\n  text-align: -webkit-center;\n  position: sticky;\n  z-index: 31;\n  left: 0;\n}\n.interactorNameContainer,\n.interactorSeparationName {\n  --rowspanSize: 1;\n  writing-mode: vertical-rl;\n  transform: rotate(-180deg);\n  font-size: small;\n  color: white;\n  line-height: 0.8;\n  text-align: center;\n  text-overflow: ellipsis;\n  height: calc(var(--rowspanSize) * 48px);\n  white-space: nowrap;\n  overflow: hidden;\n}\n.container {\n  font-size: 14px;\n}\n.horizontalHeader {\n  min-width: 114px;\n  max-width: 114px;\n}\n@supports (-webkit-hyphens:none) {\n  .interactorsColumn {\n    height: 45px !important;\n  }\n  .intStoich {\n    height: 45px;\n    overflow-y: visible;\n  }\n}\n/*# sourceMappingURL=table-interactor-column.component.css.map */\n", "import {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedInteractor} from './table-interactor-column.component';\n\n\nexport class ComponentWithStoichiometry {\n  identifier: string;\n  stochiometryValue: [number, number];\n  stochiometryText?: string;\n  stochiometryValueFormatted?: string;\n}\n\nexport function findInteractorInComplex(complex: Element,\n                                        interactorId: string,\n                                        enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const interactor = findInteractorInComplexComponents(complex.interactors, interactorId, enrichedInteractors);\n  if (!!interactor) {\n    return {\n      identifier: interactor.identifier,\n      stochiometryValue: interactor.stochiometryValue,\n      stochiometryText: getStoichiometryText(interactor.stochiometryValue),\n      stochiometryValueFormatted: formatStoichiometryValues(interactor.stochiometryValue)\n    };\n  }\n  return null;\n}\n\n// Private functions\n\nfunction findInteractorInComplexComponents(complexComponents: ComplexComponent[],\n                                           interactorId: string,\n                                           enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  // We look for the interactor in the complex, as one of the components, or as part of any subcomplex of the complex, recursively.\n  // Even if we find a match for the interactor as one of the complex components, we keep looking at other components, as the interactor\n  // could also be part of a subcomplex, so the stoichiometry would need to be added for all matches.\n\n  let interactorFound = false;\n  let stoichiometry: [number, number] = null;\n\n  // We iterate through all the components of the complex to find matches\n  for (const complexComponent of complexComponents) {\n    const interactorMatch = findInteractorInComplexComponent(complexComponent, interactorId, enrichedInteractors);\n    if (!!interactorMatch) {\n      // We found a match for the interactor, on this component, or on a subcomponent of it in the case of a subcomplex\n      interactorFound = true;\n      // If we have any stoichiometry for the component, we add it to the total stoichiometry\n      if (!!interactorMatch.stochiometryValue) {\n        if (!!stoichiometry) {\n          stoichiometry = [\n            stoichiometry[0] + interactorMatch.stochiometryValue[0],\n            stoichiometry[1] + interactorMatch.stochiometryValue[1]\n          ];\n        } else {\n          stoichiometry = [\n            interactorMatch.stochiometryValue[0],\n            interactorMatch.stochiometryValue[1]\n          ];\n        }\n      }\n    }\n  }\n\n  // If we have found the interactor as part of one of the complex components, or part of a subcomplex, we return it\n  if (interactorFound) {\n    return {\n      identifier: interactorId,\n      stochiometryValue: stoichiometry\n    };\n  }\n\n  return null;\n}\n\nfunction findInteractorInComplexComponent(complexComponent: ComplexComponent,\n                                          interactorId: string,\n                                          enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const componentStoichiometry = parseStoichiometryValues(complexComponent.stochiometry);\n\n  if (complexComponent.identifier === interactorId) {\n    // The interactor is the complex component we are currently checking\n    return {\n      identifier: interactorId,\n      stochiometryValue: componentStoichiometry\n    };\n  }\n\n  if (complexComponent.interactorType === 'stable complex') {\n    // If the id does not match, and the component is a subcomplex, then we can look for the interactor in the subcomplex components\n    const complexComponentInteractor = enrichedInteractors.find(interactor =>\n      interactor.interactor.identifier === complexComponent.identifier);\n\n    if (!!complexComponentInteractor && !!complexComponentInteractor.subComponents) {\n      const subComponentsMatch = findInteractorInComplexComponents(\n        complexComponentInteractor.subComponents, interactorId, enrichedInteractors);\n\n      if (!!subComponentsMatch) {\n        // We have found the interactor in the subcomplex\n        if (!!subComponentsMatch.stochiometryValue) {\n          if (!!componentStoichiometry) {\n            // If we have stoichiometry for both the component and the subcomponent, we add both\n            return {\n              identifier: interactorId,\n              stochiometryValue: [\n                componentStoichiometry[0] * subComponentsMatch.stochiometryValue[0],\n                componentStoichiometry[1] * subComponentsMatch.stochiometryValue[1]\n              ]\n            };\n          } else {\n            // If we only have stoichiometry for the subcomponent, we use that stoichiometry\n            return {\n              identifier: interactorId,\n              stochiometryValue: subComponentsMatch.stochiometryValue\n            };\n          }\n        } else {\n          // If we only have stoichiometry for the component, we use that stoichiometry\n          return {\n            identifier: interactorId,\n            stochiometryValue: componentStoichiometry\n          };\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction fetchValuesFromStoichiometry(stoichiometry: string) {\n  const pattern = 'minValue: ([0-9+]), maxValue: ([0-9+])';\n  return stoichiometry.match(pattern);\n}\n\nfunction parseStoichiometryValues(stoichiometry: string): [number, number] {\n  if (!!stoichiometry) {\n    const matchedStoichiometry = fetchValuesFromStoichiometry(stoichiometry);\n    if (!!matchedStoichiometry) {\n      const minValue = parseInt(matchedStoichiometry[1], 10);\n      const maxValue = parseInt(matchedStoichiometry[2], 10);\n      if (!isNaN(minValue) && !isNaN(maxValue)) {\n        return [minValue, maxValue];\n      }\n    }\n  }\n  return null;\n}\n\nfunction formatStoichiometryValues(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n    const minValue = stoichiometry[0];\n    const maxValue = stoichiometry[1];\n    if (minValue === maxValue) {\n      return minValue.toString();\n    } else {\n      return `${minValue}-${maxValue}`;\n    }\n  }\n  return ' '; // sometimes we don't have the stoichiometry value\n}\n\nfunction getStoichiometryText(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n    return 'Stoichiometry values: minValue: ' + stoichiometry[0] + ', maxValue: ' + stoichiometry[1];\n  } else {\n    return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n  }\n}\n", "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {Interactor} from '../../../../shared/model/complex-results/interactor.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {Observable} from 'rxjs/Observable';\nimport {of} from 'rxjs';\nimport {ComplexPortalService} from '../../../../shared/service/complex-portal.service';\nimport {map} from 'rxjs/operators';\nimport {findInteractorInComplex} from './complex-navigator-utils';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\n\nexport class EnrichedInteractor {\n  interactor: Interactor;\n  hidden: boolean;\n  isSubComplex: boolean;\n  expanded: boolean;\n  subComponents: ComplexComponent[];\n  partOfComplex: number[];\n  timesAppearing: number;\n}\n\nexport class EnrichedComplex {\n  complex: Element;\n  startInteractorIndex: number;\n  endInteractorIndex: number;\n  startSubComponentIndex: number;\n  endSubComponentIndex: number;\n  startInteractorIncludedWhenExpanded: boolean;\n}\n\n@Component({\n  selector: 'cp-table-interactor-column',\n  templateUrl: './table-interactor-column.component.html',\n  styleUrls: ['./table-interactor-column.component.css']\n})\nexport class TableInteractorColumnComponent implements OnChanges {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() interactors: Interactor[];\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  enrichedInteractors: EnrichedInteractor[];\n  enrichedComplexes: EnrichedComplex[];\n  ranges: number[];\n\n  _timesAppearingByType: Map<string, number>;\n  _timesAppearingByOrganism: Map<string, number>;\n\n  constructor(private complexPortalService: ComplexPortalService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!!changes['interactors']) {\n      this.enrichInteractors();\n      this.calculateTimesAppearing();\n    }\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  private classifyInteractors(): void {\n    if (!!this.interactorsSorting && !!this.enrichedInteractors && this.enrichedInteractors.length > 0) {\n      if (this.interactorsSorting === 'Type') {\n        this.classifyInteractorsByType();\n      } else if (this.interactorsSorting === 'Organism') {\n        this.classifyInteractorsByOrganism();\n      } else {\n        this.classifyInteractorsByOccurrence();\n      }\n    }\n  }\n\n  private enrichInteractors() {\n    this.enrichedInteractors = [];\n    for (const interactor of this.interactors) {\n      const isSubComplex = interactor.interactorType === 'stable complex';\n      const newEnrichedInteractor: EnrichedInteractor = {\n        interactor,\n        hidden: false,\n        isSubComplex,\n        expanded: false,\n        subComponents: null,\n        partOfComplex: [],\n        timesAppearing: 0,\n      };\n      if (isSubComplex) {\n        this.loadSubInteractors(newEnrichedInteractor).subscribe(subComponents => newEnrichedInteractor.subComponents = subComponents);\n      }\n      this.enrichedInteractors.push(newEnrichedInteractor);\n    }\n  }\n\n  toggleSubcomplexExpandable(i: number): void {\n    this.enrichedInteractors[i].expanded = !this.enrichedInteractors[i].expanded;\n\n    if (this.enrichedInteractors[i].expanded) {\n      // EnrichedInteractor has been expanded, we need to:\n\n      // 1. Collapse the other ones, in case there is any other expanded\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        if (i !== j) {\n          this.enrichedInteractors[j].expanded = false;\n        }\n      }\n\n      // 2. Hide any interactor now displayed in the expanded section\n      if (!!this.enrichedInteractors[i].subComponents) {\n        const subInteractorIds: string[] = this.enrichedInteractors[i].subComponents.map(component => component.identifier);\n        for (let j = 0; j < this.enrichedInteractors.length; j++) {\n          if (i !== j) {\n            this.enrichedInteractors[j].hidden = !!subInteractorIds.includes(this.enrichedInteractors[j].interactor.identifier);\n          }\n        }\n      }\n    } else {\n      // EnrichedInteractor has been collapsed, we need to:\n      // 1. Display any interactor previously hidden\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        this.enrichedInteractors[j].hidden = false;\n      }\n    }\n\n    // Something has been expanded or collapsed, we need to recalculate the start and end indexes for the lines\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n\n  }\n\n  private loadSubInteractors(interactor: EnrichedInteractor): Observable<ComplexComponent[]> {\n    // this function returns the list of subcomponents of an interactor of type stable complex\n    const foundComplex: Element = this.complexes.find(complex => complex.complexAC === interactor.interactor.identifier);\n    if (!!foundComplex) {\n      return of(foundComplex.interactors);\n    } else {\n      // Actually call the back-end to fetch these\n      return this.complexPortalService.getSimplifiedComplex(interactor.interactor.identifier)\n        .pipe(map(complex => complex?.interactors));\n    }\n  }\n\n  private calculateAllStartAndEndIndexes(): void {\n    this.enrichedComplexes = [];\n\n    for (const complex of this.complexes) {\n      this.enrichedComplexes.push(this.calculateStartAndEndIndexes(complex));\n    }\n  }\n\n  private getMinValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.min(valueA, valueB);\n  }\n\n  private getMaxValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.max(valueA, valueB);\n  }\n\n  private calculateStartAndEndIndexes(complex: Element): EnrichedComplex {\n    const enrichedComplex: EnrichedComplex = {\n      complex,\n      startInteractorIndex: null,\n      endInteractorIndex: null,\n      startSubComponentIndex: null,\n      endSubComponentIndex: null,\n      startInteractorIncludedWhenExpanded: true,\n    };\n\n    // We iterate through the interactors to find the first and last one part of the complex\n    // We do this to be able to draw a line connecting all interactors in the complex\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n\n        if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].interactor.identifier, this.enrichedInteractors)) {\n          // The interactor is part of the complex, we update the start and end indices for the interactors\n          // line as it may start in this interactor\n          enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n          if (enrichedComplex.startInteractorIndex === i) {\n            // The line starts in this interactor, so the line always starts in this interactor, even when expanded\n            enrichedComplex.startInteractorIncludedWhenExpanded = true;\n          }\n          enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n\n          // The interactor is a subcomplex\n          if (this.enrichedInteractors[i].isSubComplex && !!this.enrichedInteractors[i].subComponents) {\n            if (this.enrichedInteractors[i].expanded) {\n              // If the subcomplex is expanded, as the subcomplex is part of the complex, all its subcomponents are also part\n              // of it. That means we need a line connecting all the subcomponents.\n              // That line must also connect to the subcomplex, so we start it at -1 to make sure it starts at the interactor cell\n              // and not at the first subcomponent\n              enrichedComplex.startSubComponentIndex = -1;\n              enrichedComplex.endSubComponentIndex = this.enrichedInteractors[i].subComponents.length - 1;\n            }\n          }\n        } else if (this.enrichedInteractors[i].isSubComplex &&\n          !!this.enrichedInteractors[i].subComponents &&\n          this.enrichedInteractors[i].expanded) {\n          // The interactor is not part of the complex, but it is a subcomplex, and it is expanded.\n          // This means the subcomponents of the subcomplex are visible, and any of them could be part of the complex.\n          // In that case, the line could start or end on any of those subcomponents\n          for (let k = 0; k < this.enrichedInteractors[i].subComponents.length; k++) {\n            if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].subComponents[k].identifier, this.enrichedInteractors)) {\n              // The subcomponent of this interactor is part of the complex, we update the start and end indices for the interactors\n              // line as it may start in this interactor\n              enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n              if (enrichedComplex.startInteractorIndex === i) {\n                // The line starts in a subcomponent of the interactor, but not on the interactor itself,\n                // so the line does not start in the interactor when expanded\n                enrichedComplex.startInteractorIncludedWhenExpanded = false;\n              }\n              enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n              // The subcomponent of this interactor is part of the complex, we update the start and end indices for the subcomponents\n              // line as it may start in this subcomponent\n              enrichedComplex.startSubComponentIndex = this.getMinValue(enrichedComplex.startSubComponentIndex, k);\n              enrichedComplex.endSubComponentIndex = this.getMaxValue(enrichedComplex.endSubComponentIndex, k);\n            }\n          }\n        }\n      }\n    }\n    return enrichedComplex;\n  }\n\n  public classifyInteractorsByOrganism() {\n    this.enrichedInteractors.sort((a, b) => {\n      if (b.interactor.organismName === a.interactor.organismName) {\n        return b.timesAppearing - a.timesAppearing;\n      } else {\n        const organismBTimesAppearing = this._timesAppearingByOrganism.get(b.interactor.organismName);\n        const organismATimesAppearing = this._timesAppearingByOrganism.get(a.interactor.organismName);\n        if (organismBTimesAppearing === organismATimesAppearing) {\n          return b.interactor.organismName.localeCompare(a.interactor.organismName);\n        } else {\n          return organismBTimesAppearing - organismATimesAppearing;\n        }\n      }\n    });\n    this.rangeOfInteractorOrganism();\n  }\n\n  public classifyInteractorsByType() {\n    this.enrichedInteractors.sort((a, b) => {\n      if (b.interactor.interactorType === a.interactor.interactorType) {\n        return b.timesAppearing - a.timesAppearing;\n      } else {\n        const typeBTimesAppearing = this._timesAppearingByType.get(b.interactor.interactorType);\n        const typeATimesAppearing = this._timesAppearingByType.get(a.interactor.interactorType);\n        if (typeBTimesAppearing === typeATimesAppearing) {\n          return b.interactor.interactorType.localeCompare(a.interactor.interactorType);\n        } else {\n          return typeBTimesAppearing - typeATimesAppearing;\n        }\n      }\n    });\n    this.rangeOfInteractorType();\n  }\n\n  public classifyInteractorsByOccurrence() {\n    this.enrichedInteractors.sort((a, b) =>\n      b.timesAppearing - a.timesAppearing\n    );\n    this.ranges = [];\n  }\n\n  public rangeOfInteractorType() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.interactorType !== this.enrichedInteractors[i + 1].interactor.interactorType) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.interactorType, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  public rangeOfInteractorOrganism() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.organismName !== this.enrichedInteractors[i + 1].interactor.organismName) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.organismName, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  getExpandedRowClass(i: number, length: number): string {\n    if (i === 0) {\n      if (length === 1) {\n        return 'singleExpandedRow';\n      } else {\n        return 'firstExpandedRow';\n      }\n    } else if (i === length - 1) {\n      return 'lastExpandedRow';\n    }\n    return null;\n  }\n\n  private calculateTimesAppearing() {\n    // Initialise times appearing by type or organism\n    this._timesAppearingByType = new Map();\n    this._timesAppearingByOrganism = new Map();\n    for (const oneInteractor of this.enrichedInteractors) {\n      // Initialise times appearing for each interactor\n      oneInteractor.timesAppearing = 0;\n      for (const complex of this.complexes) {\n        const match = findInteractorInComplex(complex, oneInteractor.interactor.identifier, this.enrichedInteractors);\n        if (!!match) {\n          // Update times appearing for the interactor\n          oneInteractor.timesAppearing += 1;\n          // Update times appearing for the interactor type\n          this._timesAppearingByType.set(\n            oneInteractor.interactor.interactorType,\n            (this._timesAppearingByType.get(oneInteractor.interactor.interactorType) || 0) + 1);\n          // Update times appearing for the interactor organism\n          this._timesAppearingByOrganism.set(\n            oneInteractor.interactor.organismName,\n            (this._timesAppearingByOrganism.get(oneInteractor.interactor.organismName) || 0) + 1);\n        }\n      }\n    }\n  }\n\n}\n", "<div class=\"container\">\n  <div class=\"nameAndIcons\" [ngClass]=\"{inlineDisplay: interactorType==='stable complex'}\">\n    <i *ngIf=\"organismIconDisplay\"\n       class=\"{{interactorOrganismIcon}}\"\n       [matTooltip]=\"interactorOrganism\"></i>\n\n    <i *ngIf=\"interactorTypeDisplay\"\n       class=\"{{interactorTypeIcon}}\"\n       [matTooltip]=\"interactorType\"></i>\n\n    <div class=\"name\" *ngIf=\"IDDisplay\" [matTooltip]=\"interactorId\"> {{ interactorName }}\n    </div>\n    <a *ngIf=\"IDDisplay\"\n       [routerLink]=\"['/complex/search']\"\n       [queryParams]=\"{query: interactorId, page: 1}\"\n       target=\"_blank\">\n      <i class=\"icon icon-functional small\" data-icon=\"1\"\n         [matTooltip]=\"'More complexes containing ' + interactorName \"></i>\n    </a>\n\n    <div class=\"nameCompact\" *ngIf=\"!IDDisplay\">\n      <div class=\"name\" *ngIf=\"!IDDisplay\" [matTooltip]=\"'More information about ' + interactorName\">\n        <a *ngIf=\"!!identifierLink\" href=\"{{identifierLink}}\" target=\"_blank\" class=\"externalLinkContainer\">\n          {{ interactorName }}\n        </a>\n      </div>\n      <a [routerLink]=\"['/complex/search']\"\n         [queryParams]=\"{query: interactorId, page: 1}\"\n         target=\"_blank\">\n        <i class=\"icon icon-functional small\" data-icon=\"1\"\n           [matTooltip]=\"'More complexes containing ' + interactorName \"></i>\n      </a>\n    </div>\n  </div>\n  <cp-table-interactor-external-link\n    *ngIf=\"IDDisplay\"\n    [interactorId]=\"interactorId\"\n    [identifierLink]=\"identifierLink\"\n    [interactorType]=\"interactorType\"\n    [isMainInteractor]=\"isMainInteractor\"\n    [IDDisplay]=\"IDDisplay\"\n    (externalLinkVisible)=\"externalLinkVisibleHandler($event)\">\n  </cp-table-interactor-external-link>\n</div>\n", "/* src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.css */\na {\n  font-weight: bold;\n}\na,\na:visited {\n  color: #0e6f76;\n}\ni:not(.small) {\n  font-size: medium;\n}\n.nameAndIcons {\n  font-size: 14px;\n  display: flex;\n  width: inherit;\n  justify-content: flex-end;\n}\n.inlineDisplay {\n  display: flex;\n  justify-content: flex-end;\n}\n.name {\n  width: inherit;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  text-wrap: nowrap;\n  text-align: end;\n  padding-right: 5px;\n}\n.nameCompact {\n  display: inline-flex;\n  width: -webkit-fill-available;\n}\n/*# sourceMappingURL=table-interactor-name.component.css.map */\n", "import {Component, Input, OnInit} from '@angular/core';\nimport {interactorTypeIcon} from '../../../../../complex-portal-utils';\nimport {organismIcon} from '../../../../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-table-interactor-name',\n  templateUrl: './table-interactor-name.component.html',\n  styleUrls: ['./table-interactor-name.component.css']\n})\nexport class TableInteractorNameComponent implements OnInit {\n\n  @Input() interactorName: string;\n  @Input() interactorType: string;\n  @Input() interactorId: string;\n  @Input() interactorOrganism: string;\n  @Input() identifierLink: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() isMainInteractor: boolean;\n  interactorTypeIcon: string;\n  interactorOrganismIcon: string;\n  externalLinkVisible: boolean;\n\n  ngOnInit(): void {\n    this.interactorTypeIcon = interactorTypeIcon(this.interactorType);\n    this.interactorOrganismIcon = organismIcon(this.interactorOrganism);\n  }\n\n  externalLinkVisibleHandler(isVisible: boolean): void {\n    this.externalLinkVisible = isVisible;\n  }\n}\n", "<div class=\"externalLinkContainer\" [matTooltip]=\"'More information about ' + interactorId\">\n  <a *ngIf=\"externalLinkVisible\" href=\"{{identifierLink}}\" target=\"_blank\" class=\"externalLinkContainer\">\n    {{ interactorId }}\n    <i class=\"icon icon-generic small\" data-icon=\"x\" title=\"More information about {{ interactorId }}\"></i>\n  </a>\n</div>\n", "/* src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.css */\na {\n  font-weight: normal;\n}\na,\na:visited {\n  color: #0e6f76;\n}\ni:not(.small) {\n  font-size: large;\n}\n.externalLinkContainer {\n  justify-content: end;\n  grid-gap: 5px;\n  font-size: 14px;\n  line-break: anywhere;\n  word-break: break-word;\n}\n/*# sourceMappingURL=table-interactor-external-link.component.css.map */\n", "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-external-link',\n  templateUrl: './table-interactor-external-link.component.html',\n  styleUrls: ['./table-interactor-external-link.component.css']\n})\nexport class TableInteractorExternalLinkComponent implements OnInit {\n\n  @Input() interactorId: string;\n  @Input() identifierLink: string;\n  @Input() interactorType: string;\n  @Input() isMainInteractor: boolean;\n  @Input() IDDisplay: boolean;\n\n  @Output() externalLinkVisible: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  ngOnInit(): void {\n    this.showExternalLink();\n  }\n\n  showExternalLink(): boolean {\n    if (this.isMainInteractor && this.interactorType === 'stable complex') {\n      this.externalLinkVisible.emit(false);\n      return false;\n    }\n    this.externalLinkVisible.emit(!!this.identifierLink);\n    return !!this.identifierLink;\n  }\n}\n", "<ng-container>\n  <div class=\"stoichNum\" [matTooltip]=\"stoichiometryText\">\n    {{ stoichiometryValue }}\n  </div>\n</ng-container>\n", "/* src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.css */\n.stoichNum {\n  width: 4ch;\n  height: 4ch;\n  border-radius: 4ch;\n  background-color: var(--primary);\n  text-align: center;\n  padding-top: 0.5ch;\n  color: var(--on-primary);\n  font-size: small;\n  margin-left: auto;\n  margin-right: auto;\n  position: relative;\n  z-index: 1;\n}\n/*# sourceMappingURL=table-interactor-stoichiometry.component.css.map */\n", "import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-stoichiometry',\n  templateUrl: './table-interactor-stoichiometry.component.html',\n  styleUrls: ['./table-interactor-stoichiometry.component.css']\n})\nexport class TableInteractorStoichiometryComponent {\n  @Input() stoichiometryText: string;\n  @Input() stoichiometryValue: string;\n}\n", "<div [ngClass]=\"topLineClass\"></div>\n<cp-table-interactor-stoichiometry\n  *ngIf=\"!!interactorComponent\"\n  [stoichiometryText]=\"interactorComponent.stochiometryText\"\n  [stoichiometryValue]=\"interactorComponent.stochiometryValueFormatted\"\n></cp-table-interactor-stoichiometry>\n<div [ngClass]=\"bottomLineClass\"></div>\n", "/* src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.css */\n:host {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  justify-content: center;\n  align-items: center;\n  align-content: center;\n  flex-wrap: nowrap;\n}\n:host * {\n  flex: 1;\n}\n.verticalLine,\n.transparentVerticalLine {\n  margin-left: auto;\n  margin-right: auto;\n  min-width: 1%;\n  max-width: 1%;\n  min-height: 50%;\n  z-index: 0;\n  position: relative;\n  height: 50%;\n}\n.verticalLine {\n  border-right: 3px solid var(--primary);\n}\n.transparentVerticalLine {\n  border-right: 0;\n}\n/*# sourceMappingURL=table-main-interactor.component.css.map */\n", "import {Component, Input, OnChanges} from '@angular/core';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-main-interactor',\n  templateUrl: './table-main-interactor.component.html',\n  styleUrls: ['./table-main-interactor.component.css']\n})\nexport class TableMainInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  topLineClass: string;\n  bottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(\n      this.complex.complex, this.interactor.interactor.identifier, this.enrichedInteractors);\n    this.topLineClass = this.displayTopLineClass(this.complex, this.i);\n    this.bottomLineClass = this.displayBottomLineClass(this.complex, this.i);\n  }\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  public displayTopLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnInteractorCell(complex, interactorIndex) && !this.doesLineStartOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnInteractorCell(complex, interactorIndex) && !this.doesLineEndOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n\n      // The line starts before this interactor and ends after, so it crosses through the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      // The line starts before this interactor and end at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor, and it must cross through the interactor cell to the subcomponents\n        if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n\n      if (!this.enrichedInteractors[interactorIndex].isSubComplex) {\n        // If the interactor is not a subcomplex, then the interactor has no subcomponents and the line starts in it\n        return true;\n      }\n      // If the interactor is a subcomplex.\n      // If the interactor is actually part of the complex, the line starts in this interactor\n      // Otherwise, the line actually starts on one of the subcomponents of the complex, but not on the interactor itself, as it is\n      // not part of the complex.\n      if (complex.startInteractorIncludedWhenExpanded) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line ends at this interactor or on any of its subcomponents\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n\n      // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n      // the line does not end in this interactor, and it must cross through to the subcomponents\n      if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n        if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n}\n", "<div [ngClass]=\"displayTopLineClass\"></div>\n<cp-table-interactor-stoichiometry\n  *ngIf=\"!!interactorComponent\"\n  [stoichiometryText]=\"interactorComponent.stochiometryText\"\n  [stoichiometryValue]=\"interactorComponent.stochiometryValueFormatted\"\n></cp-table-interactor-stoichiometry>\n<div [ngClass]=\"displayBottomLineClass\"></div>\n", "/* src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.css */\n.verticalLine,\n.transparentVerticalLine {\n  margin-left: auto;\n  margin-right: auto;\n  min-width: 1%;\n  max-width: 1%;\n  max-height: 50%;\n  min-height: 50%;\n  z-index: 0;\n}\n.verticalLine {\n  border-right: 3px solid #0e6f76;\n}\n.transparentVerticalLine {\n  border-right: 0;\n}\n/*# sourceMappingURL=table-subcomponent-interactor.component.css.map */\n", "import {Component, Input, OnChanges} from '@angular/core';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-subcomponent-interactor',\n  templateUrl: './table-subcomponent-interactor.component.html',\n  styleUrls: ['./table-subcomponent-interactor.component.css']\n})\n\nexport class TableSubcomponentInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() j: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  displayTopLineClass: string;\n  displayBottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(this.complex.complex, this.el.identifier, this.enrichedInteractors);\n    this.displayTopLineClass = this.displayTopLineClassExpanded(this.complex, this.i, this.j);\n    this.displayBottomLineClass = this.displayBottomLineClassExpanded(this.complex, this.i, this.j);\n  }\n\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  get el(): ComplexComponent {\n    return this.enrichedInteractors[this.i].subComponents[this.j];\n  }\n\n  public displayTopLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n      // The line starts before this interactor and ends after, so it crosses through all the subcomponents of the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n        // The line starts before this subcomponent and ends after, so it crosses through the subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this interactor, and it ends on a later subcomponent, so it crosses through this subcomponent\n        if (complex.startInteractorIndex < interactorIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this subcomponent, and it ends on a later interactor, so it crosses through this subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endInteractorIndex > interactorIndex) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n      if (complex.startSubComponentIndex != null && complex.startSubComponentIndex === subComponentIndex) {\n        // If the subcomplex is a component of the complex, the line starts in the cell of the interactor, meaning it cannot\n        // start on any subcomponent.\n        // Otherwise, it starts on the subcomponent with the index subComponentIndex\n        return !complex.complex.interactors.some(component =>\n          this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier);\n\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n      // The line ends at this interactor and this subcomponent\n      if (complex.endSubComponentIndex != null && complex.endSubComponentIndex === subComponentIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n", "<div class=\"filters\">\n  <div class=\"sortingInteractors\">\n    <input type=\"submit\" name=\"classificationButton\" value=\"Sort components\" class=\"button\">\n    <div class=\"typeOfSorting\">\n      <input type=\"button\" name=\"occurrenceClassification\" value=\"Occurrence\" class=\"button\"\n             (click)=\"interactorsSortingChanges('Occurrence')\">\n      <input type=\"button\" name=\"typeClassification\" value=\"Type\" class=\"button\"\n             (click)=\"interactorsSortingChanges('Type')\">\n      <input type=\"button\" name=\"organismClassification\" value=\"Organism\" class=\"button\"\n             (click)=\"interactorsSortingChanges('Organism')\">\n      <!--      <input type=\"submit\" name=\"geneClassification\" value=\"Orthology (Not available yet)\" class=\"button\"-->\n      <!--             (click)=\"InteractorsSortingChanges('Orthology')\">-->\n    </div>\n  </div>\n\n  <div class=\"dropdown\">\n    <input type=\"submit\" name=\"classificationButton\" value=\"Display Options\" class=\"button\">\n    <ul class=\"displaySize\">\n      <li>\n        <label>\n          <input type=\"radio\" name=\"displayType\" value=\"Compact\" class=\"checkbox compact\"\n                 (click)=\"setDisplayType('compact')\" [checked]=\"typeOfDisplay === 'compact'\">\n          Compact display\n        </label>\n      </li>\n      <li class=\"detailedDisplay\">\n        <label>\n          <input type=\"radio\" name=\"displayType\" value=\"Detailed\" class=\"checkbox detailed\"\n                 (click)=\"setDisplayType('detailed')\" [checked]=\"typeOfDisplay === 'detailed'\">\n          Detailed display\n        </label>\n        <ul class=\"detailedDisplayOptions\">\n          <li>\n            <input type=\"checkbox\" name=\"organism\" value=\"organism\" class=\"checkbox\" [checked]=\"organismIconDisplay\"\n                   (change)=\"DisplayingOrganism()\">\n            Organism\n          </li>\n          <li>\n            <input type=\"checkbox\" name=\"type\" value=\"type\" class=\"checkbox\" [checked]=\"interactorTypeDisplay\"\n                   (change)=\"DisplayingType()\">\n            Type\n          </li>\n          <li>\n            <input type=\"checkbox\" name=\"id\" value=\"id\" class=\"checkbox\" [checked]=\"IDDisplay\"\n                   (change)=\"DisplayingID()\">\n            Interactor ID\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </div>\n</div>\n", "/* src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.css */\n.typeOfSorting {\n  display: none;\n}\n.sortingInteractors:hover .typeOfSorting {\n  display: flex;\n  margin-top: -15px;\n  flex-direction: row;\n  position: absolute;\n  z-index: 5;\n}\n.typeOfSorting .button {\n  border-right: 1px solid white;\n  font-size: 14px;\n}\n.filters {\n  display: flex;\n  justify-content: center;\n  grid-gap: 10px;\n  height: 67px;\n  z-index: 5;\n  text-align: center;\n}\n.displaySize {\n  display: none;\n}\n.detailedDisplayOptions {\n  display: none;\n}\nlabel {\n  color: var(--on-primary);\n}\n.dropdown:hover .displaySize {\n  display: flex;\n  list-style: none;\n  width: 300px;\n  background-color: var(--primary);\n  color: var(--on-primary);\n  margin-top: -15px;\n  flex-direction: row;\n  position: absolute;\n  height: 40px;\n  align-content: center;\n  z-index: 5;\n}\n.dropdown:hover .displaySize li {\n  width: 200px;\n  background-color: var(--primary);\n  margin-left: -21px;\n  text-align: left;\n  padding-left: 6px;\n  z-index: 5;\n}\nli {\n  text-align: center;\n  align-items: center;\n  font-size: 14px;\n  border-left: 1px solid white;\n  padding-top: 10px;\n  max-width: 171px;\n}\n.detailedDisplay:hover .detailedDisplayOptions {\n  display: flex;\n  list-style: none;\n  align-content: baseline;\n  flex-direction: column;\n  position: absolute;\n  z-index: 5;\n  margin-left: 14px;\n}\n.detailedDisplayOptions li {\n  text-align: left;\n  z-index: 5;\n}\n/*# sourceMappingURL=complex-navigator-buttons.component.css.map */\n", "import {Component, EventEmitter, Input, Output, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-navigator-buttons',\n  templateUrl: './complex-navigator-buttons.component.html',\n  styleUrls: ['./complex-navigator-buttons.component.css']\n})\nexport class ComplexNavigatorButtonsComponent implements OnInit {\n  @Output() interactorsSortingChange = new EventEmitter<string>();\n  @Output() organismIconDisplayChange = new EventEmitter<boolean>();\n  @Output() interactorTypeDisplayChange = new EventEmitter<boolean>();\n  @Output() IDDisplayChange = new EventEmitter<boolean>();\n\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  typeOfDisplay: string;\n\n  ngOnInit() {\n    this.updateDisplay();\n  }\n\n  interactorsSortingChanges(typeOfSorting: string) {\n    this.interactorsSortingChange.emit(typeOfSorting);\n    if (this.typeOfDisplay === 'detailed') {\n      if (typeOfSorting === 'Type') {\n        this.interactorTypeDisplay = false;\n        this.organismIconDisplay = true;\n      } else if (typeOfSorting === 'Organism') {\n        this.organismIconDisplay = false;\n        this.interactorTypeDisplay = true;\n      }\n      this.updateDisplay();\n    }\n  }\n\n  DisplayingOrganism() {\n    this.organismIconDisplay = !this.organismIconDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingType() {\n    this.interactorTypeDisplay = !this.interactorTypeDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingID() {\n    this.IDDisplay = !this.IDDisplay;\n    this.updateDisplay();\n  }\n\n  setDisplayType(type: string) {\n    if (type === 'compact') {\n      this.compactDisplay();\n    } else if (type === 'detailed') {\n      this.detailedDisplay();\n    }\n  }\n\n  compactDisplay() {\n    this.organismIconDisplay = false;\n    this.interactorTypeDisplay = false;\n    this.IDDisplay = false;\n    this.typeOfDisplay = 'compact';\n    this.changesEmitter();\n  }\n\n  detailedDisplay() {\n    this.organismIconDisplay = true;\n    this.interactorTypeDisplay = true;\n    this.IDDisplay = true;\n    this.typeOfDisplay = 'detailed';\n    this.changesEmitter();\n  }\n\n  updateDisplay() {\n    if (this.organismIconDisplay || this.interactorTypeDisplay || this.IDDisplay) {\n      this.typeOfDisplay = 'detailed';\n    } else {\n      this.typeOfDisplay = 'compact';\n    }\n    this.changesEmitter();\n  }\n\n  changesEmitter() {\n    this.organismIconDisplayChange.emit(this.organismIconDisplay);\n    this.interactorTypeDisplayChange.emit(this.interactorTypeDisplay);\n    this.IDDisplayChange.emit(this.IDDisplay);\n  }\n\n}\n", "<div class=\"displayButton columns medium-12\" [ngClass]=\"\">\n  <button type=\"submit\" name=\"submit\" class=\"button view-button\"\n          (click)=\"setListView()\" [ngClass]=\"{'selected': !isDisplayComplexNavigatorView()}\">\n    View list\n  </button>\n  <button type=\"submit\" name=\"submit\" class=\"button view-button cnButton\"\n          (click)=\"setComplexNavigatorView()\" [ngClass]=\"{'selected': isDisplayComplexNavigatorView()}\">\n    View Complex Navigator\n    <span class=\"new-tag\" [ngClass]=\"{'new-tag-selected': displayType === isDisplayComplexNavigatorView()}\">NEW!</span>\n  </button>\n</div>\n", "/* src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.css */\n.displayButton {\n  text-align: center;\n}\n.view-button {\n  width: 225px;\n  margin-right: 5px;\n  background-color: white;\n  color: #555;\n  border: 1px dotted var(--primary);\n}\n.view-button:hover {\n  color: var(--primary);\n  background-color: rgb(234, 234, 234);\n  border: transparent;\n  border-bottom: 1px dotted var(--primary);\n}\n.selected,\n.selected:hover {\n  background-color: var(--primary);\n  color: white;\n}\n.new-tag {\n  color: red;\n  font-weight: bold;\n  font-size: x-small;\n}\n.new-tag-selected {\n  color: yellow;\n}\n.cnButton {\n  outline-offset: 0;\n  outline: rgba(0, 124, 130, 0.75) solid 1px;\n  animation: animateOutline 4s ease infinite;\n}\n.cnButton.selected {\n  animation: none;\n}\n@keyframes animateOutline {\n  0%, 50%, 100% {\n    outline-width: 6px;\n    outline-offset: 4px;\n    outline-color: rgba(0, 124, 130, 0);\n  }\n  10% {\n    outline-color: rgba(0, 124, 130, 0.75);\n  }\n}\n/*# sourceMappingURL=complex-list-display-buttons.component.css.map */\n", "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\nexport const LIST_VIEW = 'view_list';\nexport const COMPLEX_NAVIGATOR_VIEW = 'view_complex_navigator';\n\n@Component({\n  selector: 'cp-complex-list-display-buttons',\n  templateUrl: './complex-list-display-buttons.component.html',\n  styleUrls: ['./complex-list-display-buttons.component.css']\n})\nexport class ComplexListDisplayButtonsComponent {\n\n  @Input() displayType: string;\n  @Output() displayTypeChange = new EventEmitter<string>();\n\n  setListView() {\n    this.displayType = LIST_VIEW;\n    this.displayTypeChange.emit(this.displayType);\n  }\n\n  setComplexNavigatorView() {\n    this.displayType = COMPLEX_NAVIGATOR_VIEW;\n    this.displayTypeChange.emit(this.displayType);\n  }\n\n  isDisplayComplexNavigatorView(): boolean {\n    return this.displayType === COMPLEX_NAVIGATOR_VIEW;\n  }\n\n}\n", "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MarkdownModule} from 'ngx-markdown';\nimport {ComplexNavigatorComponent} from './complex-navigator.component';\nimport {TableStructureComponent} from './table-structure/table-structure.component';\nimport {TableHeaderComponent} from './table-structure/table-header/table-header.component';\nimport {TableInteractorColumnComponent} from './table-structure/table-interactor-column/table-interactor-column.component';\nimport {\n  TableInteractorNameComponent\n} from './table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component';\nimport {\n  TableInteractorExternalLinkComponent\n} from './table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component';\nimport {\n  TableInteractorStoichiometryComponent\n} from './table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component';\nimport {\n  TableMainInteractorComponent\n} from './table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component';\nimport {\n  TableSubcomponentInteractorComponent\n} from './table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component';\nimport {ComplexNavigatorButtonsComponent} from '../complex-navigator-buttons/complex-navigator-buttons.component';\nimport {RouterModule} from '@angular/router';\nimport {ComplexListDisplayButtonsComponent} from './complex-list-display-buttons/complex-list-display-buttons.component';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {ProgressSpinnerComponent} from '../../../shared/loading-indicators/progress-spinner/progress-spinner.component';\n\n@NgModule({\n  imports: [\n    RouterModule,\n    CommonModule,\n    ProgressSpinnerComponent,\n    MarkdownModule,\n    MatTooltipModule\n  ],\n  exports: [\n    ComplexNavigatorComponent,\n    ComplexListDisplayButtonsComponent\n  ],\n  declarations: [\n    ComplexNavigatorComponent,\n    TableStructureComponent,\n    TableHeaderComponent,\n    TableInteractorColumnComponent,\n    TableInteractorNameComponent,\n    TableInteractorExternalLinkComponent,\n    TableInteractorStoichiometryComponent,\n    TableMainInteractorComponent,\n    TableSubcomponentInteractorComponent,\n    ComplexNavigatorButtonsComponent,\n    ComplexListDisplayButtonsComponent\n  ]\n})\nexport class ComplexNavigatorModule {\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAA,uCAAA;;;;;;;;;;ACUO,IAAM,6BAAN,WAA+B;EAA/B;AACI;AACA;AACA;AACA;AACC,sDAA6B,OAAM;AAE7C,8CAAqB;AACrB,+CAAsB;AACtB,iDAAwB;AACxB,qCAAY;;iBAVP;0BACJ,MAAK,CAAA;wBACL,MAAK,CAAA;oCACL,MAAK,CAAA;yCACL,MAAK,CAAA;uCACL,OAAM,CAAA;IALF;AAAM,4BAAyB,WAAA;EANrC,UAAU;IACT,UAAU;IACV,UAAA;;GAED;GAEY,yBAAyB;;;ACVtC;;;ACAA,IAAAC,qCAAA;;;;;;;;;;ACWO,IAAM,2BAANC,MAAA,MAA6B;EAA7B;AACI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACC,sDAAmD,IAAI,aAAY;AAE7E,2CAA6B,CAAA;;EAE7B,cAAW;AACT,SAAK,kBAAkB,KAAK,gCAAgC,KAAK,cAAc,QAAQ;EACzF;EAEQ,sBAAsB,WAA2B;AACvD,WAAO,KAAK,cAAc,SAAS,KAAK,gBAAc,WAAW,cAAc,UAAU,UAAU;EACrG;EAEQ,iBAAiB,SAAmB,aAAiC,CAAA,GAAE;AAC7E,eAAW,aAAa,QAAQ,aAAa;AAC3C,UAAI,UAAU,mBAAmB,kBAAkB;AACjD,cAAM,aAAa,KAAK,sBAAsB,SAAS;AACvD,YAAI,YAAY;AACd,qBAAW,KAAK,GAAG,KAAK,iBAAiB,UAAU,CAAC;QACtD,OAAO;AACL,qBAAW,KAAK,SAAS;QAC3B;MACF,OAAO;AACL,mBAAW,KAAK,SAAS;MAC3B;IACF;AACA,WAAO;EACT;EAEQ,oBAAoB,UAAmB,UAAiB;AAC9D,QAAI,aAAa,UAAU;AACzB,aAAO,IAAI,IAAI,KAAK,iBAAiB,QAAQ,CAAC,EAAE;IAClD;AAEA,UAAM,CAAC,aAAa,WAAW,IAC7B,CAAC,UAAU,QAAQ,EAChB,IAAI,aAAW,IAAI,IAAI,KAAK,iBAAiB,OAAO,EAAE,IAAI,OAAK,EAAE,UAAU,CAAC,CAAC;AAElF,WAAO,CAAC,GAAG,YAAY,OAAM,CAAE,EAAE,OAAO,CAAC,GAAG,OAAO,YAAY,IAAI,EAAE,IAAI,IAAI,IAAI,GAAG,CAAC;EACvF;EAEA,gCAAgC,eAAwB;AACtD,UAAM,oBAAkD,CAAA;AACxD,eAAW,WAAW,eAAe;AACnC,iBAAW,mBAAmB,eAAe;AAE3C,YAAI,QAAQ,aAAa,gBAAgB,WAAW;AAClD,4BAAkB,KAAK,CAAC,SAAS,iBAAiB,KAAK,oBAAoB,SAAS,eAAe,CAAC,CAAC;QACvG;MACF;IACF;AACA,sBAAkB,KAAK,CAAC,GAAG,MAAM,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;AAC5C,UAAM,sBAAsB,KAAK,uCAAuC,iBAAiB;AAEzF,WAAO,MAAM,KAAK,mBAAmB;EACvC;EAEA,uCAAuC,2BAAuD;AAC5F,UAAM,sBAAsB,oBAAI,IAAG;AACnC,aAAS,IAAI,GAAG,IAAI,0BAA0B,QAAQ,KAAK;AACzD,YAAM,CAAC,UAAU,UAAU,eAAe,IAAI,0BAA0B,CAAC;AACzE,UAAI,oBAAoB,GAAG;AACzB,4BAAoB,IAAI,QAAQ;AAChC,4BAAoB,IAAI,QAAQ;AAChC,iBAAS,IAAI,IAAI,GAAG,IAAI,0BAA0B,QAAQ,KAAK;AAC7D,gBAAM,CAAC,UAAU,UAAU,kBAAkB,IAAI,0BAA0B,CAAC;AAC5E,cAAI,aAAa,YAAY,uBAAuB,GAAG;AACrD,gCAAoB,IAAI,QAAQ;UAClC;QACF;AACA,YAAI,oBAAoB,SAAS,KAAK,cAAc,SAAS,QAAQ;AAEnE,iBAAO;QACT;MACF;AACA,UAAI,oBAAoB,SAAS,KAAK,cAAc,SAAS,QAAQ;AAEnE,eAAO;MACT;IACF;AACA,WAAO;EACT;iBAzFKA;0BACJ,MAAK,CAAA;wBACL,MAAK,CAAA;+BACL,MAAK,CAAA;gCACL,MAAK,CAAA;kCACL,MAAK,CAAA;sBACL,MAAK,CAAA;oCACL,MAAK,CAAA;yCACL,MAAK,CAAA;uCACL,OAAM,CAAA;IATFA;AAAM,0BAAuBC,YAAA;EALnC,UAAU;IACT,UAAU;IACV,UAAA;;GAED;GACY,uBAAuB;;;ACXpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAC,kCAAA;;;ACAM,SAAU,mBAAmB,MAAY;AAC7C,UAAQ,MAAM;IACZ,KAAK;AACH,aAAO;IACT,KAAK;IACL,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;AACH,aAAO;EACX;AACF;AAEM,SAAU,aAAa,UAAgB;AAC3C,QAAM,gBAAgB,mBAAmB,QAAQ;AACjD,UAAQ,eAAe;IACrB,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;IACL,KAAK;AACH,aAAO;IACT,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;IACL,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;IACL,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;AACH,aAAO;IACT,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;IACL,KAAK;AACH,aAAO;EACX;AACA,SAAO;AACT;AAEA,SAAS,mBAAmB,MAAY;AACtC,UAAQ,QAAQ,KACb,MAAM,GAAG,EAAE,CAAC,EACZ,MAAM,GAAG,EAAE,MAAM,GAAG,CAAC,EACrB,KAAK,GAAG;AACb;;;;;;;;;;AC/EO,IAAM,wBAANC,MAAA,MAA0B;EAO/B,YAAoB,eAA4B;AAA5B;AANX;AACA;AACA;AACA;AACC,sDAAmD,IAAI,aAAY;AAEzD,SAAA,gBAAA;EACpB;EAEA,yBAAsB;AACpB,WAAO,KAAK,uBAAuB,UAAU,KAAK,uBAAuB;EAC3E;EAEA,aAAa,cAAoB;AAC/B,WAAO,aAAa,YAAY;EAClC;EAEA,aAAa,SAAgB;AAC3B,QAAI,KAAK,WAAW,QAAQ,SAAS,GAAG;AACtC,WAAK,cAAc,QAAQ,SAAS;IACtC,OAAO;AACL,WAAK,YAAY,OAAO;IAC1B;EACF;EAEA,YAAY,SAAgB;AAC1B,SAAK,cAAc,aAAa,OAAO;EACzC;EAEA,cAAc,WAAiB;AAC7B,SAAK,cAAc,iBAAiB,SAAS;AAC7C,SAAK,2BAA2B,KAAK,SAAS;EAChD;EAEA,WAAW,WAAiB;AAC1B,WAAO,KAAK,cAAc,WAAW,SAAS;EAChD;iBArCKA;;kBAAAA;sBACJ,MAAK,CAAA;+BACL,MAAK,CAAA;oCACL,MAAK,CAAA;yCACL,MAAK,CAAA;uCACL,OAAM,CAAA;IALFA;AAAM,uBAAoBC,YAAA;EANhC,UAAU;IACT,UAAU;IACV,UAAA;;GAED;GAEY,oBAAoB;;;ACXjwBAAwB,SACA,cACA,qBAAyC;AAE/E,QAAM,aAAa,kCAAkC,QAAQ,aAAa,cAAc,mBAAmB;AAC3G,MAAI,CAAC,CAAC,YAAY;AAChB,WAAO;MACL,YAAY,WAAW;MACvB,mBAAmB,WAAW;MAC9B,kBAAkB,qBAAqB,WAAW,iBAAiB;MACnE,4BAA4B,0BAA0B,WAAW,iBAAiB;;EAEtF;AACA,SAAO;AACT;AAIA,SAAS,kCAAkC,mBACA,cACA,qBAAyC;AAMlF,MAAI,kBAAkB;AACtB,MAAI,gBAAkC;AAGtC,aAAW,oBAAoB,mBAAmB;AAChD,UAAM,kBAAkB,iCAAiC,kBAAkB,cAAc,mBAAmB;AAC5G,QAAI,CAAC,CAAC,iBAAiB;AAErB,wBAAkB;AAElB,UAAI,CAAC,CAAC,gBAAgB,mBAAmB;AACvC,YAAI,CAAC,CAAC,eAAe;AACnB,0BAAgB;YACd,cAAc,CAAC,IAAI,gBAAgB,kBAAkB,CAAC;YACtD,cAAc,CAAC,IAAI,gBAAgB,kBAAkB,CAAC;;QAE1D,OAAO;AACL,0BAAgB;YACd,gBAAgB,kBAAkB,CAAC;YACnC,gBAAgB,kBAAkB,CAAC;;QAEvC;MACF;IACF;EACF;AAGA,MAAI,iBAAiB;AACnB,WAAO;MACL,YAAY;MACZ,mBAAmB;;EAEvB;AAEA,SAAO;AACT;AAEA,SAAS,iCAAiC,kBACA,cACA,qBAAyC;AAEjF,QAAM,yBAAyB,yBAAyB,iBAAiB,YAAY;AAErF,MAAI,iBAAiB,eAAe,cAAc;AAEhD,WAAO;MACL,YAAY;MACZ,mBAAmB;;EAEvB;AAEA,MAAI,iBAAiB,mBAAmB,kBAAkB;AAExD,UAAM,6BAA6B,oBAAoB,KAAK,gBAC1D,WAAW,WAAW,eAAe,iBAAiB,UAAU;AAElE,QAAI,CAAC,CAAC,8BAA8B,CAAC,CAAC,2BAA2B,eAAe;AAC9E,YAAM,qBAAqB,kCACzB,2BAA2B,eAAe,cAAc,mBAAmB;AAE7E,UAAI,CAAC,CAAC,oBAAoB;AAExB,YAAI,CAAC,CAAC,mBAAmB,mBAAmB;AAC1C,cAAI,CAAC,CAAC,wBAAwB;AAE5B,mBAAO;cACL,YAAY;cACZ,mBAAmB;gBACjB,uBAAuB,CAAC,IAAI,mBAAmB,kBAAkB,CAAC;gBAClE,uBAAuB,CAAC,IAAI,mBAAmB,kBAAkB,CAAC;;;UAGxE,OAAO;AAEL,mBAAO;cACL,YAAY;cACZ,mBAAmB,mBAAmB;;UAE1C;QACF,OAAO;AAEL,iBAAO;YACL,YAAY;YACZ,mBAAmB;;QAEvB;MACF;IACF;EACF;AAEA,SAAO;AACT;AAEA,SAAS,6BAA6B,eAAqB;AACzD,QAAM,UAAU;AAChB,SAAO,cAAc,MAAM,OAAO;AACpC;AAEA,SAAS,yBAAyB,eAAqB;AACrD,MAAI,CAAC,CAAC,eAAe;AACnB,UAAM,uBAAuB,6BAA6B,aAAa;AACvE,QAAI,CAAC,CAAC,sBAAsB;AAC1B,YAAM,WAAW,SAAS,qBAAqB,CAAC,GAAG,EAAE;AACrD,YAAM,WAAW,SAAS,qBAAqB,CAAC,GAAG,EAAE;AACrD,UAAI,CAAC,MAAM,QAAQ,KAAK,CAAC,MAAM,QAAQ,GAAG;AACxC,eAAO,CAAC,UAAU,QAAQ;MAC5B;IACF;EACF;AACA,SAAO;AACT;AAEA,SAAS,0BAA0B,eAA+B;AAChE,MAAI,CAAC,CAAC,eAAe;AACnB,UAAM,WAAW,cAAc,CAAC;AAChC,UAAM,WAAW,cAAc,CAAC;AAChC,QAAI,aAAa,UAAU;AACzB,aAAO,SAAS,SAAQ;IAC1B,OAAO;AACL,aAAO,GAAG,QAAQ,IAAI,QAAQ;IAChC;EACF;AACA,SAAO;AACT;AAEA,SAAS,qBAAqB,eAA+B;AAC3D,MAAI,CAAC,CAAC,eAAe;AACnB,WAAO,qCAAqC,cAAc,CAAC,IAAI,iBAAiB,cAAc,CAAC;EACjG,OAAO;AACL,WAAO;EACT;AACF;;;;;;;;;;ACtIO,IAAM,kCAANC,MAAA,MAAoC;EAezC,YAAoB,sBAA0C;AAA1C;AAdX;AACA;AACA;AACA;AACA;AACA;AAET;AACA;AACA;AAEA;AACA;AAEoB,SAAA,uBAAA;EACpB;EAEA,YAAY,SAAsB;AAChC,QAAI,CAAC,CAAC,QAAQ,aAAa,GAAG;AAC5B,WAAK,kBAAiB;AACtB,WAAK,wBAAuB;IAC9B;AACA,SAAK,oBAAmB;AACxB,SAAK,+BAA8B;EACrC;EAEQ,sBAAmB;AACzB,QAAI,CAAC,CAAC,KAAK,sBAAsB,CAAC,CAAC,KAAK,uBAAuB,KAAK,oBAAoB,SAAS,GAAG;AAClG,UAAI,KAAK,uBAAuB,QAAQ;AACtC,aAAK,0BAAyB;MAChC,WAAW,KAAK,uBAAuB,YAAY;AACjD,aAAK,8BAA6B;MACpC,OAAO;AACL,aAAK,gCAA+B;MACtC;IACF;EACF;EAEQ,oBAAiB;AACvB,SAAK,sBAAsB,CAAA;AAC3B,eAAW,cAAc,KAAK,aAAa;AACzC,YAAM,eAAe,WAAW,mBAAmB;AACnD,YAAM,wBAA4C;QAChD;QACA,QAAQ;QACR;QACA,UAAU;QACV,eAAe;QACf,eAAe,CAAA;QACf,gBAAgB;;AAElB,UAAI,cAAc;AAChB,aAAK,mBAAmB,qBAAqB,EAAE,UAAU,mBAAiB,sBAAsB,gBAAgB,aAAa;MAC/H;AACA,WAAK,oBAAoB,KAAK,qBAAqB;IACrD;EACF;EAEA,2BAA2B,GAAS;AAClC,SAAK,oBAAoB,CAAC,EAAE,WAAW,CAAC,KAAK,oBAAoB,CAAC,EAAE;AAEpE,QAAI,KAAK,oBAAoB,CAAC,EAAE,UAAU;AAIxC,eAAS,IAAI,GAAG,IAAI,KAAK,oBAAoB,QAAQ,KAAK;AACxD,YAAI,MAAM,GAAG;AACX,eAAK,oBAAoB,CAAC,EAAE,WAAW;QACzC;MACF;AAGA,UAAI,CAAC,CAAC,KAAK,oBAAoB,CAAC,EAAE,eAAe;AAC/C,cAAM,mBAA6B,KAAK,oBAAoB,CAAC,EAAE,cAAc,IAAI,eAAa,UAAU,UAAU;AAClH,iBAAS,IAAI,GAAG,IAAI,KAAK,oBAAoB,QAAQ,KAAK;AACxD,cAAI,MAAM,GAAG;AACX,iBAAK,oBAAoB,CAAC,EAAE,SAAS,CAAC,CAAC,iBAAiB,SAAS,KAAK,oBAAoB,CAAC,EAAE,WAAW,UAAU;UACpH;QACF;MACF;IACF,OAAO;AAGL,eAAS,IAAI,GAAG,IAAI,KAAK,oBAAoB,QAAQ,KAAK;AACxD,aAAK,oBAAoB,CAAC,EAAE,SAAS;MACvC;IACF;AAGA,SAAK,oBAAmB;AACxB,SAAK,+BAA8B;EAErC;EAEQ,mBAAmB,YAA8B;AAEvD,UAAM,eAAwB,KAAK,UAAU,KAAK,aAAW,QAAQ,cAAc,WAAW,WAAW,UAAU;AACnH,QAAI,CAAC,CAAC,cAAc;AAClB,aAAO,GAAG,aAAa,WAAW;IACpC,OAAO;AAEL,aAAO,KAAK,qBAAqB,qBAAqB,WAAW,WAAW,UAAU,EACnF,KAAK,IAAI,aAAW,SAAS,WAAW,CAAC;IAC9C;EACF;EAEQ,iCAA8B;AACpC,SAAK,oBAAoB,CAAA;AAEzB,eAAW,WAAW,KAAK,WAAW;AACpC,WAAK,kBAAkB,KAAK,KAAK,4BAA4B,OAAO,CAAC;IACvE;EACF;EAEQ,YAAY,QAAgB,QAAc;AAChD,QAAI,WAAW,MAAM;AACnB,aAAO;IACT;AACA,QAAI,WAAW,MAAM;AACnB,aAAO;IACT;AACA,WAAO,KAAK,IAAI,QAAQ,MAAM;EAChC;EAEQ,YAAY,QAAgB,QAAc;AAChD,QAAI,WAAW,MAAM;AACnB,aAAO;IACT;AACA,QAAI,WAAW,MAAM;AACnB,aAAO;IACT;AACA,WAAO,KAAK,IAAI,QAAQ,MAAM;EAChC;EAEQ,4BAA4B,SAAgB;AAClD,UAAM,kBAAmC;MACvC;MACA,sBAAsB;MACtB,oBAAoB;MACpB,wBAAwB;MACxB,sBAAsB;MACtB,qCAAqC;;AAKvC,aAAS,IAAI,GAAG,IAAI,KAAK,oBAAoB,QAAQ,KAAK;AACxD,UAAI,CAAC,KAAK,oBAAoB,CAAC,EAAE,QAAQ;AAEvC,YAAI,CAAC,CAAC,wBAAwB,SAAS,KAAK,oBAAoB,CAAC,EAAE,WAAW,YAAY,KAAK,mBAAmB,GAAG;AAGnH,0BAAgB,uBAAuB,KAAK,YAAY,gBAAgB,sBAAsB,CAAC;AAC/F,cAAI,gBAAgB,yBAAyB,GAAG;AAE9C,4BAAgB,sCAAsC;UACxD;AACA,0BAAgB,qBAAqB,KAAK,YAAY,gBAAgB,oBAAoB,CAAC;AAG3F,cAAI,KAAK,oBAAoB,CAAC,EAAE,gBAAgB,CAAC,CAAC,KAAK,oBAAoB,CAAC,EAAE,eAAe;AAC3F,gBAAI,KAAK,oBAAoB,CAAC,EAAE,UAAU;AAKxC,8BAAgB,yBAAyB;AACzC,8BAAgB,uBAAuB,KAAK,oBAAoB,CAAC,EAAE,cAAc,SAAS;YAC5F;UACF;QACF,WAAW,KAAK,oBAAoB,CAAC,EAAE,gBACrC,CAAC,CAAC,KAAK,oBAAoB,CAAC,EAAE,iBAC9B,KAAK,oBAAoB,CAAC,EAAE,UAAU;AAItC,mBAAS,IAAI,GAAG,IAAI,KAAK,oBAAoB,CAAC,EAAE,cAAc,QAAQ,KAAK;AACzE,gBAAI,CAAC,CAAC,wBAAwB,SAAS,KAAK,oBAAoB,CAAC,EAAE,cAAc,CAAC,EAAE,YAAY,KAAK,mBAAmB,GAAG;AAGzH,8BAAgB,uBAAuB,KAAK,YAAY,gBAAgB,sBAAsB,CAAC;AAC/F,kBAAI,gBAAgB,yBAAyB,GAAG;AAG9C,gCAAgB,sCAAsC;cACxD;AACA,8BAAgB,qBAAqB,KAAK,YAAY,gBAAgB,oBAAoB,CAAC;AAG3F,8BAAgB,yBAAyB,KAAK,YAAY,gBAAgB,wBAAwB,CAAC;AACnG,8BAAgB,uBAAuB,KAAK,YAAY,gBAAgB,sBAAsB,CAAC;YACjG;UACF;QACF;MACF;IACF;AACA,WAAO;EACT;EAEO,gCAA6B;AAClC,SAAK,oBAAoB,KAAK,CAAC,GAAG,MAAK;AACrC,UAAI,EAAE,WAAW,iBAAiB,EAAE,WAAW,cAAc;AAC3D,eAAO,EAAE,iBAAiB,EAAE;MAC9B,OAAO;AACL,cAAM,0BAA0B,KAAK,0BAA0B,IAAI,EAAE,WAAW,YAAY;AAC5F,cAAM,0BAA0B,KAAK,0BAA0B,IAAI,EAAE,WAAW,YAAY;AAC5F,YAAI,4BAA4B,yBAAyB;AACvD,iBAAO,EAAE,WAAW,aAAa,cAAc,EAAE,WAAW,YAAY;QAC1E,OAAO;AACL,iBAAO,0BAA0B;QACnC;MACF;IACF,CAAC;AACD,SAAK,0BAAyB;EAChC;EAEO,4BAAyB;AAC9B,SAAK,oBAAoB,KAAK,CAAC,GAAG,MAAK;AACrC,UAAI,EAAE,WAAW,mBAAmB,EAAE,WAAW,gBAAgB;AAC/D,eAAO,EAAE,iBAAiB,EAAE;MAC9B,OAAO;AACL,cAAM,sBAAsB,KAAK,sBAAsB,IAAI,EAAE,WAAW,cAAc;AACtF,cAAM,sBAAsB,KAAK,sBAAsB,IAAI,EAAE,WAAW,cAAc;AACtF,YAAI,wBAAwB,qBAAqB;AAC/C,iBAAO,EAAE,WAAW,eAAe,cAAc,EAAE,WAAW,cAAc;QAC9E,OAAO;AACL,iBAAO,sBAAsB;QAC/B;MACF;IACF,CAAC;AACD,SAAK,sBAAqB;EAC5B;EAEO,kCAA+B;AACpC,SAAK,oBAAoB,KAAK,CAAC,GAAG,MAChC,EAAE,iBAAiB,EAAE,cAAc;AAErC,SAAK,SAAS,CAAA;EAChB;EAEO,wBAAqB;AAC1B,UAAM,SAAS,CAAA;AACf,QAAI,SAAS;AACb,QAAI,QAAQ;AACZ,aAAS,IAAI,GAAG,IAAI,KAAK,oBAAoB,QAAQ,KAAK;AACxD,YAAM,UAAU,CAAA;AAChB,UAAI,CAAC,KAAK,oBAAoB,CAAC,EAAE,QAAQ;AACvC,kBAAU;AACV,YAAI,UAAU,MAAM;AAClB,kBAAQ;QACV;MACF;AACA,UAAI,CAAC,KAAK,oBAAoB,IAAI,CAAC,KAC7B,KAAK,oBAAoB,CAAC,EAAE,gBAAgB,KAAK,oBAAoB,CAAC,EAAE,YACzE,KAAK,oBAAoB,CAAC,EAAE,WAAW,mBAAmB,KAAK,oBAAoB,IAAI,CAAC,EAAE,WAAW,gBAAgB;AACxH,YAAI,UAAU,MAAM;AAClB,kBAAQ,KAAK,KAAK,oBAAoB,CAAC,EAAE,WAAW,gBAAgB,QAAQ,KAAK;AACjF,iBAAO,KAAK,OAAO;AACnB,kBAAQ;QACV;AACA,iBAAS;MACX;IACF;AACA,SAAK,SAAS;EAChB;EAEO,4BAAyB;AAC9B,UAAM,SAAS,CAAA;AACf,QAAI,SAAS;AACb,QAAI,QAAQ;AACZ,aAAS,IAAI,GAAG,IAAI,KAAK,oBAAoB,QAAQ,KAAK;AACxD,YAAM,UAAU,CAAA;AAChB,UAAI,CAAC,KAAK,oBAAoB,CAAC,EAAE,QAAQ;AACvC,kBAAU;AACV,YAAI,UAAU,MAAM;AAClB,kBAAQ;QACV;MACF;AACA,UAAI,CAAC,KAAK,oBAAoB,IAAI,CAAC,KAC7B,KAAK,oBAAoB,CAAC,EAAE,gBAAgB,KAAK,oBAAoB,CAAC,EAAE,YACzE,KAAK,oBAAoB,CAAC,EAAE,WAAW,iBAAiB,KAAK,oBAAoB,IAAI,CAAC,EAAE,WAAW,cAAc;AACpH,YAAI,UAAU,MAAM;AAClB,kBAAQ,KAAK,KAAK,oBAAoB,CAAC,EAAE,WAAW,cAAc,QAAQ,KAAK;AAC/E,iBAAO,KAAK,OAAO;AACnB,kBAAQ;QACV;AACA,iBAAS;MACX;IACF;AACA,SAAK,SAAS;EAChB;EAEA,yBAAsB;AACpB,WAAO,KAAK,uBAAuB,UAAU,KAAK,uBAAuB;EAC3E;EAEA,oBAAoB,GAAW,QAAc;AAC3C,QAAI,MAAM,GAAG;AACX,UAAI,WAAW,GAAG;AAChB,eAAO;MACT,OAAO;AACL,eAAO;MACT;IACF,WAAW,MAAM,SAAS,GAAG;AAC3B,aAAO;IACT;AACA,WAAO;EACT;EAEQ,0BAAuB;AAE7B,SAAK,wBAAwB,oBAAI,IAAG;AACpC,SAAK,4BAA4B,oBAAI,IAAG;AACxC,eAAW,iBAAiB,KAAK,qBAAqB;AAEpD,oBAAc,iBAAiB;AAC/B,iBAAW,WAAW,KAAK,WAAW;AACpC,cAAM,QAAQ,wBAAwB,SAAS,cAAc,WAAW,YAAY,KAAK,mBAAmB;AAC5G,YAAI,CAAC,CAAC,OAAO;AAEX,wBAAc,kBAAkB;AAEhC,eAAK,sBAAsB,IACzB,cAAc,WAAW,iBACxB,KAAK,sBAAsB,IAAI,cAAc,WAAW,cAAc,KAAK,KAAK,CAAC;AAEpF,eAAK,0BAA0B,IAC7B,cAAc,WAAW,eACxB,KAAK,0BAA0B,IAAI,cAAc,WAAW,YAAY,KAAK,KAAK,CAAC;QACxF;MACF;IACF;EACF;iBA7UKA;;kBAAAA;sBACJ,MAAK,CAAA;+BACL,MAAK,CAAA;wBACL,MAAK,CAAA;gCACL,MAAK,CAAA;kCACL,MAAK,CAAA;sBACL,MAAK,CAAA;IANDA;AAAM,iCAA8BC,YAAA;EAL1C,UAAU;IACT,UAAU;IACV,UAAA;;GAED;GACY,8BAA8B;;;ACnC3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAC,2CAAA;;;;;;;;;;ACSO,IAAM,gCAANC,MAAA,MAAkC;EAAlC;AAEI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACT;AACA;AACA;;EAEA,WAAQ;AACN,SAAK,qBAAqB,mBAAmB,KAAK,cAAc;AAChE,SAAK,yBAAyB,aAAa,KAAK,kBAAkB;EACpE;EAEA,2BAA2B,WAAkB;AAC3C,SAAK,sBAAsB;EAC7B;iBAtBKA;2BAEJ,MAAK,CAAA;2BACL,MAAK,CAAA;yBACL,MAAK,CAAA;+BACL,MAAK,CAAA;2BACL,MAAK,CAAA;gCACL,MAAK,CAAA;kCACL,MAAK,CAAA;sBACL,MAAK,CAAA;6BACL,MAAK,CAAA;IAVDA;AAAM,+BAA4BC,YAAA;EALxC,UAAU;IACT,UAAU;IACV,UAAA;;GAED;GACY,4BAA4B;;;ACTzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAC,oDAAA;;;;;;;;;;ACOO,IAAM,wCAANC,MAAA,MAA0C;EAA1C;AAEI;AACA;AACA;AACA;AACA;AAEC,+CAA6C,IAAI,aAAY;;EAEvE,WAAQ;AACN,SAAK,iBAAgB;EACvB;EAEA,mBAAgB;AACd,QAAI,KAAK,oBAAoB,KAAK,mBAAmB,kBAAkB;AACrE,WAAK,oBAAoB,KAAK,KAAK;AACnC,aAAO;IACT;AACA,SAAK,oBAAoB,KAAK,CAAC,CAAC,KAAK,cAAc;AACnD,WAAO,CAAC,CAAC,KAAK;EAChB;iBArBKA;yBAEJ,MAAK,CAAA;2BACL,MAAK,CAAA;2BACL,MAAK,CAAA;6BACL,MAAK,CAAA;sBACL,MAAK,CAAA;gCAEL,OAAM,CAAA;IARFA;AAAM,uCAAoCC,YAAA;EALhD,UAAU;IACT,UAAU;IACV,UAAA;;GAED;GACY,oCAAoC;;;ACPjD;;;ACAA,IAAAC,oDAAA;;;;;;;;;;ACOO,IAAM,yCAANC,MAAA,MAA2C;EAA3C;AACI;AACA;;iBAFJA;8BACJ,MAAK,CAAA;+BACL,MAAK,CAAA;IAFDA;AAAM,wCAAqCC,YAAA;EALjD,UAAU;IACT,UAAU;IACV,UAAA;;GAED;GACY,qCAAqC;;;ACPlD;;;ACAA,IAAAC,2CAAA;;;;;;;;;;ACSO,IAAM,gCAANC,MAAA,MAAkC;EAAlC;AACI;AACA;AACA;AAET;AACA;AACA;;EAEA,cAAW;AACT,SAAK,sBAAsB,wBACzB,KAAK,QAAQ,SAAS,KAAK,WAAW,WAAW,YAAY,KAAK,mBAAmB;AACvF,SAAK,eAAe,KAAK,oBAAoB,KAAK,SAAS,KAAK,CAAC;AACjE,SAAK,kBAAkB,KAAK,uBAAuB,KAAK,SAAS,KAAK,CAAC;EACzE;EAEA,IAAI,aAAU;AACZ,WAAO,KAAK,oBAAoB,KAAK,CAAC;EACxC;EAEO,oBAAoB,SAA0B,iBAAuB;AAC1E,QAAI,KAAK,4BAA4B,SAAS,eAAe,GAAG;AAC9D,aAAO;IACT;AACA,QAAI,KAAK,4BAA4B,SAAS,eAAe,KAAK,CAAC,KAAK,8BAA8B,SAAS,eAAe,GAAG;AAC/H,aAAO;IACT;AAEA,WAAO;EACT;EAEO,uBAAuB,SAA0B,iBAAuB;AAC7E,QAAI,KAAK,4BAA4B,SAAS,eAAe,GAAG;AAC9D,aAAO;IACT;AACA,QAAI,KAAK,8BAA8B,SAAS,eAAe,KAAK,CAAC,KAAK,4BAA4B,SAAS,eAAe,GAAG;AAC/H,aAAO;IACT;AAEA,WAAO;EACT;EAEQ,4BAA4B,SAA0B,iBAAuB;AACnF,QAAI,QAAQ,wBAAwB,QAAQ,QAAQ,sBAAsB,MAAM;AAG9E,UAAI,QAAQ,uBAAuB,mBAAmB,QAAQ,qBAAqB,iBAAiB;AAClG,eAAO;MACT;AAGA,UAAI,QAAQ,uBAAuB,mBAAmB,QAAQ,uBAAuB,iBAAiB;AAGpG,YAAI,KAAK,oBAAoB,eAAe,EAAE,gBAAgB,KAAK,oBAAoB,eAAe,EAAE,UAAU;AAChH,cAAI,QAAQ,0BAA0B,QAAQ,QAAQ,wBAAwB,MAAM;AAClF,mBAAO;UACT;QACF;MACF;IACF;AAEA,WAAO;EACT;EAEQ,8BAA8B,SAA0B,iBAAuB;AAErF,QAAI,QAAQ,wBAAwB,QAAQ,QAAQ,yBAAyB,iBAAiB;AAE5F,UAAI,CAAC,KAAK,oBAAoB,eAAe,EAAE,cAAc;AAE3D,eAAO;MACT;AAKA,UAAI,QAAQ,qCAAqC;AAC/C,eAAO;MACT;IACF;AAEA,WAAO;EACT;EAEQ,4BAA4B,SAA0B,iBAAuB;AAEnF,QAAI,QAAQ,sBAAsB,QAAQ,QAAQ,uBAAuB,iBAAiB;AAIxF,UAAI,KAAK,oBAAoB,eAAe,EAAE,gBAAgB,KAAK,oBAAoB,eAAe,EAAE,UAAU;AAChH,YAAI,QAAQ,0BAA0B,QAAQ,QAAQ,wBAAwB,MAAM;AAClF,iBAAO;QACT;MACF;AACA,aAAO;IACT;AACA,WAAO;EACT;iBAnGKA;oBACJ,MAAK,CAAA;cACL,MAAK,CAAA;gCACL,MAAK,CAAA;IAHDA;AAAM,+BAA4BC,YAAA;EALxC,UAAU;IACT,UAAU;IACV,UAAA;;GAED;GACY,4BAA4B;;;ACTzC;;;ACAA,IAAAC,mDAAA;;;;;;;;;;ACWO,IAAM,wCAANC,MAAA,MAA0C;EAA1C;AACI;AACA;AACA;AACA;AAET;AACA;AACA;;EAEA,cAAW;AACT,SAAK,sBAAsB,wBAAwB,KAAK,QAAQ,SAAS,KAAK,GAAG,YAAY,KAAK,mBAAmB;AACrH,SAAK,sBAAsB,KAAK,4BAA4B,KAAK,SAAS,KAAK,GAAG,KAAK,CAAC;AACxF,SAAK,yBAAyB,KAAK,+BAA+B,KAAK,SAAS,KAAK,GAAG,KAAK,CAAC;EAChG;EAGA,IAAI,aAAU;AACZ,WAAO,KAAK,oBAAoB,KAAK,CAAC;EACxC;EAEA,IAAI,KAAE;AACJ,WAAO,KAAK,oBAAoB,KAAK,CAAC,EAAE,cAAc,KAAK,CAAC;EAC9D;EAEO,4BAA4B,SAA0B,iBAAyB,mBAAyB;AAC7G,QAAI,KAAK,8BAA8B,SAAS,iBAAiB,iBAAiB,GAAG;AACnF,aAAO;IACT;AACA,QAAI,KAAK,8BAA8B,SAAS,iBAAiB,iBAAiB,KAChF,CAAC,KAAK,gCAAgC,SAAS,iBAAiB,iBAAiB,GAAG;AACpF,aAAO;IACT;AAEA,WAAO;EACT;EAEO,+BAA+B,SAA0B,iBAAyB,mBAAyB;AAChH,QAAI,KAAK,8BAA8B,SAAS,iBAAiB,iBAAiB,GAAG;AACnF,aAAO;IACT;AACA,QAAI,KAAK,gCAAgC,SAAS,iBAAiB,iBAAiB,KAClF,CAAC,KAAK,8BAA8B,SAAS,iBAAiB,iBAAiB,GAAG;AAClF,aAAO;IACT;AAEA,WAAO;EACT;EAEQ,8BAA8B,SAA0B,iBAAyB,mBAAyB;AAChH,QAAI,QAAQ,wBAAwB,QAAQ,QAAQ,sBAAsB,MAAM;AAE9E,UAAI,QAAQ,uBAAuB,mBAAmB,QAAQ,qBAAqB,iBAAiB;AAClG,eAAO;MACT;AAEA,UAAI,QAAQ,0BAA0B,QAAQ,QAAQ,wBAAwB,MAAM;AAElF,YAAI,QAAQ,yBAAyB,qBAAqB,QAAQ,uBAAuB,mBAAmB;AAC1G,iBAAO;QACT;AAGA,YAAI,QAAQ,uBAAuB,mBAAmB,QAAQ,uBAAuB,mBAAmB;AACtG,iBAAO;QACT;AAGA,YAAI,QAAQ,yBAAyB,qBAAqB,QAAQ,qBAAqB,iBAAiB;AACtG,iBAAO;QACT;MACF;IACF;AAEA,WAAO;EACT;EAEQ,gCAAgC,SAA0B,iBAAyB,mBAAyB;AAElH,QAAI,QAAQ,wBAAwB,QAAQ,QAAQ,yBAAyB,iBAAiB;AAC5F,UAAI,QAAQ,0BAA0B,QAAQ,QAAQ,2BAA2B,mBAAmB;AAIlG,eAAO,CAAC,QAAQ,QAAQ,YAAY,KAAK,eACvC,KAAK,oBAAoB,eAAe,EAAE,WAAW,eAAe,UAAU,UAAU;MAE5F;IACF;AAEA,WAAO;EACT;EAEQ,8BAA8B,SAA0B,iBAAyB,mBAAyB;AAChH,QAAI,QAAQ,sBAAsB,QAAQ,QAAQ,uBAAuB,iBAAiB;AAExF,UAAI,QAAQ,wBAAwB,QAAQ,QAAQ,yBAAyB,mBAAmB;AAC9F,eAAO;MACT;IACF;AACA,WAAO;EACT;iBArGKA;oBACJ,MAAK,CAAA;cACL,MAAK,CAAA;cACL,MAAK,CAAA;gCACL,MAAK,CAAA;IAJDA;AAAM,uCAAoCC,YAAA;EANhD,UAAU;IACT,UAAU;IACV,UAAA;;GAED;GAEY,oCAAoC;;;ACXjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAC,+CAAA;;;;;;;;;;ACOO,IAAM,oCAANC,OAAA,MAAsC;EAAtC;AACK,oDAA2B,IAAI,aAAY;AAC3C,qDAA4B,IAAI,aAAY;AAC5C,uDAA8B,IAAI,aAAY;AAC9C,2CAAkB,IAAI,aAAY;AAEnC;AACA;AACA;AACA;AAET;;EAEA,WAAQ;AACN,SAAK,cAAa;EACpB;EAEA,0BAA0B,eAAqB;AAC7C,SAAK,yBAAyB,KAAK,aAAa;AAChD,QAAI,KAAK,kBAAkB,YAAY;AACrC,UAAI,kBAAkB,QAAQ;AAC5B,aAAK,wBAAwB;AAC7B,aAAK,sBAAsB;MAC7B,WAAW,kBAAkB,YAAY;AACvC,aAAK,sBAAsB;AAC3B,aAAK,wBAAwB;MAC/B;AACA,WAAK,cAAa;IACpB;EACF;EAEA,qBAAkB;AAChB,SAAK,sBAAsB,CAAC,KAAK;AACjC,SAAK,cAAa;EACpB;EAEA,iBAAc;AACZ,SAAK,wBAAwB,CAAC,KAAK;AACnC,SAAK,cAAa;EACpB;EAEA,eAAY;AACV,SAAK,YAAY,CAAC,KAAK;AACvB,SAAK,cAAa;EACpB;EAEA,eAAe,MAAY;AACzB,QAAI,SAAS,WAAW;AACtB,WAAK,eAAc;IACrB,WAAW,SAAS,YAAY;AAC9B,WAAK,gBAAe;IACtB;EACF;EAEA,iBAAc;AACZ,SAAK,sBAAsB;AAC3B,SAAK,wBAAwB;AAC7B,SAAK,YAAY;AACjB,SAAK,gBAAgB;AACrB,SAAK,eAAc;EACrB;EAEA,kBAAe;AACb,SAAK,sBAAsB;AAC3B,SAAK,wBAAwB;AAC7B,SAAK,YAAY;AACjB,SAAK,gBAAgB;AACrB,SAAK,eAAc;EACrB;EAEA,gBAAa;AACX,QAAI,KAAK,uBAAuB,KAAK,yBAAyB,KAAK,WAAW;AAC5E,WAAK,gBAAgB;IACvB,OAAO;AACL,WAAK,gBAAgB;IACvB;AACA,SAAK,eAAc;EACrB;EAEA,iBAAc;AACZ,SAAK,0BAA0B,KAAK,KAAK,mBAAmB;AAC5D,SAAK,4BAA4B,KAAK,KAAK,qBAAqB;AAChE,SAAK,gBAAgB,KAAK,KAAK,SAAS;EAC1C;iBAnFKA;qCACJ,OAAM,CAAA;sCACN,OAAM,CAAA;wCACN,OAAM,CAAA;4BACN,OAAM,CAAA;+BAEN,MAAK,CAAA;gCACL,MAAK,CAAA;kCACL,MAAK,CAAA;sBACL,MAAK,CAAA;IATDA;AAAM,mCAAgCC,aAAA;EAL5C,UAAU;IACT,UAAU;IACV,UAAA;;GAED;GACY,gCAAgC;;;ACP7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,IAAAC,kDAAA;;;;;;;;;ACEO,IAAM,YAAY;AAClB,IAAM,yBAAyB;;AAO/B,IAAM,sCAANC,OAAA,MAAwC;EAAxC;AAEI;AACC,6CAAoB,IAAI,aAAY;;EAE9C,cAAW;AACT,SAAK,cAAc;AACnB,SAAK,kBAAkB,KAAK,KAAK,WAAW;EAC9C;EAEA,0BAAuB;AACrB,SAAK,cAAc;AACnB,SAAK,kBAAkB,KAAK,KAAK,WAAW;EAC9C;EAEA,gCAA6B;AAC3B,WAAO,KAAK,gBAAgB;EAC9B;iBAjBKA;wBAEJ,MAAK,CAAA;8BACL,OAAM,CAAA;IAHFA;AAAM,qCAAkCC,aAAA;EAL9C,UAAU;IACT,UAAU;IACV,UAAA;;GAED;GACY,kCAAkC;;;;;;;;;AC4CxC,IAAM,yBAAN,MAAMC,wBAAsB;;AAAtB,yBAAsBC,aAAA;EA1BlC,SAAS;IACR,SAAS;MACP;MACA;MACA;MACA;MACA;;IAEF,SAAS;MACP;MACA;;IAEF,cAAc;MACZ;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;GAEH;GACY,sBAAsB;",
  "names": ["complex_navigator_component_default", "table_structure_component_default", "_a", "__decorate", "table_header_component_default", "_a", "__decorate", "table_interactor_column_component_default", "_a", "__decorate", "table_interactor_name_component_default", "_a", "__decorate", "table_interactor_external_link_component_default", "_a", "__decorate", "table_interactor_stoichiometry_component_default", "_a", "__decorate", "table_main_interactor_component_default", "_a", "__decorate", "table_subcomponent_interactor_component_default", "_a", "__decorate", "complex_navigator_buttons_component_default", "_a", "__decorate", "complex_list_display_buttons_component_default", "_a", "__decorate", "ComplexNavigatorModule", "__decorate"]
}
