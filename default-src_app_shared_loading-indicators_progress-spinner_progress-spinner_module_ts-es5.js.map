{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAOA;AACA;AACA;AACA;AACA;AACA;AACA;MACA;AACA;AACA;AACA;;MAKA;QAA8D;UAC1DA,4DAAqB;UACrBA,uDAAgB;QACpB;QAAE;UACF,aAAmBA,2DAAoB;UACnCA,yDAAkB;UAClBA,yDAAkB;QACtB;MAAA;MACA;QAA8D;UAC1DA,4DAAqB;UACrBA,uDAAgB;QACpB;QAAE;UACF,aAAmBA,2DAAoB;UACnCA,yDAAkB;UAClBA,yDAAkB;QACtB;MAAA;MACA;QAAsD;UAClDA,4DAAqB;UACrBA,uDAAgB;QACpB;QAAE;UACF,aAAmBA,2DAAoB;UACnCA,yDAAkB;UAClBA,yDAAkB;QACtB;MAAA;MACA;QAAsD;UAClDA,4DAAqB;UACrBA,uDAAgB;QACpB;QAAE;UACF,aAAmBA,2DAAoB;UACnCA,yDAAkB;UAClBA,yDAAkB;QACtB;MAAA;MACA,uxGAAsxG;MACtxG;MACA;AACA;AACA;AACA;MACA;MACA;MACA;MACA,8BAAgC;QAChC;UAAAC;UACA;QACA;QAAA;MAAA,KACC;MACD;MACA,gDAAiDD,yDAAc;QAC/DE;QACAC;MACA,CAAC;MACD;MACA;QACA;UAAaC;QAAA;MACb;MACA;MACA;MACA;MACA;MACA,k9CAsBA;MACA;AACA;AACA;MAFA,IAGAC;QAAAC;QAAA;QACA;UAAA;UAAAL;UACAM;UACAA;UACAA;UACAA;UACAA;UACA;UACAA;UACA;UACAA;UACA;UACA;UACA;YACAC;UACA;UACAD;UACAA,8DACA;UACA;YACA;cACAA;YACA;YACA;cACAA;YACA;UACA;UAAA;QACA;QACA;QAAAE;UAAAC;UAAAC,KACA;YAAqB;UAAA;UAAAC,KACrB;YACA,iBAAyB,6EAAoBC;YAC7C;YACA;YACA;cACA;YACA;UACA;UACA;QAAA;UAAAH;UAAAC,KACA;YACA;UACA;UAAAC,KACA;YACA,oBAA4B,6EAAoBE;UAChD;UACA;QAAA;UAAAJ;UAAAC,KACA;YACA;UACA;UAAAC,KACA;YACA,wCAAgD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","names":["_angular_core__WEBPACK_IMPORTED_MODULE_0__","_classCallCheck","providedIn","factory","diameter","MatProgressSpinner","_inherits","_this","trackedDiameters","_createClass","key","get","set","size","value","newValue","element","viewBox","styleTag","styleRoot","diametersForElement","diameters","replace","_MatProgressSpinnerBase","_angular_cdk_platform__WEBPACK_IMPORTED_MODULE_3__","_angular_common__WEBPACK_IMPORTED_MODULE_4__","_angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_5__","type","selectors","hostAttrs","hostVars","hostBindings","inputs","color","mode","strokeWidth","exportAs","features","decls","vars","consts","template","directives","styles","encapsulation","changeDetection","decorators","args","selector","host","MatSpinner","_this2","MatProgressSpinnerModule","imports","_angular_material_core__WEBPACK_IMPORTED_MODULE_1__","exports","declarations","ProgressSpinnerComponent","ProgressSpinnerComponent_1","show","context","setTimeout","_takesLonger","_color","_mode","_query","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ProgressSpinnerModule","_angular_common__WEBPACK_IMPORTED_MODULE_2__","_angular_material_progress_spinner__WEBPACK_IMPORTED_MODULE_3__","_progress_spinner_component__WEBPACK_IMPORTED_MODULE_0__","__webpack_exports__"],"sources":["webpack:///node_modules/@angular/material/__ivy_ngcc__/fesm2015/progress-spinner.js","webpack:///src/app/shared/loading-indicators/progress-spinner/progress-spinner.component.ts","webpack:///src/app/shared/loading-indicators/progress-spinner/progress-spinner.module.ts","webpack:///src/app/shared/loading-indicators/progress-spinner/progress-spinner.component.html"],"sourcesContent":["import { InjectionToken, Component, ChangeDetectionStrategy, ViewEncapsulation, ElementRef, Optional, Inject, Input, NgModule } from '@angular/core';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { mixinColor, MatCommonModule } from '@angular/material/core';\nimport { coerceNumberProperty } from '@angular/cdk/coercion';\nimport { _getShadowRoot, Platform } from '@angular/cdk/platform';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Base reference size of the spinner.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/platform';\nimport * as ɵngcc2 from '@angular/common';\n\nfunction MatProgressSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n} }\nfunction MatProgressSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n} }\nfunction MatSpinner__svg_circle_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"animation-name\", \"mat-progress-spinner-stroke-rotate-\" + ctx_r0._spinnerAnimationLabel)(\"stroke-dashoffset\", ctx_r0._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r0._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r0._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r0._getCircleRadius());\n} }\nfunction MatSpinner__svg_circle_2_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵnamespaceSVG();\n    ɵngcc0.ɵɵelement(0, \"circle\", 3);\n} if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"stroke-dashoffset\", ctx_r1._getStrokeDashOffset(), \"px\")(\"stroke-dasharray\", ctx_r1._getStrokeCircumference(), \"px\")(\"stroke-width\", ctx_r1._getCircleStrokeWidth(), \"%\");\n    ɵngcc0.ɵɵattribute(\"r\", ctx_r1._getCircleRadius());\n} }\nconst _c0 = \".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\";\nconst BASE_SIZE = 100;\n/**\n * Base reference stroke width of the spinner.\n * @docs-private\n */\nconst BASE_STROKE_WIDTH = 10;\n// Boilerplate for applying mixins to MatProgressSpinner.\n/** @docs-private */\nconst _MatProgressSpinnerBase = mixinColor(class {\n    constructor(_elementRef) {\n        this._elementRef = _elementRef;\n    }\n}, 'primary');\n/** Injection token to be used to override the default options for `mat-progress-spinner`. */\nconst MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS = new InjectionToken('mat-progress-spinner-default-options', {\n    providedIn: 'root',\n    factory: MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY,\n});\n/** @docs-private */\nfunction MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY() {\n    return { diameter: BASE_SIZE };\n}\n// .0001 percentage difference is necessary in order to avoid unwanted animation frames\n// for example because the animation duration is 4 seconds, .1% accounts to 4ms\n// which are enough to see the flicker described in\n// https://github.com/angular/components/issues/8984\nconst INDETERMINATE_ANIMATION_TEMPLATE = `\n @keyframes mat-progress-spinner-stroke-rotate-DIAMETER {\n    0%      { stroke-dashoffset: START_VALUE;  transform: rotate(0); }\n    12.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(0); }\n    12.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(72.5deg); }\n    25%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(72.5deg); }\n\n    25.0001%   { stroke-dashoffset: START_VALUE;  transform: rotate(270deg); }\n    37.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(270deg); }\n    37.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(161.5deg); }\n    50%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(161.5deg); }\n\n    50.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(180deg); }\n    62.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(180deg); }\n    62.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(251.5deg); }\n    75%     { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(251.5deg); }\n\n    75.0001%  { stroke-dashoffset: START_VALUE;  transform: rotate(90deg); }\n    87.5%   { stroke-dashoffset: END_VALUE;    transform: rotate(90deg); }\n    87.5001%  { stroke-dashoffset: END_VALUE;    transform: rotateX(180deg) rotate(341.5deg); }\n    100%    { stroke-dashoffset: START_VALUE;  transform: rotateX(180deg) rotate(341.5deg); }\n  }\n`;\n/**\n * `<mat-progress-spinner>` component.\n */\nclass MatProgressSpinner extends _MatProgressSpinnerBase {\n    constructor(elementRef, platform, _document, animationMode, defaults) {\n        super(elementRef);\n        this._document = _document;\n        this._diameter = BASE_SIZE;\n        this._value = 0;\n        this._fallbackAnimation = false;\n        /** Mode of the progress circle */\n        this.mode = 'determinate';\n        const trackedDiameters = MatProgressSpinner._diameters;\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // The base size is already inserted via the component's structural styles. We still\n        // need to track it so we don't end up adding the same styles again.\n        if (!trackedDiameters.has(_document.head)) {\n            trackedDiameters.set(_document.head, new Set([BASE_SIZE]));\n        }\n        this._fallbackAnimation = platform.EDGE || platform.TRIDENT;\n        this._noopAnimations = animationMode === 'NoopAnimations' &&\n            (!!defaults && !defaults._forceAnimations);\n        if (defaults) {\n            if (defaults.diameter) {\n                this.diameter = defaults.diameter;\n            }\n            if (defaults.strokeWidth) {\n                this.strokeWidth = defaults.strokeWidth;\n            }\n        }\n    }\n    /** The diameter of the progress spinner (will set width and height of svg). */\n    get diameter() { return this._diameter; }\n    set diameter(size) {\n        this._diameter = coerceNumberProperty(size);\n        this._spinnerAnimationLabel = this._getSpinnerAnimationLabel();\n        // If this is set before `ngOnInit`, the style root may not have been resolved yet.\n        if (!this._fallbackAnimation && this._styleRoot) {\n            this._attachStyleNode();\n        }\n    }\n    /** Stroke width of the progress spinner. */\n    get strokeWidth() {\n        return this._strokeWidth || this.diameter / 10;\n    }\n    set strokeWidth(value) {\n        this._strokeWidth = coerceNumberProperty(value);\n    }\n    /** Value of the progress circle. */\n    get value() {\n        return this.mode === 'determinate' ? this._value : 0;\n    }\n    set value(newValue) {\n        this._value = Math.max(0, Math.min(100, coerceNumberProperty(newValue)));\n    }\n    ngOnInit() {\n        const element = this._elementRef.nativeElement;\n        // Note that we need to look up the root node in ngOnInit, rather than the constructor, because\n        // Angular seems to create the element outside the shadow root and then moves it inside, if the\n        // node is inside an `ngIf` and a ShadowDom-encapsulated component.\n        this._styleRoot = _getShadowRoot(element) || this._document.head;\n        this._attachStyleNode();\n        // On IE and Edge, we can't animate the `stroke-dashoffset`\n        // reliably so we fall back to a non-spec animation.\n        const animationClass = `mat-progress-spinner-indeterminate${this._fallbackAnimation ? '-fallback' : ''}-animation`;\n        element.classList.add(animationClass);\n    }\n    /** The radius of the spinner, adjusted for stroke width. */\n    _getCircleRadius() {\n        return (this.diameter - BASE_STROKE_WIDTH) / 2;\n    }\n    /** The view box of the spinner's svg element. */\n    _getViewBox() {\n        const viewBox = this._getCircleRadius() * 2 + this.strokeWidth;\n        return `0 0 ${viewBox} ${viewBox}`;\n    }\n    /** The stroke circumference of the svg circle. */\n    _getStrokeCircumference() {\n        return 2 * Math.PI * this._getCircleRadius();\n    }\n    /** The dash offset of the svg circle. */\n    _getStrokeDashOffset() {\n        if (this.mode === 'determinate') {\n            return this._getStrokeCircumference() * (100 - this._value) / 100;\n        }\n        // In fallback mode set the circle to 80% and rotate it with CSS.\n        if (this._fallbackAnimation && this.mode === 'indeterminate') {\n            return this._getStrokeCircumference() * 0.2;\n        }\n        return null;\n    }\n    /** Stroke width of the circle in percent. */\n    _getCircleStrokeWidth() {\n        return this.strokeWidth / this.diameter * 100;\n    }\n    /** Dynamically generates a style tag containing the correct animation for this diameter. */\n    _attachStyleNode() {\n        const styleRoot = this._styleRoot;\n        const currentDiameter = this._diameter;\n        const diameters = MatProgressSpinner._diameters;\n        let diametersForElement = diameters.get(styleRoot);\n        if (!diametersForElement || !diametersForElement.has(currentDiameter)) {\n            const styleTag = this._document.createElement('style');\n            styleTag.setAttribute('mat-spinner-animation', this._spinnerAnimationLabel);\n            styleTag.textContent = this._getAnimationText();\n            styleRoot.appendChild(styleTag);\n            if (!diametersForElement) {\n                diametersForElement = new Set();\n                diameters.set(styleRoot, diametersForElement);\n            }\n            diametersForElement.add(currentDiameter);\n        }\n    }\n    /** Generates animation styles adjusted for the spinner's diameter. */\n    _getAnimationText() {\n        const strokeCircumference = this._getStrokeCircumference();\n        return INDETERMINATE_ANIMATION_TEMPLATE\n            // Animation should begin at 5% and end at 80%\n            .replace(/START_VALUE/g, `${0.95 * strokeCircumference}`)\n            .replace(/END_VALUE/g, `${0.2 * strokeCircumference}`)\n            .replace(/DIAMETER/g, `${this._spinnerAnimationLabel}`);\n    }\n    /** Returns the circle diameter formatted for use with the animation-name CSS property. */\n    _getSpinnerAnimationLabel() {\n        // The string of a float point number will include a period ‘.’ character,\n        // which is not valid for a CSS animation-name.\n        return this.diameter.toString().replace('.', '_');\n    }\n}\nMatProgressSpinner.ɵfac = function MatProgressSpinner_Factory(t) { return new (t || MatProgressSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatProgressSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatProgressSpinner, selectors: [[\"mat-progress-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"tabindex\", \"-1\", 1, \"mat-progress-spinner\"], hostVars: 10, hostBindings: function MatProgressSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-valuemin\", ctx.mode === \"determinate\" ? 0 : null)(\"aria-valuemax\", ctx.mode === \"determinate\" ? 100 : null)(\"aria-valuenow\", ctx.mode === \"determinate\" ? ctx.value : null)(\"mode\", ctx.mode);\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\", mode: \"mode\", diameter: \"diameter\", strokeWidth: \"strokeWidth\", value: \"value\" }, exportAs: [\"matProgressSpinner\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatProgressSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatProgressSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatProgressSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\n/**\n * Tracks diameters of existing instances to de-dupe generated styles (default d = 100).\n * We need to keep track of which elements the diameters were attached to, because for\n * elements in the Shadow DOM the style tags are attached to the shadow root, rather\n * than the document head.\n */\nMatProgressSpinner._diameters = new WeakMap();\nMatProgressSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\nMatProgressSpinner.propDecorators = {\n    diameter: [{ type: Input }],\n    strokeWidth: [{ type: Input }],\n    mode: [{ type: Input }],\n    value: [{ type: Input }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-progress-spinner',\n                exportAs: 'matProgressSpinner',\n                host: {\n                    'role': 'progressbar',\n                    'class': 'mat-progress-spinner',\n                    // set tab index to -1 so screen readers will read the aria-label\n                    // Note: there is a known issue with JAWS that does not read progressbar aria labels on FireFox\n                    'tabindex': '-1',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter',\n                    '[attr.aria-valuemin]': 'mode === \"determinate\" ? 0 : null',\n                    '[attr.aria-valuemax]': 'mode === \"determinate\" ? 100 : null',\n                    '[attr.aria-valuenow]': 'mode === \"determinate\" ? value : null',\n                    '[attr.mode]': 'mode'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, { mode: [{\n            type: Input\n        }], diameter: [{\n            type: Input\n        }], strokeWidth: [{\n            type: Input\n        }], value: [{\n            type: Input\n        }] }); })();\n/**\n * `<mat-spinner>` component.\n *\n * This is a component definition to be used as a convenience reference to create an\n * indeterminate `<mat-progress-spinner>` instance.\n */\nclass MatSpinner extends MatProgressSpinner {\n    constructor(elementRef, platform, document, animationMode, defaults) {\n        super(elementRef, platform, document, animationMode, defaults);\n        this.mode = 'indeterminate';\n    }\n}\nMatSpinner.ɵfac = function MatSpinner_Factory(t) { return new (t || MatSpinner)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Platform), ɵngcc0.ɵɵdirectiveInject(DOCUMENT, 8), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS)); };\nMatSpinner.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: MatSpinner, selectors: [[\"mat-spinner\"]], hostAttrs: [\"role\", \"progressbar\", \"mode\", \"indeterminate\", 1, \"mat-spinner\", \"mat-progress-spinner\"], hostVars: 6, hostBindings: function MatSpinner_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵclassProp(\"_mat-animation-noopable\", ctx._noopAnimations);\n    } }, inputs: { color: \"color\" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 8, consts: [[\"preserveAspectRatio\", \"xMidYMid meet\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 3, \"ngSwitch\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"animation-name\", \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\", 3, \"stroke-dashoffset\", \"stroke-dasharray\", \"stroke-width\", 4, \"ngSwitchCase\"], [\"cx\", \"50%\", \"cy\", \"50%\"]], template: function MatSpinner_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵnamespaceSVG();\n        ɵngcc0.ɵɵelementStart(0, \"svg\", 0);\n        ɵngcc0.ɵɵtemplate(1, MatSpinner__svg_circle_1_Template, 1, 9, \"circle\", 1);\n        ɵngcc0.ɵɵtemplate(2, MatSpinner__svg_circle_2_Template, 1, 7, \"circle\", 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵstyleProp(\"width\", ctx.diameter, \"px\")(\"height\", ctx.diameter, \"px\");\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.mode === \"indeterminate\");\n        ɵngcc0.ɵɵattribute(\"viewBox\", ctx._getViewBox());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", false);\n    } }, directives: [ɵngcc2.NgSwitch, ɵngcc2.NgSwitchCase], styles: [_c0], encapsulation: 2, changeDetection: 0 });\nMatSpinner.ctorParameters = () => [\n    { type: ElementRef },\n    { type: Platform },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [DOCUMENT,] }] },\n    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS,] }] }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatSpinner, [{\n        type: Component,\n        args: [{\n                selector: 'mat-spinner',\n                host: {\n                    'role': 'progressbar',\n                    'mode': 'indeterminate',\n                    'class': 'mat-spinner mat-progress-spinner',\n                    '[class._mat-animation-noopable]': `_noopAnimations`,\n                    '[style.width.px]': 'diameter',\n                    '[style.height.px]': 'diameter'\n                },\n                inputs: ['color'],\n                template: \"<!--\\n  preserveAspectRatio of xMidYMid meet as the center of the viewport is the circle's\\n  center. The center of the circle will remain at the center of the mat-progress-spinner\\n  element containing the SVG. `focusable=\\\"false\\\"` prevents IE from allowing the user to\\n  tab into the SVG element.\\n-->\\n<!--\\n  All children need to be hidden for screen readers in order to support ChromeVox.\\n  More context in the issue: https://github.com/angular/components/issues/22165.\\n-->\\n<svg\\n  [style.width.px]=\\\"diameter\\\"\\n  [style.height.px]=\\\"diameter\\\"\\n  [attr.viewBox]=\\\"_getViewBox()\\\"\\n  preserveAspectRatio=\\\"xMidYMid meet\\\"\\n  focusable=\\\"false\\\"\\n  [ngSwitch]=\\\"mode === 'indeterminate'\\\"\\n  aria-hidden=\\\"true\\\">\\n\\n  <!--\\n    Technically we can reuse the same `circle` element, however Safari has an issue that breaks\\n    the SVG rendering in determinate mode, after switching between indeterminate and determinate.\\n    Using a different element avoids the issue. An alternative to this is adding `display: none`\\n    for a split second and then removing it when switching between modes, but it's hard to know\\n    for how long to hide the element and it can cause the UI to blink.\\n  -->\\n  <circle\\n    *ngSwitchCase=\\\"true\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.animation-name]=\\\"'mat-progress-spinner-stroke-rotate-' + _spinnerAnimationLabel\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n\\n  <circle\\n    *ngSwitchCase=\\\"false\\\"\\n    cx=\\\"50%\\\"\\n    cy=\\\"50%\\\"\\n    [attr.r]=\\\"_getCircleRadius()\\\"\\n    [style.stroke-dashoffset.px]=\\\"_getStrokeDashOffset()\\\"\\n    [style.stroke-dasharray.px]=\\\"_getStrokeCircumference()\\\"\\n    [style.stroke-width.%]=\\\"_getCircleStrokeWidth()\\\"></circle>\\n</svg>\\n\",\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                styles: [\".mat-progress-spinner{display:block;position:relative;overflow:hidden}.mat-progress-spinner svg{position:absolute;transform:rotate(-90deg);top:0;left:0;transform-origin:center;overflow:visible}.mat-progress-spinner circle{fill:transparent;transform-origin:center;transition:stroke-dashoffset 225ms linear}._mat-animation-noopable.mat-progress-spinner circle{transition:none;animation:none}.cdk-high-contrast-active .mat-progress-spinner circle{stroke:currentColor;stroke:CanvasText}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{animation:mat-progress-spinner-linear-rotate 2000ms linear infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition-property:stroke;animation-duration:4000ms;animation-timing-function:cubic-bezier(0.35, 0, 0.25, 1);animation-iteration-count:infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-animation[mode=indeterminate] circle{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{animation:mat-progress-spinner-stroke-rotate-fallback 10000ms cubic-bezier(0.87, 0.03, 0.33, 1) infinite}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] svg{transition:none;animation:none}.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition-property:stroke}._mat-animation-noopable.mat-progress-spinner.mat-progress-spinner-indeterminate-fallback-animation[mode=indeterminate] circle{transition:none;animation:none}@keyframes mat-progress-spinner-linear-rotate{0%{transform:rotate(0deg)}100%{transform:rotate(360deg)}}@keyframes mat-progress-spinner-stroke-rotate-100{0%{stroke-dashoffset:268.606171575px;transform:rotate(0)}12.5%{stroke-dashoffset:56.5486677px;transform:rotate(0)}12.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(72.5deg)}25%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(72.5deg)}25.0001%{stroke-dashoffset:268.606171575px;transform:rotate(270deg)}37.5%{stroke-dashoffset:56.5486677px;transform:rotate(270deg)}37.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(161.5deg)}50%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(161.5deg)}50.0001%{stroke-dashoffset:268.606171575px;transform:rotate(180deg)}62.5%{stroke-dashoffset:56.5486677px;transform:rotate(180deg)}62.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(251.5deg)}75%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(251.5deg)}75.0001%{stroke-dashoffset:268.606171575px;transform:rotate(90deg)}87.5%{stroke-dashoffset:56.5486677px;transform:rotate(90deg)}87.5001%{stroke-dashoffset:56.5486677px;transform:rotateX(180deg) rotate(341.5deg)}100%{stroke-dashoffset:268.606171575px;transform:rotateX(180deg) rotate(341.5deg)}}@keyframes mat-progress-spinner-stroke-rotate-fallback{0%{transform:rotate(0deg)}25%{transform:rotate(1170deg)}50%{transform:rotate(2340deg)}75%{transform:rotate(3510deg)}100%{transform:rotate(4680deg)}}\\n\"]\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.Platform }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatProgressSpinnerModule {\n}\nMatProgressSpinnerModule.ɵfac = function MatProgressSpinnerModule_Factory(t) { return new (t || MatProgressSpinnerModule)(); };\nMatProgressSpinnerModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: MatProgressSpinnerModule });\nMatProgressSpinnerModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[MatCommonModule, CommonModule], MatCommonModule] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(MatProgressSpinnerModule, [{\n        type: NgModule,\n        args: [{\n                imports: [MatCommonModule, CommonModule],\n                exports: [\n                    MatProgressSpinner,\n                    MatSpinner,\n                    MatCommonModule\n                ],\n                declarations: [\n                    MatProgressSpinner,\n                    MatSpinner\n                ]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatProgressSpinnerModule, { declarations: function () { return [MatProgressSpinner, MatSpinner]; }, imports: function () { return [MatCommonModule, CommonModule]; }, exports: function () { return [MatProgressSpinner, MatSpinner, MatCommonModule]; } }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS, MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS_FACTORY, MatProgressSpinner, MatProgressSpinnerModule, MatSpinner };\n\n","import {Component, Input, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'cp-progress-spinner',\n  templateUrl: './progress-spinner.component.html',\n  styleUrls: ['./progress-spinner.component.css']\n})\nexport class ProgressSpinnerComponent implements OnInit {\n  private static show: boolean;\n  private _color = 'primary';\n  private _mode = 'indeterminate';\n  private _query: string;\n  private _takesLonger: boolean;\n\n  public static display(): void {\n    ProgressSpinnerComponent.show = true;\n  }\n\n  public static hide(): void {\n    setTimeout(function () {\n      ProgressSpinnerComponent.show = false;\n    }, 1000);\n  }\n\n  constructor() {\n    ProgressSpinnerComponent.show = false;\n  }\n\n  ngOnInit() {\n    const context = this;\n    setTimeout(function () {\n      context._takesLonger = true;\n    }, 5000);\n  }\n\n  get isDisplayed(): boolean {\n    return ProgressSpinnerComponent.show;\n  }\n\n  get color(): string {\n    return this._color;\n  }\n\n  set color(value: string) {\n    this._color = value;\n  }\n\n  get mode(): string {\n    return this._mode;\n  }\n\n  set mode(value: string) {\n    this._mode = value;\n  }\n\n\n  get query(): string {\n    return this._query;\n  }\n\n  @Input()\n  set query(value: string) {\n    this._query = value;\n  }\n\n  get takesLonger(): boolean {\n    return this._takesLonger;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport {ProgressSpinnerComponent} from './progress-spinner.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatProgressSpinnerModule\n  ],\n  declarations: [\n    ProgressSpinnerComponent\n  ],\n  exports: [\n    ProgressSpinnerComponent\n  ]\n})\nexport class ProgressSpinnerModule {\n}\n","export default \"<div class=\\\"small-5 small-centered columns\\\">\\n  <mat-progress-spinner style=\\\"margin:0 auto;\\\"\\n                       [attr.color]=\\\"color\\\"\\n                       [mode]=\\\"mode\\\"\\n                       [value]=\\\"0\\\">\\n  </mat-progress-spinner>\\n  <div style=\\\"text-align: center\\\">\\n    <h4>Loading {{query}}</h4>\\n    <p *ngIf=\\\"takesLonger\\\">This takes longer than usual. Bear with us!</p>\\n  </div>\\n</div>\\n\";"]}