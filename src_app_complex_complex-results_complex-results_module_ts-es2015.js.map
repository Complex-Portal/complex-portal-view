{"version":3,"file":"src_app_complex_complex-results_complex-results_module_ts-es2015.js","mappings":"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","sources":["./src/app/complex/complex-results/complex-filter/complex-filter.component.ts","./src/app/complex/complex-results/complex-list/complex-list.component.ts","./src/app/complex/complex-results/complex-navigator/complex-navigator-rating/complex-navigator-rating.component.ts","./src/app/complex/complex-results/complex-paginator/complex-paginator.component.ts","./src/app/complex/complex-results/complex-results.component.ts","./src/app/complex/complex-results/complex-results.module.ts","./src/app/complex/complex-results/complex-filter/complex-filter.component.html","./src/app/complex/complex-results/complex-list/complex-list.component.html","./src/app/complex/complex-results/complex-navigator/complex-navigator-rating/complex-navigator-rating.component.html","./src/app/complex/complex-results/complex-paginator/complex-paginator.component.html","./src/app/complex/complex-results/complex-results.component.html"],"sourcesContent":["import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Facets} from '../../shared/model/complex-results/facets.model';\nimport {AnalyticsService} from '../../../shared/google-analytics/service/analytics.service';\nimport {interactorTypeIcon, organismIcon} from '../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-complex-filter',\n  templateUrl: './complex-filter.component.html',\n  styleUrls: ['./complex-filter.component.css']\n})\nexport class ComplexFilterComponent implements OnInit {\n\n  @Input() facets: Facets;\n  @Input() speciesFilter: string[];\n  @Input() bioRoleFilter: string[];\n  @Input() interactorTypeFilter: string[];\n  @Input() predictedFilter: string[];\n  @Input() confidenceScoreFilter: string[];\n\n  @Output() onSpeciesFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onBiologicalRoleFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onInteractorTypeFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onPredictedFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onConfidenceScoreFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onResetAllFilters: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private googleAnalyticsService: AnalyticsService) {\n  }\n\n  ngOnInit() {\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeSpeciesFilter(filter: string, status: boolean) {\n    if (status) {\n      this.speciesFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.speciesFilter.splice(this.speciesFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onSpeciesFilterChanged.emit(this.speciesFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeBiologicalRoleFilter(filter: string, status: boolean) {\n    if (status) {\n      this.bioRoleFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.bioRoleFilter.splice(this.bioRoleFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onBiologicalRoleFilterChanged.emit(this.bioRoleFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeInteractorTypeFilter(filter: string, status: boolean) {\n    if (status) {\n      this.interactorTypeFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.interactorTypeFilter.splice(this.interactorTypeFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onInteractorTypeFilterChanged.emit(this.interactorTypeFilter);\n  }\n\n  public changePredictedFilter(filter: string, status: boolean) {\n    if (status) {\n      this.predictedFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.predictedFilter.splice(this.predictedFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onPredictedFilterChanged.emit(this.predictedFilter);\n  }\n\n  public changeConfidenceScoreFilter(filter: string, status: boolean) {\n    if (status) {\n      this.confidenceScoreFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.confidenceScoreFilter.splice(this.confidenceScoreFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onConfidenceScoreFilterChanged.emit(this.confidenceScoreFilter);\n  }\n\n  /**\n   * Emit event to parent component to remove all filters\n   */\n  public resetAllFilters() {\n    this.onResetAllFilters.emit(true);\n  }\n\n  /**\n   *\n   * @returns {boolean} true is any filter array contains an filter\n   */\n  public anyFiltersSelected() {\n    return this.speciesFilter.length !== 0 || this.bioRoleFilter.length !== 0 || this.interactorTypeFilter.length !== 0 ||\n      this.predictedFilter.length !== 0 || this.confidenceScoreFilter.length !== 0;\n  }\n\n  /**\n   *\n   * @param element filter to check if already selected\n   * @param filter selected filters\n   * @returns {boolean} true if filter is already in selected filters\n   */\n  public isSelected(element: string, filter: string[]): boolean {\n    return filter.indexOf(element) !== -1;\n  }\n\n  public facetTypeIcon(facet: string): string {\n    return interactorTypeIcon(facet);\n  }\n\n  public facetOrganismIcon(facet): string {\n    return organismIcon(facet);\n  }\n\n  formatPredictedFacetValue(facetName: string): string {\n    if (facetName === 'true') {\n      return 'Predicted complex';\n    } else {\n      return 'Curated complex';\n    }\n  }\n\n  public getStars(amount: string): ('empty' | 'full')[] {\n    return this._getStars(Number(amount));\n  }\n\n  private _getStars(amount: number): ('empty' | 'full')[] {\n    const stars: ('empty' | 'full')[] = ['empty', 'empty', 'empty', 'empty', 'empty'];\n    stars.fill('full');\n    if (amount < stars.length) {\n      stars.fill('empty', amount);\n    }\n    return stars;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {BasketService} from '../../../shared/basket/service/basket.service';\nimport {Element} from '../../shared/model/complex-results/element.model';\n\n@Component({\n  selector: 'cp-complex-list',\n  templateUrl: './complex-list.component.html',\n  styleUrls: ['./complex-list.component.css']\n})\nexport class ComplexListComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n\n  constructor(private basketService: BasketService) {\n  }\n\n  ngOnInit() {\n  }\n\n\n  saveComplex(complex: Element) {\n    this.basketService.saveInBasket(complex);\n  }\n\n  removeComplexFromBasket(complex: Element) {\n    this.basketService.deleteFromBasket(complex.complexAC);\n  }\n\n  isInBasket(complex: Element): boolean {\n    return this.basketService.isInBasket(complex.complexAC);\n  }\n\n  toggleBasket(complex: Element) {\n    if (this.isInBasket(complex)) {\n      this.removeComplexFromBasket(complex);\n    } else {\n      this.saveComplex(complex);\n    }\n  }\n}\n","import {Component, OnInit} from '@angular/core';\nimport {AnalyticsService} from '../../../../shared/google-analytics/service/analytics.service';\n\nconst COMPLEX_NAVIGATOR_RATING = 'already_rated';\n\n@Component({\n  selector: 'cp-complex-navigator-rating',\n  templateUrl: './complex-navigator-rating.component.html',\n  styleUrls: ['./complex-navigator-rating.component.css']\n})\nexport class ComplexNavigatorRatingComponent implements OnInit {\n  selectedRating: number;\n  hidden = false;\n\n  constructor(private analyticsService: AnalyticsService) {\n  }\n\n  ngOnInit(): void {\n    this.hidden = localStorage.getItem(COMPLEX_NAVIGATOR_RATING) === 'true' || false;\n  }\n\n  selectRating(rating: number) {\n    this.selectedRating = rating;\n    this.analyticsService.rateComplexNavigator(this.selectedRating);\n    localStorage.setItem(COMPLEX_NAVIGATOR_RATING, 'true');\n    setTimeout(() => this.hidden = true, 2000);\n  }\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-paginator',\n  templateUrl: './complex-paginator.component.html',\n  styleUrls: ['./complex-paginator.component.css']\n})\nexport class ComplexPaginatorComponent implements OnInit, OnChanges {\n  private _lastPageIndex: number;\n  private _currentPageIndex: number;\n  private _pagination: any;\n\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter<number>();\n\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.updatePaginatior();\n  }\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.updatePaginatior();\n  }\n\n  public updatePaginatior(): void {\n    let start: number;\n    let end: number;\n    this.pagination = [];\n    if (this._lastPageIndex < 5) {\n      start = 1;\n      end = this._lastPageIndex;\n\n    } else {\n      if (this._currentPageIndex === 1 || this._currentPageIndex === 2) {\n        start = 1;\n        end = 5;\n      } else if (this._currentPageIndex === this._lastPageIndex || this._currentPageIndex === this._lastPageIndex - 1) {\n        start = this._lastPageIndex - 4;\n        end = this._lastPageIndex;\n      } else {\n        start = this._currentPageIndex - 2;\n        end = this._currentPageIndex + 2;\n      }\n    }\n    while (start <= end) {\n      if (start === this._currentPageIndex) {\n        this._pagination.push([[this._currentPageIndex], [true]]);\n      } else {\n        this._pagination.push([[start], [false]]);\n      }\n      start++;\n    }\n  }\n\n  public getFirstPage(): void {\n    this.onPageChange.emit(1);\n  }\n\n  public getLastPage(): void {\n    this.onPageChange.emit(this.lastPageIndex);\n  }\n\n  public getPage(pageIndex: number) {\n    this.onPageChange.emit(pageIndex);\n  }\n\n  public getPreviousPage(): void {\n    this.onPageChange.emit(this.currentPageIndex - 1);\n  }\n\n  public getNextPage(): void {\n    this.onPageChange.emit(this.currentPageIndex + 1);\n  }\n\n  get lastPageIndex() {\n    return this._lastPageIndex;\n  }\n\n  @Input()\n  set lastPageIndex(value) {\n    this._lastPageIndex = value;\n  }\n\n  get currentPageIndex() {\n    return this._currentPageIndex;\n  }\n\n  @Input()\n  set currentPageIndex(value) {\n    this._currentPageIndex = value;\n  }\n\n  get pagination() {\n    return this._pagination;\n  }\n\n  set pagination(value) {\n    this._pagination = value;\n  }\n}\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, NavigationExtras, Params, Router} from '@angular/router';\nimport {ComplexSearchResult} from '../shared/model/complex-results/complex-search.model';\nimport {ComplexPortalService} from '../shared/service/complex-portal.service';\nimport {ProgressBarComponent} from '../../shared/loading-indicators/progress-bar/progress-bar.component';\nimport {Title} from '@angular/platform-browser';\nimport {AnalyticsService} from '../../shared/google-analytics/service/analytics.service';\nimport {Interactor} from '../shared/model/complex-results/interactor.model';\nimport {NotificationService} from '../../shared/notification/service/notification.service';\nimport {\n  COMPLEX_NAVIGATOR_VIEW,\n  LIST_VIEW\n} from './complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component';\n\n@Component({\n  selector: 'cp-complex-results',\n  templateUrl: './complex-results.component.html',\n  styleUrls: ['./complex-results.component.css'],\n})\nexport class ComplexResultsComponent implements OnInit, AfterViewInit {\n  query: string;\n  complexSearch: ComplexSearchResult;\n\n  allInteractorsInComplexSearch: Interactor[] = [];\n  DisplayType: string;\n\n  filters = {\n    species: [],\n    bioRole: [],\n    interactorType: [],\n    predicted: [],\n    confidenceScore: [],\n  };\n\n  private _toast;\n  private _listPageSize = 15; // This is where we set the size of the pages for list view\n  private _navigatorPageSize = 20; // This is where we set the size of the pages for navigator view\n  private _listCurrentPage: number;\n  private _navigatorCurrentPage: number;\n  private _listLastPageIndex;\n  private _navigatorLastPageIndex;\n\n  constructor(private route: ActivatedRoute, private router: Router,\n              private complexPortalService: ComplexPortalService, private titleService: Title,\n              private googleAnalyticsService: AnalyticsService, private notificationService: NotificationService) {\n  }\n\n  ngOnInit() {\n    this.titleService.setTitle('Complex Portal - Results');\n    this.allInteractorsInComplexSearch = [];\n    this.route.fragment.subscribe(fragment => {\n      if (fragment === COMPLEX_NAVIGATOR_VIEW) {\n        this.DisplayType = COMPLEX_NAVIGATOR_VIEW;\n      } else if (fragment === LIST_VIEW) {\n        this.DisplayType = LIST_VIEW;\n      }\n      this.route\n        .queryParams\n        .subscribe(queryParams => {\n          this.query = queryParams['query'];\n          Object.keys(this.filters).forEach(filter => this.filters[filter] = this.decodeURL(filter, queryParams));\n          this.currentPageIndex = queryParams['page'] ? Number(queryParams['page']) : 1;\n          // TODO This is out for now, but CP-84 (JIRA )should fix that!!\n          // this.pageSize = queryParams['size'] ? Number(queryParams['size']) : 10;\n          this.requestComplexResults();\n          document.body.scrollTop = 0;\n        });\n    });\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n\n  private requestComplexResults() {\n    this.complexPortalService.findComplex(this.query, this.filters.species, this.filters.bioRole,\n      this.filters.interactorType, this.filters.predicted, this.filters.confidenceScore,\n      this.currentPageIndex, this.pageSize).subscribe(complexSearch => {\n      this.complexSearch = complexSearch;\n      this.processSearchResults();\n      this.allInteractorsInComplexSearch = [];\n      if (this.complexSearch.totalNumberOfResults !== 0) {\n        this.lastPageIndex = Math.ceil(complexSearch.totalNumberOfResults / this.pageSize);\n        for (let i = 0; i < complexSearch.elements.length; i++) {\n          for (const component of complexSearch.elements[i].interactors) {\n            if (!this.allInteractorsInComplexSearch.some(interactor => interactor.identifier === component.identifier)) {\n              this.allInteractorsInComplexSearch.push(component);\n            }\n          }\n        }\n      }\n      ProgressBarComponent.hide();\n    });\n  }\n\n  /**\n   * Prepare query params to build new URL after filter or pagination has changed\n   */\n  private reloadPage(): void {\n    const queryParams: NavigationExtras = {};\n    queryParams['query'] = this.query;\n    queryParams['page'] = this.currentPageIndex;\n\n    Object.keys(this.filters).forEach(filter => this.encodeURL(this.filters[filter], filter, queryParams));\n\n    this.router.navigate([], {\n      queryParams,\n      fragment: this.DisplayType\n    });\n    ProgressBarComponent.hide();\n    // This is a test case event for GA, to monitor if users ever use more then one filter.\n    const filterCount = this.getFilterCount();\n    if (1 < filterCount) {\n      this.googleAnalyticsService.fireMultiFilterEvent(filterCount.toString());\n    }\n  }\n\n  private encodeURL(filter: string[], filterName: string, params: Params): string {\n    if (filter !== undefined && filter.length !== 0) {\n      params[filterName] = filter.join().replace(/ /g, '_');\n    }\n    return params[filterName];\n  }\n\n  private decodeURL(filterName: string, params: Params): string[] {\n    return params[filterName] ? params[filterName].replace(/_/g, ' ').split(',') : [];\n  }\n\n  private getFilterCount(): number {\n    return Object.values(this.filters).reduce((total, f) => total + f.length, 0);\n  }\n\n  /**\n   *\n   * @param pageIndex new page index after hitting the paginator to update the URL and reload content\n   */\n  public onPageChange(pageIndex: number): void {\n    this.currentPageIndex = pageIndex;\n    this.reloadPage();\n  }\n\n  public onResetAllFilters(): void {\n    Object.keys(this.filters).forEach(f => this.filters[f] = []);\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onSpeciesFilterChanged(filter: string[]): void {\n    this.filters.species = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onBiologicalRoleFilterChanged(filter: string[]): void {\n    this.filters.bioRole = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onInteractorTypeFilterChanged(filter: string[]): void {\n    this.filters.interactorType = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onPredictedFilterChanged(filter: string[]): void {\n    this.filters.predicted = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onConfidenceScoreFilterChanged(filter: string[]): void {\n    this.filters.confidenceScore = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  get currentPageIndex(): number {\n    if (this.DisplayType === COMPLEX_NAVIGATOR_VIEW) {\n      return this._navigatorCurrentPage;\n    } else {\n      return this._listCurrentPage;\n    }\n  }\n\n  set currentPageIndex(value: number) {\n    if (this.DisplayType === COMPLEX_NAVIGATOR_VIEW) {\n      this._navigatorCurrentPage = value;\n    } else {\n      this._listCurrentPage = value;\n    }\n  }\n\n  get lastPageIndex(): number {\n    if (this.DisplayType === COMPLEX_NAVIGATOR_VIEW) {\n      return this._navigatorLastPageIndex;\n    } else {\n      return this._listLastPageIndex;\n    }\n  }\n\n  set lastPageIndex(value: number) {\n    if (this.DisplayType === COMPLEX_NAVIGATOR_VIEW) {\n      this._navigatorLastPageIndex = value;\n    } else {\n      this._listLastPageIndex = value;\n    }\n  }\n\n  get pageSize(): number {\n    if (this.DisplayType === COMPLEX_NAVIGATOR_VIEW) {\n      return this._navigatorPageSize;\n    } else {\n      return this._listPageSize;\n    }\n  }\n\n  onDisplayTypeChange(displayType: string) {\n    if (this.DisplayType !== displayType) {\n      this.DisplayType = displayType;\n      if (displayType === LIST_VIEW) {\n        this.setListView();\n      } else if (displayType === COMPLEX_NAVIGATOR_VIEW) {\n        this.setComplexNavigatorView();\n      }\n    }\n  }\n\n  isDisplayComplexNavigatorView(): boolean {\n    return this.DisplayType === COMPLEX_NAVIGATOR_VIEW;\n  }\n\n  private setListView() {\n    this._toast = this.notificationService.complexNavigatorAnnouncement();\n    this.reloadPage();\n  }\n\n  private setComplexNavigatorView() {\n    if (!!this._toast) {\n      this.notificationService.closeAnnouncement(this._toast.toastId);\n      this._toast = null;\n    }\n    this.reloadPage();\n  }\n\n  processSearchResults(): void {\n    // No filters and only one result, then we redirect to complex details page\n    // This allows users to enable filters to see even one result without redirecting them out from the results page,\n    // but we ensure redirection of a new search has only one result.\n    if (this.getFilterCount() === 0 && this.complexSearch.totalNumberOfResults === 1) {\n      const complexId = this.complexSearch.elements[0].complexAC;\n      if (!!complexId) {\n        // For some reason this is needed so the navigate call works\n        this.router.routeReuseStrategy.shouldReuseRoute = function () {\n          return false;\n        };\n        this.router.navigate(['/complex', complexId]);\n      }\n    } else if (!this.DisplayType) {\n      // Currently the list view is the default, as we are just launching the navigator view\n      // Later on we can change the default view to be the list or navigator view based on number of results\n      if (this.complexSearch.totalNumberOfResults <= this._navigatorPageSize) {\n        this.setComplexNavigatorView();\n      } else {\n        this.setListView();\n      }\n    }\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ComplexResultsComponent} from './complex-results.component';\nimport {RouterModule} from '@angular/router';\nimport {ComplexPaginatorComponent} from './complex-paginator/complex-paginator.component';\nimport {ComplexFilterComponent} from './complex-filter/complex-filter.component';\nimport {ComplexListComponent} from './complex-list/complex-list.component';\nimport {ProgressSpinnerModule} from '../../shared/loading-indicators/progress-spinner/progress-spinner.module';\nimport {MarkdownModule} from 'ngx-markdown';\nimport {ComplexNavigatorModule} from './complex-navigator/complex-navigator.module';\nimport {ComplexNavigatorRatingComponent} from './complex-navigator/complex-navigator-rating/complex-navigator-rating.component';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {ComplexModule} from '../complex.module';\n\n\n@NgModule({\n  imports: [RouterModule.forChild([\n    {path: '', component: ComplexResultsComponent},\n  ]),\n    CommonModule,\n    ProgressSpinnerModule, MarkdownModule,\n    ComplexNavigatorModule, MatTooltipModule, ComplexModule\n  ],\n  exports: [],\n  declarations: [ComplexResultsComponent,\n    ComplexListComponent,\n    ComplexFilterComponent,\n    ComplexPaginatorComponent,\n    ComplexNavigatorRatingComponent\n  ]\n})\nexport class ComplexResultsModule {\n}\n","export default \"<div class=\\\"filters row\\\">\\n  <div class=\\\"columns medium-6\\\"><h3>Filters</h3></div>\\n  <div class=\\\"columns medium-6\\\">\\n    <div *ngIf=\\\"anyFiltersSelected()\\\">\\n      <a class=\\\"button\\\" (click)=\\\"resetAllFilters()\\\"><i class=\\\"icon icon-common\\\" data-icon=\\\"\\\"></i> Reset filters</a>\\n    </div>\\n  </div>\\n  <div class=\\\"columns medium-12\\\">\\n    <div *ngIf=\\\"facets.predicted_complex_f\\\">\\n      <b>Complex Type</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.predicted_complex_f\\\" [class.predicted]=\\\"facet.name === 'true'\\\">\\n          <label>\\n            <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                   (change)=\\\"changePredictedFilter(filter.value, filter.checked)\\\"\\n                   [checked]=\\\"isSelected(facet.name, predictedFilter)\\\">\\n            <span class=\\\"tag\\\">{{ formatPredictedFacetValue(facet.name) }}</span><span class=\\\"count\\\">{{ facet.count }}</span>\\n          </label>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div *ngIf=\\\"facets.confidence_score_f\\\">\\n      <b>Confidence Score</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.confidence_score_f\\\" [class.predicted]=\\\"facet.name === '1' || facet.name === '2'\\\">\\n          <label>\\n            <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                   (change)=\\\"changeConfidenceScoreFilter(filter.value, filter.checked)\\\"\\n                   [checked]=\\\"isSelected(facet.name, confidenceScoreFilter)\\\">\\n\\n            <span class=\\\"stars\\\">\\n              <i *ngFor=\\\"let star of getStars(facet.name)\\\" class=\\\"icon icon-common icon-star\\\" [ngClass]=\\\"star\\\"></i>\\n            </span>\\n            <span class=\\\"count\\\">{{ facet.count }}</span>\\n          </label>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div *ngIf=\\\"facets.species_f\\\">\\n      <b>Species</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.species_f\\\">\\n          <label [matTooltip]=\\\"facet.name\\\">\\n            <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                   (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\"\\n                   [checked]=\\\"isSelected(facet.name, speciesFilter)\\\">\\n\\n            <span>\\n              <i *ngIf=\\\"facetOrganismIcon(facet.name).startsWith('icon'); else img\\\"\\n                 [ngClass]=\\\"facetOrganismIcon(facet.name)\\\" style=\\\"font-size: large;\\\"></i>\\n            <ng-template #img>\\n              <img [src]=\\\"facetOrganismIcon(facet.name)\\\" alt=\\\"\\\" width=\\\"18px\\\" height=\\\"18px\\\"/>\\n            </ng-template>\\n            </span>\\n\\n            {{ facet.name | species:true }} <span class=\\\"count\\\">{{ facet.count }}</span>\\n          </label>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div *ngIf=\\\"facets.pbiorole_f\\\">\\n      <b>Biological Role</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.pbiorole_f\\\">\\n          <label>\\n            <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                   (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\"\\n                   [checked]=\\\"isSelected(facet.name, bioRoleFilter)\\\">\\n\\n            {{ facet.name }} <span class=\\\"count\\\">{{ facet.count }}</span>\\n          </label>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div *ngIf=\\\"facets.ptype_f\\\">\\n      <b>Component Type</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.ptype_f\\\">\\n          <label>\\n            <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                   (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\"\\n                   [checked]=\\\"isSelected(facet.name, interactorTypeFilter)\\\">\\n\\n            <span >\\n              <i [ngClass]=\\\"facetTypeIcon(facet.name)\\\" style=\\\"font-size: large;\\\"></i>\\n            </span>\\n            {{ facet.name }} <span class=\\\"count\\\">{{ facet.count }}</span>\\n          </label>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div *ngIf=\\\"!facets.species_f && !facets.pbiorole_f && !facets.ptype_f && !facets.predicted_complex_f && !facets.confidence_score_f\\\">\\n      <h6>No filters available</h6>\\n    </div>\\n  </div>\\n</div>\\n\";","export default \"<ul class=\\\"no-bullet\\\">\\n  <li *ngFor=\\\"let complex of complexSearch.elements\\\" [class.predicted]=\\\"complex.predictedComplex\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"basketButtonContainer\\\"\\n           [matTooltip]=\\\"isInBasket(complex) ? 'Remove from basket' : 'Add to basket'\\\">\\n        <a class=\\\"button\\\" (click)=\\\"toggleBasket(complex)\\\">\\n          <i class=\\\"icon icon-common\\\" [attr.data-icon]=\\\"isInBasket(complex) ? '':''\\\"></i>\\n        </a>\\n      </div>\\n      <div class=\\\"complexesAndDescription\\\">\\n        <h3>\\n          <a [routerLink]=\\\"['/complex', complex.complexAC]\\\">{{ complex.complexName }}</a></h3>\\n        <div class=\\\"description\\\" style=\\\"background-color: white\\\">\\n          <b>Complex AC:</b> {{ complex.complexAC }} · <b>Organism:</b> {{ complex.organismName | species }}\\n          · <b class=\\\"tag\\\">{{ !complex.predictedComplex ? 'Curated' : 'Predicted'}} complex</b>\\n          <br>\\n          <ng-container *ngIf=\\\"complex.description\\\">\\n            <b>Description:</b>\\n            <div *ngIf=\\\"complex.description.length <= 250\\\">\\n              {{ complex.description }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n            </div>\\n            <div *ngIf=\\\"complex.description.length > 250\\\">\\n              {{ complex.description.substr(0, 250) }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n            </div>\\n          </ng-container>\\n        </div>\\n      </div>\\n    </div>\\n  </li>\\n</ul>\\n\";","export default \"<div class=\\\"ratingComponent\\\" *ngIf=\\\"!hidden\\\">\\n  <div class=\\\"buttonContainer\\\">\\n    <button class=\\\"close\\\" id=\\\"closePopup\\\" (click)=\\\"hidden = true\\\">&times;</button>\\n  </div>\\n  <div class=\\\"text\\\">\\n    <p>Tell us about your experience with the Complex Navigator!</p>\\n  </div>\\n  <div class=\\\"ratingComponentStars\\\">\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 1}\\\" (click)=\\\"selectRating(1)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 2}\\\" (click)=\\\"selectRating(2)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 3}\\\" (click)=\\\"selectRating(3)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 4}\\\" (click)=\\\"selectRating(4)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 5}\\\" (click)=\\\"selectRating(5)\\\"> &#9733; </span>\\n  </div>\\n</div>\\n\";","export default \"<div>\\n  <h5 class=\\\"text-center\\\">{{ currentPageIndex }} of {{ lastPageIndex }}</h5>\\n  <ul class=\\\"pagination text-center\\\" role=\\\"navigation\\\" aria-label=\\\"Pagination\\\">\\n    <li class=\\\"arrow unavailable\\\" *ngIf=\\\"currentPageIndex != 1\\\" aria-disabled=\\\"true\\\"><a\\n      (click)=\\\"getFirstPage()\\\">&Lang; First</a></li>\\n    <li class=\\\"arrow unavailable\\\" *ngIf=\\\"currentPageIndex != 1\\\" aria-disabled=\\\"true\\\"><a\\n      (click)=\\\"getPreviousPage()\\\">&lang; Previous</a></li>\\n    <ng-container *ngFor=\\\"let index of pagination\\\">\\n      <li *ngIf=\\\"index[1] == 'true'\\\" class=\\\"current\\\"><span class=\\\"show-for-sr\\\">You're on page</span>{{ index[0] }}</li>\\n      <li *ngIf=\\\"index[1] == 'false'\\\"><a (click)=\\\"getPage(index[0])\\\">{{ index[0] }}</a></li>\\n    </ng-container>\\n    <li class=\\\"arrow\\\" *ngIf=\\\"currentPageIndex != lastPageIndex\\\"><a (click)=\\\"getNextPage()\\\">Next &rang;</a></li>\\n    <li class=\\\"arrow\\\" *ngIf=\\\"currentPageIndex != lastPageIndex\\\"><a (click)=\\\"getLastPage()\\\">Last &Rang;</a></li>\\n  </ul>\\n</div>\\n\";","export default \"<div class=\\\"margin-top-large margin-bottom-large row expanded\\\">\\n  <ng-container *ngIf=\\\"complexSearch;else loadingSpinner\\\">\\n    <div class=\\\"columns medium-12\\\" *ngIf=\\\"complexSearch.totalNumberOfResults !== 0\\\">\\n      <h2 class=\\\"padding-left-large\\\">Total number of results: {{ complexSearch.totalNumberOfResults }} </h2>\\n      <div class=\\\"row expanded\\\">\\n        <div class=\\\"columns medium-12\\\">\\n          <cp-complex-navigator-rating *ngIf=\\\"isDisplayComplexNavigatorView()\\\">\\n          </cp-complex-navigator-rating>\\n\\n        </div>\\n\\n        <div class=\\\"columns medium-12 large-2 no-padding\\\">\\n          <cp-complex-filter *ngIf=\\\"filters\\\"\\n                             [speciesFilter]=\\\"filters.species\\\"\\n                             [bioRoleFilter]=\\\"filters.bioRole\\\"\\n                             [interactorTypeFilter]=\\\"filters.interactorType\\\"\\n                             [predictedFilter]=\\\"filters.predicted\\\"\\n                             [confidenceScoreFilter]=\\\"filters.confidenceScore\\\"\\n                             [facets]=\\\"complexSearch.facets\\\"\\n                             (onResetAllFilters)=\\\"onResetAllFilters()\\\"\\n                             (onSpeciesFilterChanged)=\\\"onSpeciesFilterChanged($event)\\\"\\n                             (onBiologicalRoleFilterChanged)=\\\"onBiologicalRoleFilterChanged($event)\\\"\\n                             (onInteractorTypeFilterChanged)=\\\"onInteractorTypeFilterChanged($event)\\\"\\n                             (onPredictedFilterChanged)=\\\"onPredictedFilterChanged($event)\\\"\\n                             (onConfidenceScoreFilterChanged)=\\\"onConfidenceScoreFilterChanged($event)\\\">\\n          </cp-complex-filter>\\n        </div>\\n        <div class=\\\"columns medium-12 large-10\\\">\\n          <div class=\\\"paginatorAndDisplay\\\">\\n            <cp-complex-list-display-buttons\\n              [displayType]=\\\"DisplayType\\\"\\n              (displayTypeChange)=\\\"onDisplayTypeChange($event)\\\">\\n            </cp-complex-list-display-buttons>\\n            <cp-complex-paginator class=\\\"paginator\\\"\\n                                  [currentPageIndex]=\\\"currentPageIndex\\\"\\n                                  [lastPageIndex]=\\\"lastPageIndex\\\"\\n                                  (onPageChange)=\\\"onPageChange($event)\\\">\\n            </cp-complex-paginator>\\n          </div>\\n          <div class=\\\"listOfResults\\\">\\n            <cp-complex-list *ngIf=\\\"!isDisplayComplexNavigatorView()\\\"\\n                             [complexSearch]=\\\"complexSearch\\\">\\n            </cp-complex-list>\\n          </div>\\n          <div class=\\\"ComplexNavigator\\\" *ngIf=\\\"isDisplayComplexNavigatorView()\\\"\\n               [ngClass]=\\\"complexSearch.totalNumberOfResults <=6 ? 'smallCN' : 'largeCN'\\\">\\n            <cp-complex-navigator class=\\\"Complex-navigator\\\"\\n                                  [complexSearch]=\\\"complexSearch\\\"\\n                                  [interactors]=\\\"allInteractorsInComplexSearch\\\"\\n                                  [canAddComplexesToBasket]=\\\"true\\\"\\n                                  [canRemoveComplexesFromBasket]=\\\"false\\\">\\n            </cp-complex-navigator>\\n          </div>\\n          <cp-complex-paginator class=\\\"paginator\\\"\\n                                [currentPageIndex]=\\\"currentPageIndex\\\"\\n                                [lastPageIndex]=\\\"lastPageIndex\\\"\\n                                (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n        </div>\\n      </div>\\n    </div>\\n\\n\\n    <div class=\\\"columns medium-12 callout alert\\\" *ngIf=\\\"complexSearch.totalNumberOfResults === 0\\\">\\n      <h2>No Complex Portal results found</h2>\\n      <h3>We're sorry but we couldn't find anything that matched your search for: <b>{{ query }}</b></h3>\\n      <h4>Please consider refining your terms:</h4>\\n      <ul>\\n        <li>Make sure all words are spelled correctly</li>\\n        <li>Try different keywords</li>\\n        <li>Be more precise: use gene or protein IDs, e.g. Ndc80 or Q04571</li>\\n        <li>Remove quotes around phrases to search for each word individually. bike shed will often show more results\\n          than \\\"bike shed\\\"\\n        </li>\\n      </ul>\\n    </div>\\n  </ng-container>\\n  <ng-template #loadingSpinner>\\n    <cp-progress-spinner [query]=\\\"query\\\"></cp-progress-spinner>\\n  </ng-template>\\n</div>\\n\";"],"names":[],"sourceRoot":"webpack:///"}