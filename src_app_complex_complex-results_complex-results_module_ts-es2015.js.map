{"version":3,"file":"src_app_complex_complex-results_complex-results_module_ts-es2015.js","mappings":"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","sources":["./src/app/complex/complex-portal-utils.ts","./src/app/complex/complex-results/complex-filter/complex-filter.component.ts","./src/app/complex/complex-results/complex-list/complex-list.component.ts","./src/app/complex/complex-results/complex-navigator-sorting/complex-navigator-sorting.component.ts","./src/app/complex/complex-results/complex-navigator/complex-navigator.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/complex-navigator-utils.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.ts","./src/app/complex/complex-results/complex-paginator/complex-paginator.component.ts","./src/app/complex/complex-results/complex-results.component.ts","./src/app/complex/complex-results/complex-results.module.ts","./src/app/complex/shared/model/complex-results/interactor.model.ts","./src/app/complex/complex-results/complex-filter/complex-filter.component.html","./src/app/complex/complex-results/complex-list/complex-list.component.html","./src/app/complex/complex-results/complex-navigator-sorting/complex-navigator-sorting.component.html","./src/app/complex/complex-results/complex-navigator/complex-navigator.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.html","./src/app/complex/complex-results/complex-paginator/complex-paginator.component.html","./src/app/complex/complex-results/complex-results.component.html"],"sourcesContent":["export function interactorTypeIcon(type: string): string {\n  switch (type) {\n    case 'small molecule':\n      return 'icon icon-conceptual icon-chemical';\n    case 'protein':\n    case 'peptide':\n      return 'icon icon-conceptual icon-structures-3d';\n    case 'stable complex':\n      return 'icon icon-conceptual icon-systems';\n    case 'molecule set':\n      return 'icon icon-generic icon-math';\n    case 'single stranded deoxyribonucleic acid':\n    case 'double stranded deoxyribonucleic acid':\n    case 'small nuclear rna':\n    case 'small nucleolar rna':\n    case 'ribosomal rna':\n    case 'messenger rna':\n    case 'transfer rna':\n    case 'signal recognition particle rna':\n    case 'ribonucleic acid':\n    case 'nucleic acid':\n    case 'long non-coding ribonucleic acid':\n      return 'icon icon-conceptual icon-dna';\n  }\n}\n\nexport function organismIcon(organism: string): string {\n  switch (organism) {\n    case 'Homo sapiens':\n      return 'icon icon-species icon-human';\n    case 'Mus musculus':\n      return 'icon icon-species icon-mouse';\n    case 'Saccharomyces cerevisiae (strain ATCC 204508 / S288c)':\n    case 'Schizosaccharomyces pombe (strain 972 / ATCC 24843)':\n      return 'icon icon-species icon-yeast';\n    case 'Escherichia coli (strain K12)':\n    case 'Escherichia coli':\n    case 'Pseudomonas aeruginosa (strain ATCC 15692 / DSM 22644 / CIP 104116 ' +\n    '/ JCM 14847 / LMG 12228 / 1C / PRS 101 / PAO1)':\n      return 'icon icon-species icon-ecoli';\n    case 'Rattus norvegicus':\n      return 'icon icon-species icon-rat';\n    case 'Caenorhabditis elegans':\n      return 'icon icon-species icon-c-elegans';\n    case 'Gallus gallus':\n      return 'icon icon-species icon-chicken';\n    case 'Drosophila melanogaster':\n      return 'icon icon-species icon-fly';\n    case 'Bos taurus':\n      return 'icon icon-species icon-cow';\n    case 'Oryctolagus cuniculus':\n      return 'icon icon-species icon-rabbit';\n    case 'Ovis aries':\n      return 'icon icon-species icon-sheep';\n    case 'Xenopus laevis':\n      return 'icon icon-species icon-frog';\n    case 'Canis lupus familiaris':\n      return 'icon icon-species icon-dog';\n    case 'Vibrio cholerae serotype O1 (strain ATCC 39315 / El Tor Inaba N16961)':\n      return 'assets/images/EMBL_Species_Vibrio_cholerae.svg';\n    case 'Crotalus durissus terrificus':\n      return 'assets/images/EMBL_Species_RattleSnake.svg';\n    case 'Sus scrofa':\n      return 'icon icon-species icon-pig';\n    case 'Torpedo marmorata':\n    case 'Tetronarce californica':\n      return 'icon icon-species icon-ray';\n    case 'Lymnaea stagnalis':\n      return 'icon icon-species icon-snail';\n    case 'Arabidopsis thaliana':\n      return 'icon icon-species icon-brassica';\n    case 'Danio rerio':\n      return 'icon icon-species icon-zebrafish';\n    case 'Severe acute respiratory syndrome coronavirus':\n    case 'Severe acute respiratory syndrome coronavirus 2':\n    case 'Middle East respiratory syndrome-related coronavirus (isolate United Kingdom/H123990006/2012)':\n    case 'Human betacoronavirus 2c EMC/2012':\n      return 'icon icon-species icon-virus';\n  }\n  return '';\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Facets} from '../../shared/model/complex-results/facets.model';\nimport {AnalyticsService} from '../../../shared/google-analytics/service/analytics.service';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\nimport {interactorTypeIcon} from '../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-complex-filter',\n  templateUrl: './complex-filter.component.html',\n  styleUrls: ['./complex-filter.component.css']\n})\nexport class ComplexFilterComponent implements OnInit {\n\n  private _facets: Facets;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n  @Output() onSpicesFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onBiologicalRoleFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onInteractorTypeFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onResetAllFilters: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private googleAnalyticsService: AnalyticsService) {\n  }\n\n  ngOnInit() {\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeSpeciesFilter(filter: string, status: boolean) {\n    if (status) {\n      this.spicesFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.spicesFilter.splice(this.spicesFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onSpicesFilterChanged.emit(this.spicesFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeBiologicalRoleFilter(filter: string, status: boolean) {\n    if (status) {\n      this.bioRoleFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.bioRoleFilter.splice(this.bioRoleFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onBiologicalRoleFilterChanged.emit(this.bioRoleFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeInteractorTypeFilter(filter: string, status: boolean) {\n    if (status) {\n      this.interactorTypeFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.interactorTypeFilter.splice(this.interactorTypeFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onInteractorTypeFilterChanged.emit(this.interactorTypeFilter);\n  }\n\n  /**\n   * Emit event to parent component to remove all filters\n   */\n  public resetAllFilters() {\n    this.onResetAllFilters.emit(true);\n  }\n\n  /**\n   *\n   * @returns {boolean} true is any filter array contains an filter\n   */\n  public anyFiltersSelected() {\n    return (this._spicesFilter.length !== 0 || this._bioRoleFilter.length !== 0 || this._interactorTypeFilter.length !== 0);\n  }\n\n  /**\n   *\n   * @param element filter to check if already selected\n   * @param filter selected filters\n   * @returns {boolean} true if filter is already in selected filters\n   */\n  public isSelected(element: string, filter: string[]): boolean {\n    return filter.indexOf(element) !== -1;\n  }\n\n  get facets(): Facets {\n    return this._facets;\n  }\n\n  @Input()\n  set facets(value: Facets) {\n    this._facets = value;\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  @Input()\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  @Input()\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  @Input()\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n\n  public facetTypeIcon(facet): string {\n    return interactorTypeIcon(facet.name);\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\n\n@Component({\n  selector: 'cp-complex-list',\n  templateUrl: './complex-list.component.html',\n  styleUrls: ['./complex-list.component.css']\n})\nexport class ComplexListComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-navigator-sorting',\n  templateUrl: './complex-navigator-sorting.component.html',\n  styleUrls: ['./complex-navigator-sorting.component.css']\n})\nexport class ComplexNavigatorSortingComponent {\n  @Output() interactorsSortingChange = new EventEmitter<string>();\n  @Output() organismIconDisplayChange = new EventEmitter<boolean>();\n  @Output() interactorTypeDisplayChange = new EventEmitter<boolean>();\n  @Output() IDDisplayChange = new EventEmitter<boolean>();\n\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  typeOfDisplay: string;\n\n  InteractorsSorting(typeOfSorting: string) {\n    this.interactorsSortingChange.emit(typeOfSorting);\n    switch (this.typeOfDisplay) {\n      case 'compact':\n        this.compactDisplay();\n        break;\n      default:\n        this.detailedDisplay();\n        if (typeOfSorting === 'Type') {\n          this.interactorTypeDisplay = false;\n        } else if (typeOfSorting === 'Organism') {\n          this.organismIconDisplay = false;\n        }\n    }\n    this.changesEmitter();\n  }\n\n  DisplayingOrganism() {\n    this.organismIconDisplay = !this.organismIconDisplay;\n    this.changesEmitter();\n  }\n\n  DisplayingType() {\n    this.interactorTypeDisplay = !this.interactorTypeDisplay;\n    this.changesEmitter();\n  }\n\n  DisplayingID() {\n    this.IDDisplay = !this.IDDisplay;\n    this.changesEmitter();\n  }\n\n  compactDisplay() {\n    this.organismIconDisplay = false;\n    this.interactorTypeDisplay = false;\n    this.IDDisplay = false;\n    this.changesEmitter();\n    this.typeOfDisplay = 'compact';\n  }\n\n  detailedDisplay() {\n    this.organismIconDisplay = true;\n    this.interactorTypeDisplay = true;\n    this.IDDisplay = true;\n    this.changesEmitter();\n    this.typeOfDisplay = 'detailed';\n  }\n\n  changesEmitter() {\n    this.organismIconDisplayChange.emit(this.organismIconDisplay);\n    this.interactorTypeDisplayChange.emit(this.interactorTypeDisplay);\n    this.IDDisplayChange.emit(this.IDDisplay);\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-navigator',\n  templateUrl: './complex-navigator.component.html',\n  styleUrls: ['./complex-navigator.component.css']\n})\nexport class ComplexNavigatorComponent {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  interactorsSorting = 'Occurrence';\n  organismIconDisplay = true;\n  interactorTypeDisplay = true;\n  IDDisplay = true;\n}\n","import {Component, Input} from '@angular/core';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\n@Component({\n  selector: 'cp-table-header',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css'],\n})\n\nexport class TableHeaderComponent {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n}\n","import {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\n\nexport function fetchValuesFromStoichiometry(stoichiometry: string) {\n  const pattern = 'minValue: ([0-9+]), maxValue: ([0-9+])';\n  return stoichiometry.match(pattern);\n}\n\nexport function findInteractorInComplex(complex: Element, componentId: string): ComplexComponent {\n  return complex.interactors.find(component => component.identifier === componentId);\n}\n\nexport function getStoichiometry(complex: Element, componentId: string): string {\n  const match = findInteractorInComplex(complex, componentId);\n  if (!!match) {\n    if (!!match.stochiometry) {\n      return 'Stoichiometry values: ' + (match.stochiometry);\n    } else {\n      return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n    }\n  }\n  return null;\n}\n\nexport function stoichiometryOfInteractors(complex: Element, interactorId: string): string {\n  const match = findInteractorInComplex(complex, interactorId);\n  if (!!match) {\n    return formatStoichiometryValues(match.stochiometry);\n  }\n  return null;\n}\n\n\nexport function parseStoichiometryValues(stoichiometry: string): [number, number] {\n  if (!!stoichiometry) {\n    const matchedStoichiometry = fetchValuesFromStoichiometry(stoichiometry);\n    if (!!matchedStoichiometry) {\n      const minValue = parseInt(matchedStoichiometry[1], 10);\n      const maxValue = parseInt(matchedStoichiometry[2], 10);\n      if (!isNaN(minValue) && !isNaN(maxValue)) {\n        return [minValue, maxValue];\n      }\n    }\n  }\n  return null;\n}\n\nexport function formatStoichiometryValues(stoichiometry: string): string {\n  const parsedStoichiometry = parseStoichiometryValues(stoichiometry);\n  if (!!parsedStoichiometry) {\n    const minValue = parsedStoichiometry[0];\n    const maxValue = parsedStoichiometry[1];\n    if (minValue === maxValue) {\n      return minValue.toString();\n    } else {\n      return `${minValue}, ${maxValue}`;\n    }\n  }\n  return ' '; // sometimes we don't have the stoichiometry value\n}\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {Interactor} from '../../../../shared/model/complex-results/interactor.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {Observable} from 'rxjs/Observable';\nimport {of} from 'rxjs';\nimport {ComplexPortalService} from '../../../../shared/service/complex-portal.service';\nimport {map} from 'rxjs/operators';\nimport {formatStoichiometryValues, stoichiometryOfInteractors} from './complex-navigator-utils';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\nexport class EnrichedInteractor {\n  interactor: Interactor;\n  hidden: boolean;\n  isSubComplex: boolean;\n  expanded: boolean;\n  subComponents: ComplexComponent[];\n  partOfComplex: number[];\n  timesAppearing: number;\n  organismName: string;\n}\n\nexport class EnrichedComplex {\n  complex: Element;\n  startInteractorIndex: number;\n  endInteractorIndex: number;\n  startSubComponentIndex: number;\n  endSubComponentIndex: number;\n}\n\n@Component({\n  selector: 'cp-table-interactor-column',\n  templateUrl: './table-interactor-column.component.html',\n  styleUrls: ['./table-interactor-column.component.css']\n})\nexport class TableInteractorColumnComponent implements OnChanges {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() interactors: Interactor[];\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  enrichedInteractors: EnrichedInteractor[];\n  enrichedComplexes: EnrichedComplex[];\n  ranges: number[];\n\n\n  constructor(private complexPortalService: ComplexPortalService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!!changes['interactors']) {\n      this.enrichInteractors();\n    }\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  private classifyInteractors(): void {\n    if (!!this.interactorsSorting && !!this.enrichedInteractors && this.enrichedInteractors.length > 0) {\n      if (this.interactorsSorting === 'Type') {\n        this.classifyInteractorsByType();\n      } else if (this.interactorsSorting === 'Organism') {\n        this.classifyInteractorsByOrganism();\n      } else {\n        this.classifyInteractorsByOccurrence();\n      }\n    }\n  }\n\n  private enrichInteractors() {\n    this.enrichedInteractors = [];\n    for (const interactor of this.interactors) {\n      const isSubComplex = interactor.interactorType === 'stable complex';\n      const newEnrichedInteractor: EnrichedInteractor = {\n        interactor,\n        hidden: false,\n        isSubComplex,\n        expanded: false,\n        subComponents: null,\n        partOfComplex: [],\n        timesAppearing: 0,\n        organismName: '',\n      };\n      if (isSubComplex) {\n        this.loadSubInteractors(newEnrichedInteractor).subscribe(subComponents => newEnrichedInteractor.subComponents = subComponents);\n      }\n      this.enrichedInteractors.push(newEnrichedInteractor);\n    }\n    this.interactorOrganism();\n  }\n\n  toggleSubcomplexExpandable(i: number): void {\n    this.enrichedInteractors[i].expanded = !this.enrichedInteractors[i].expanded;\n\n    if (this.enrichedInteractors[i].expanded) {\n      // EnrichedInteractor has been expanded, we need to:\n\n      // 1. Collapse the other ones, in case there is any other expanded\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        if (i !== j) {\n          this.enrichedInteractors[j].expanded = false;\n        }\n      }\n\n      // 2. Hide any interactor now displayed in the expanded section\n      if (!!this.enrichedInteractors[i].subComponents) {\n        const subInteractorIds: string[] = this.enrichedInteractors[i].subComponents.map(component => component.identifier);\n        for (let j = 0; j < this.enrichedInteractors.length; j++) {\n          if (i !== j) {\n            this.enrichedInteractors[j].hidden = !!subInteractorIds.includes(this.enrichedInteractors[j].interactor.identifier);\n          }\n        }\n      }\n    } else {\n      // EnrichedInteractor has been collapsed, we need to:\n      // 1. Display any interactor previously hidden\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        this.enrichedInteractors[j].hidden = false;\n      }\n    }\n\n    // Something has been expanded or collapsed, we need to recalculate the start and end indexes for the lines\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n\n  }\n\n  private loadSubInteractors(interactor: EnrichedInteractor): Observable<ComplexComponent[]> {\n    // this function returns the list of subcomponents of an interactor of type stable complex\n    const foundComplex: Element = this.complexes.find(complex => complex.complexAC === interactor.interactor.identifier);\n    if (!!foundComplex) {\n      return of(foundComplex.interactors);\n    } else {\n      // Actually call the back-end to fetch these\n      return this.complexPortalService.getSimplifiedComplex(interactor.interactor.identifier)\n        .pipe(map(complex => complex?.interactors));\n    }\n  }\n\n  private calculateAllStartAndEndIndexes(): void {\n    this.enrichedComplexes = [];\n\n    for (const complex of this.complexes) {\n      this.enrichedComplexes.push(this.calculateStartAndEndIndexes(complex));\n    }\n  }\n\n  private getMinValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.min(valueA, valueB);\n  }\n\n  private getMaxValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.max(valueA, valueB);\n  }\n\n  private calculateStartAndEndIndexes(complex: Element): EnrichedComplex {\n    const subComponentsToCheck: string[] = [];\n\n    const enrichedComplex: EnrichedComplex = {\n      complex,\n      startInteractorIndex: null,\n      endInteractorIndex: null,\n      startSubComponentIndex: null,\n      endSubComponentIndex: null\n    };\n\n    // We iterate through the interactors to find the first and last one part of the complex\n    // We do this to be able to draw a line connecting all interactors in the complex\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n        for (let j = 0; j < complex.interactors.length; j++) {\n          if (complex.interactors[j].identifier === this.enrichedInteractors[i].interactor.identifier) {\n            // The interactor is part of the complex, we update the start and end indices for the interactors\n            // line as it may start in this interactor\n            enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n            enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n\n            // The interactor is a subcomplex\n            if (this.enrichedInteractors[i].isSubComplex && !!this.enrichedInteractors[i].subComponents) {\n              // The subcomponents of that subcomplex could also be displayed in the table as separate interactors.\n              // In that case, the line could start or end there, so we need to also check the position of those\n              // interactors. We add those subcomponents to 'subComponentsToCheck' to check their position later\n              this.enrichedInteractors[i].subComponents.forEach(subComponent => subComponentsToCheck.push(subComponent.identifier));\n              if (this.enrichedInteractors[i].expanded) {\n                // If the subcomplex is expanded, as the subcomplex is part of the complex, all its subcomponents are also part\n                // of it. That means we need a line connecting all the subcomponents.\n                // That line must also connect to the subcomplex, so we start it at -1 to make sure it starts at the interactor cell\n                // and not at the first subcomponent\n                enrichedComplex.startSubComponentIndex = -1;\n                enrichedComplex.endSubComponentIndex = this.enrichedInteractors[i].subComponents.length - 1;\n              }\n            }\n          } else if (this.enrichedInteractors[i].isSubComplex &&\n            !!this.enrichedInteractors[i].subComponents &&\n            this.enrichedInteractors[i].expanded) {\n            // The interactor is not part of the complex, but it is a subcomplex, and it is expanded.\n            // This means the subcomponents of the subcomplex are visible, and any of them could be part of the complex.\n            // In that case, the line could start or end on any of those subcomponents\n            for (let k = 0; k < this.enrichedInteractors[i].subComponents.length; k++) {\n              if (complex.interactors[j].identifier === this.enrichedInteractors[i].subComponents[k].identifier) {\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the interactors\n                // line as it may start in this interactor\n                enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n                enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the subcomponents\n                // line as it may start in this subcomponent\n                enrichedComplex.startSubComponentIndex = this.getMinValue(enrichedComplex.startSubComponentIndex, k);\n                enrichedComplex.endSubComponentIndex = this.getMaxValue(enrichedComplex.endSubComponentIndex, k);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // We finally check the position of the subcomponents of subcomplexes part of the complex on the main table.\n    // If any is before or after where the lines start and end, then we need to update the start and end indexes,\n    // as the line must start or end there\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n        if (subComponentsToCheck.includes(this.enrichedInteractors[i].interactor.identifier)) {\n          // The interactor is part of a subcomplex that is part of the complex, we update the start and end indices for the interactors\n          // line as it may start in this interactor\n          enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n          enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n        }\n      }\n    }\n    return enrichedComplex;\n  }\n\n  private interactorOrganism() {\n    for (const complex of this.complexes) {\n      const organismName = complex.organismName;\n      for (const complexInteractor of complex.interactors) {\n        const match = this.enrichedInteractors.find(\n          enrichedInteractor => enrichedInteractor.interactor.identifier === complexInteractor.identifier\n        );\n        if (!!match) {\n          match.organismName = organismName;\n        }\n      }\n    }\n  }\n\n  public classifyInteractorsByOrganism() {\n    this.enrichedInteractors.sort((a, b) => b.organismName.localeCompare(a.organismName));\n    // this.calculateAllStartAndEndIndexes();\n    this.rangeOfInteractorOrganism();\n  }\n\n  public classifyInteractorsByType() {\n    this.enrichedInteractors.sort((a, b) => b.interactor.interactorType.localeCompare(a.interactor.interactorType));\n    this.rangeOfInteractorType();\n  }\n\n  public classifyInteractorsByOccurrence() {\n    for (const oneInteractor of this.enrichedInteractors) {\n      for (const complex of this.complexes) {\n        for (const complexesInteractors of complex.interactors) {\n          if (oneInteractor.interactor.identifier === complexesInteractors.identifier) {\n            const stoichiometryValue = parseInt(stoichiometryOfInteractors(complex, oneInteractor.interactor.identifier), 10);\n            if (!isNaN(stoichiometryValue)) {\n              oneInteractor.timesAppearing += stoichiometryValue;\n            }\n          }\n        }\n        if (oneInteractor.isSubComplex && !!oneInteractor.subComponents) {\n          for (const oneSubInteractor of oneInteractor.subComponents) {\n            const oneEnrichedInteractor = this.enrichedInteractors.find(\n              enrichedInteractor => enrichedInteractor.interactor.identifier === oneSubInteractor.identifier\n            );\n            if (!!oneEnrichedInteractor) {\n              const stoichiometryValue = parseInt(formatStoichiometryValues(oneSubInteractor.stochiometry), 10);\n              if (!isNaN(stoichiometryValue)) {\n                oneEnrichedInteractor.timesAppearing += stoichiometryValue;\n              }\n            }\n          }\n        }\n      }\n    }\n    this.enrichedInteractors.sort((a, b) =>\n      b.timesAppearing - a.timesAppearing\n    );\n    this.ranges = [];\n  }\n\n  public rangeOfInteractorType() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.interactorType !== this.enrichedInteractors[i + 1].interactor.interactorType) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.interactorType, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  public rangeOfInteractorOrganism() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].organismName !== this.enrichedInteractors[i + 1].organismName) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].organismName, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-external-link',\n  templateUrl: './table-interactor-external-link.component.html',\n  styleUrls: ['./table-interactor-external-link.component.css']\n})\nexport class TableInteractorExternalLinkComponent implements OnInit {\n\n  @Input() interactorId: string;\n  @Input() identifierLink: string;\n  @Input() interactorType: string;\n  @Input() isMainInteractor: boolean;\n  @Input() IDDisplay: boolean;\n\n  @Output() externalLinkVisible: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  ngOnInit(): void {\n    this.showExternalLink();\n  }\n\n  showExternalLink(): boolean {\n    if (this.isMainInteractor && this.interactorType === 'stable complex') {\n      this.externalLinkVisible.emit(false);\n      return false;\n    }\n    this.externalLinkVisible.emit(!!this.identifierLink);\n    return !!this.identifierLink;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {interactorTypeIcon} from '../../../../../complex-portal-utils';\nimport {organismIcon} from '../../../../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-table-interactor-name',\n  templateUrl: './table-interactor-name.component.html',\n  styleUrls: ['./table-interactor-name.component.css']\n})\nexport class TableInteractorNameComponent implements OnInit {\n\n  @Input() interactorName: string;\n  @Input() interactorType: string;\n  @Input() interactorId: string;\n  @Input() interactorOrganism: string;\n  @Input() identifierLink: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() isMainInteractor: boolean;\n  interactorTypeIcon: string;\n  interactorOrganismIcon: string;\n  externalLinkVisible: boolean;\n\n  ngOnInit(): void {\n    this.formatInteractorOrganism(); // put the organism name into the right format for the interactorOrganismIcon function\n    this.interactorTypeIcon = interactorTypeIcon(this.interactorType);\n    this.interactorOrganismIcon = organismIcon(this.interactorOrganism);\n  }\n\n  formatInteractorOrganism() {\n    if (this.interactorOrganism.includes(';')) {\n      const end = this.interactorOrganism.indexOf(';');\n      this.interactorOrganism = this.interactorOrganism.substring(0, end);\n    }\n  }\n\n  externalLinkVisibleHandler(isVisible: boolean): void {\n    this.externalLinkVisible = isVisible;\n  }\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-stoichiometry',\n  templateUrl: './table-interactor-stoichiometry.component.html',\n  styleUrls: ['./table-interactor-stoichiometry.component.css']\n})\nexport class TableInteractorStoichiometryComponent {\n  @Input() stoichiometryText: string;\n  @Input() stoichiometryValue: string;\n}\n","import {Component, Input} from '@angular/core';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {Element} from '../../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {\n  findInteractorInComplex,\n  getStoichiometry,\n  stoichiometryOfInteractors,\n  parseStoichiometryValues\n} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-main-interactor',\n  templateUrl: './table-main-interactor.component.html',\n  styleUrls: ['./table-main-interactor.component.css']\n})\nexport class TableMainInteractorComponent {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  findInteractorInComplex = findInteractorInComplex;\n  getStoichiometry = getStoichiometry;\n  stoichiometryOfInteractors = stoichiometryOfInteractors;\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  findInteractorsInSubComplex(complex: Element, interactorId: string): ComplexComponent[] {\n    return this.enrichedInteractors\n      // filter subcomplexes\n      .filter(interactor => interactor.isSubComplex)\n      // filter subcomplexes included in complex\n      .filter(interactor =>\n        complex.interactors.some(component => component.identifier === interactor.interactor.identifier))\n      // filter subcomplexes that match the componentId\n      .filter(interactor => !!interactor.subComponents)\n      .map(interactor => interactor.subComponents.find(subComponent => subComponent.identifier === interactorId))\n      .filter(component => !!component);\n  }\n\n  public displayTopLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnInteractorCell(complex, interactorIndex) && !this.doesLineStartOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnInteractorCell(complex, interactorIndex) && !this.doesLineEndOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  getStoichiometrySubComplex(complex: Element, interactorId: string): string {\n    const matches = this.findInteractorsInSubComplex(complex, interactorId);\n    if (matches.length > 0) {\n      const stoichiometryValues = this.addedStoichiometryValues(matches);\n      if (!!stoichiometryValues) {\n        return `Stoichiometry values: minValue: ${stoichiometryValues[0]}, maxValue: ${stoichiometryValues[1]}`;\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  stoichiometryOfInteractorsMainTable(complex: Element, interactorId: string): string {\n    const matches = this.findInteractorsInSubComplex(complex, interactorId);\n    if (matches.length > 0) {\n      const stoichiometryValues = this.addedStoichiometryValues(matches);\n      if (!!stoichiometryValues) {\n        if (stoichiometryValues[0] === stoichiometryValues[1]) {\n          return stoichiometryValues[0].toString();\n        } else {\n          return `${stoichiometryValues[0]}, ${stoichiometryValues[1]}`;\n        }\n      } else {\n        return ' ';\n      }\n    }\n    return null;\n  }\n\n  private doesLineCrossInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n\n      // The line starts before this interactor and ends after, so it crosses through the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      // The line starts before this interactor and end at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor, and it must cross through the interactor cell to the subcomponents\n        if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n\n      if (!this.enrichedInteractors[interactorIndex].isSubComplex) {\n        // If the interactor is not a subcomplex, then the interactor has no subcomponents and the line starts in it\n        return true;\n      }\n      // If the interactor is a subcomplex.\n      // If the interactor is actually part of the complex, the line starts in this interactor\n      // Otherwise, the line actually starts on one of the subcomponents of the complex, but not on the interactor itself, as it is\n      // not part of the complex.\n      if (complex.complex.interactors.some(component =>\n        this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line ends at this interactor or on any of its subcomponents\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n\n      // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n      // the line does not end in this interactor, and it must cross through to the subcomponents\n      if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n        if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  private addedStoichiometryValues(components: ComplexComponent[]): [number, number] {\n    let minValue: number = null;\n    let maxValue: number = null;\n    for (const component of components) {\n      const parsedStoichiometry = parseStoichiometryValues(component.stochiometry);\n      if (!!parsedStoichiometry) {\n        if (minValue === null) {\n          minValue = 0;\n        }\n        if (maxValue === null) {\n          maxValue = 0;\n        }\n        minValue += parsedStoichiometry[0];\n        maxValue += parsedStoichiometry[1];\n      }\n    }\n    if (minValue !== null && maxValue !== null) {\n      return [minValue, maxValue];\n    }\n    return null;\n  }\n\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {Element} from '../../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {findInteractorInComplex, formatStoichiometryValues, getStoichiometry, stoichiometryOfInteractors} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-subcomponent-interactor',\n  templateUrl: './table-subcomponent-interactor.component.html',\n  styleUrls: ['./table-subcomponent-interactor.component.css']\n})\n\nexport class TableSubcomponentInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() j: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  displayTopLineClass: string;\n  displayBottomLineClass: string;\n  interactorInComplex = false;\n  interactorStoichiometryText: string;\n  interactorStoichiometryValue: string;\n  interactorInSubComplex = false;\n  subComplexInteractorStoichiometryText: string;\n  subComplexInteractorStoichiometryValue: string;\n\n\n  // findInteractorInComplex = findInteractorInComplex;\n  // getStoichiometry = getStoichiometry;\n  // stoichiometryOfInteractors = stoichiometryOfInteractors;\n\n\n  ngOnChanges(): void {\n    this.displayTopLineClass = this.displayTopLineClassExpanded(this.complex, this.i, this.j);\n    this.interactorInComplex = !!findInteractorInComplex(this.complex.complex, this.el.identifier);\n    this.interactorStoichiometryText = getStoichiometry(this.complex.complex, this.el.identifier);\n    this.interactorStoichiometryValue = stoichiometryOfInteractors(this.complex.complex, this.el.identifier);\n    this.interactorInSubComplex = !!this.findInteractorInExpandedSubComplex(this.interactor, this.complex.complex, this.el.identifier);\n    this.subComplexInteractorStoichiometryText = this.getStoichiometryInExpandedSubComplex(this.interactor, this.el.identifier);\n    this.subComplexInteractorStoichiometryValue = this.stoichiometryOfInteractorsExpandable(this.interactor, this.el.identifier);\n    this.displayBottomLineClass = this.displayBottomLineClassExpanded(this.complex, this.i, this.j);\n  }\n\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  get el(): ComplexComponent {\n    return this.enrichedInteractors[this.i].subComponents[this.j];\n  }\n\n  public displayTopLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public findInteractorInExpandedSubComplex(interactor: EnrichedInteractor, complex: Element, interactorId: string): ComplexComponent {\n    if (complex.interactors.some(component => component.identifier === interactor.interactor.identifier)) {\n      return interactor.subComponents.find(component => component.identifier === interactorId);\n    }\n    return null;\n  }\n\n  getStoichiometryInExpandedSubComplex(interactor: EnrichedInteractor, interactorId: string): string {\n    const match = this.findInteractorInSubcomplex(interactor, interactorId);\n    if (!!match) {\n      if (!!match.stochiometry) {\n        return 'Stoichiometry values: ' + (match.stochiometry);\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  stoichiometryOfInteractorsExpandable(interactor: EnrichedInteractor, interactorId: string): string {\n    const match = this.findInteractorInSubcomplex(interactor, interactorId);\n    if (!!match) {\n      return formatStoichiometryValues(match.stochiometry);\n    }\n    return null;\n  }\n\n  private doesLineCrossSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n      // The line starts before this interactor and ends after, so it crosses through all the subcomponents of the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n        // The line starts before this subcomponent and ends after, so it crosses through the subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this interactor, and it ends on a later subcomponent, so it crosses through this subcomponent\n        if (complex.startInteractorIndex < interactorIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this subcomponent, and it ends on a later interactor, so it crosses through this subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endInteractorIndex > interactorIndex) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n      if (complex.startSubComponentIndex != null && complex.startSubComponentIndex === subComponentIndex) {\n        // If the subcomplex is a component of the complex, the line starts in the cell of the interactor, meaning it cannot\n        // start on any subcomponent.\n        // Otherwise, it starts on the subcomponent with the index subComponentIndex\n        return !complex.complex.interactors.some(component =>\n          this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier);\n\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n      // The line ends at this interactor and this subcomponent\n      if (complex.endSubComponentIndex != null && complex.endSubComponentIndex === subComponentIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private findInteractorInSubcomplex(interactor: EnrichedInteractor, interactorId: string): ComplexComponent {\n    return interactor.subComponents.find(component => component.identifier === interactorId);\n  }\n\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {ComplexSearchResult} from '../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../shared/model/complex-results/interactor.model';\nimport {Element} from '../../../shared/model/complex-results/element.model';\n\n@Component({\n  selector: 'cp-table-structure',\n  templateUrl: './table-structure.component.html',\n  styleUrls: ['./table-structure.component.css']\n})\nexport class TableStructureComponent implements OnChanges {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  sortedComplexes: Element[] = [];\n\n  ngOnChanges(): void {\n    this.classifyComplexesSize(); // ensure to always have the same base of comparison\n    this.sortedComplexes = this.classifyComplexesSimilarities(this.complexSearch.elements);\n  }\n\n  classifyComplexesSize(): void {\n    const searchResult: Element[] = [...this.complexSearch.elements];\n    const complexesAndSizes: [Element, number][] = [];\n    for (const complex of searchResult) {\n      let totalLength = complex.interactors.length;\n      for (const complexInteractorChecked of complex.interactors) {\n        if (complexInteractorChecked.interactorType === 'stable complex') {\n          const subComplex: Element = searchResult.find(c => c.complexAC === complexInteractorChecked.identifier);\n          if (!!subComplex) {\n            totalLength += subComplex.interactors.length;\n          }\n        }\n      }\n      complexesAndSizes.push([complex, totalLength]);\n    }\n    complexesAndSizes.sort((a, b) => b[1] - a[1]);\n    for (let i = 0; i < searchResult.length; i++) {\n      this.complexSearch.elements[i] = complexesAndSizes[i][0];\n    }\n  }\n\n  private calculateSimilarity(complex1, complex2) {\n    let similarities = 0;\n    for (const complex1Interactor of complex1.interactors) {\n      // The interactor of complex 1 is a subcomplex\n      if (complex1Interactor.interactorType === 'stable complex') {\n        // The subcomplex is exactly complex 2, so we add the number of interactors of complex 2 to the similarities\n        if (complex2.complexAC === complex1Interactor.identifier) {\n          similarities += complex2.interactors.length;\n        } else {\n          const subComplex: Element = this.complexSearch.elements.find(\n            complex => complex.complexAC === complex1Interactor.identifier\n          );\n          if (!!subComplex) {\n            const complex2MatchingInteractor: Interactor = complex2.interactors.find(\n              interactor => interactor.identifier === complex1Interactor.identifier\n            );\n            if (!!complex2MatchingInteractor) {\n              // Complex 2 also has the same subcomplex as an interactor, so we add all the interactors in the subcomplex\n              // to the similarities, as the two complexes have all those interactors in common\n              similarities += subComplex.interactors.length;\n            } else {\n              // Complex 2 does not have the same subcomplex as interactor, so we need to compare interactors\n              // of the subcomplex and complex 2 to find any matches\n              for (const subComplexInteractor of subComplex.interactors) {\n                for (const complex2Interactor of complex2.interactors) {\n                  if (subComplexInteractor.identifier === complex2Interactor.identifier) {\n                    similarities++;\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        // The interactor of complex 1 is not a subcomplex\n        for (const complex2Interactor of complex2.interactors) {\n          // The interactor of complex 2 is a subcomplex\n          if (complex2Interactor.interactorType === 'stable complex') {\n            const subComplex: Element = this.complexSearch.elements.find(\n              complex => complex.complexAC === complex2Interactor.identifier\n            );\n            if (!!subComplex) {\n              // Complex 2 interactor is a subcomplex, so we need to compare the complex 1 interactor with interactors of this\n              // subcomplex to find any matches\n              for (const subComplexInteractor of subComplex.interactors) {\n                if (subComplexInteractor.identifier === complex1Interactor.identifier) {\n                  similarities++;\n                }\n              }\n            }\n          } else if (complex1Interactor.identifier === complex2Interactor.identifier) {\n            // The interactors of complex 1 and complex 2 are not subcomplexes, and they have the same id, so we add to the similarities\n            similarities++;\n          }\n        }\n      }\n    }\n    return similarities;\n  }\n\n  private classifyComplexesSimilarities(bigComplexes: Element[]): Element[] {\n    const classifiedList: Element[][] = [];\n    // multidimensional array containing groups of complexes having similar interactors\n    for (const complex of bigComplexes) {\n      let similarInteractorFound = false;\n      for (const classification of classifiedList) {\n        const comparedComplex = classification[0];\n        const similarity = this.calculateSimilarity(complex, comparedComplex);\n        if (similarity >= 1) {\n          classification.push(complex);\n          similarInteractorFound = true; // goes to the next complex\n        }\n      }\n      if (!similarInteractorFound) {\n        classifiedList.push([complex]); // fill classifiedList with arrays of all the complexes in the list\n      }\n    }\n    const unique: Element[] = [];\n    for (const classification of classifiedList) {\n      for (const complex of classification) {\n        if (!unique.includes(complex)) {\n          unique.push(complex);\n        }\n      }\n    }\n    return unique;\n  }\n\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-paginator',\n  templateUrl: './complex-paginator.component.html',\n  styleUrls: ['./complex-paginator.component.css']\n})\nexport class ComplexPaginatorComponent implements OnInit, OnChanges {\n  private _lastPageIndex: number;\n  private _currentPageIndex: number;\n  private _pagination: any;\n\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter<number>();\n\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.updatePaginatior();\n  }\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.updatePaginatior();\n  }\n\n  public updatePaginatior(): void {\n    let start: number;\n    let end: number;\n    this.pagination = [];\n    if (this._lastPageIndex < 5) {\n      start = 1;\n      end = this._lastPageIndex;\n\n    } else {\n      if (this._currentPageIndex === 1 || this._currentPageIndex === 2) {\n        start = 1;\n        end = 5;\n      } else if (this._currentPageIndex === this._lastPageIndex || this._currentPageIndex === this._lastPageIndex - 1) {\n        start = this._lastPageIndex - 4;\n        end = this._lastPageIndex;\n      } else {\n        start = this._currentPageIndex - 2;\n        end = this._currentPageIndex + 2;\n      }\n    }\n    while (start <= end) {\n      if (start === this._currentPageIndex) {\n        this._pagination.push([[this._currentPageIndex], [true]]);\n      } else {\n        this._pagination.push([[start], [false]]);\n      }\n      start++;\n    }\n  }\n\n  public getFirstPage(): void {\n    this.onPageChange.emit(1);\n  }\n\n  public getLastPage(): void {\n    this.onPageChange.emit(this.lastPageIndex);\n  }\n\n  public getPage(pageIndex: number) {\n    this.onPageChange.emit(pageIndex);\n  }\n\n  public getPreviousPage(): void {\n    this.onPageChange.emit(this.currentPageIndex - 1);\n  }\n\n  public getNextPage(): void {\n    this.onPageChange.emit(this.currentPageIndex + 1);\n  }\n\n  get lastPageIndex() {\n    return this._lastPageIndex;\n  }\n\n  @Input()\n  set lastPageIndex(value) {\n    this._lastPageIndex = value;\n  }\n\n  get currentPageIndex() {\n    return this._currentPageIndex;\n  }\n\n  @Input()\n  set currentPageIndex(value) {\n    this._currentPageIndex = value;\n  }\n\n  get pagination() {\n    return this._pagination;\n  }\n\n  set pagination(value) {\n    this._pagination = value;\n  }\n}\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, NavigationExtras, Router} from '@angular/router';\nimport {ComplexSearchResult} from '../shared/model/complex-results/complex-search.model';\nimport {ComplexPortalService} from '../shared/service/complex-portal.service';\nimport {ProgressBarComponent} from '../../shared/loading-indicators/progress-bar/progress-bar.component';\nimport {Title} from '@angular/platform-browser';\nimport {AnalyticsService} from '../../shared/google-analytics/service/analytics.service';\nimport {Interactor} from '../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-results',\n  templateUrl: './complex-results.component.html',\n  styleUrls: ['./complex-results.component.css'],\n})\nexport class ComplexResultsComponent implements OnInit, AfterViewInit {\n  LIST_VIEW = 'view_list';\n  COMPLEX_NAVIGATOR_VIEW = 'view_complex_navigator';\n  private _query: string;\n  private _currentPageIndex: number;\n  private _complexSearch: ComplexSearchResult;\n  private _lastPageIndex: number;\n  private _pageSize = 15;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n  private _allInteractorsInComplexSearch: Interactor[] = [];\n  DisplayType: string;\n\n\n  constructor(private route: ActivatedRoute, private router: Router,\n              private complexPortalService: ComplexPortalService, private titleService: Title,\n              private googleAnalyticsService: AnalyticsService,\n  ) {\n  }\n\n  ngOnInit() {\n    this.titleService.setTitle('Complex Portal - Results');\n    this._allInteractorsInComplexSearch = [];\n    this.route\n      .queryParams\n      .subscribe(queryParams => {\n        this._query = queryParams['query'];\n        this._spicesFilter = queryParams['species'] ? queryParams['species'].split('+') : [];\n        this._bioRoleFilter = queryParams['bioRole'] ? queryParams['bioRole'].split('+') : [];\n        this._interactorTypeFilter = queryParams['interactorType'] ? queryParams['interactorType'].split('+') : [];\n        this._currentPageIndex = queryParams['page'] ? Number(queryParams['page']) : 1;\n        // TODO This is out for now, but CP-84 (JIRA )should fix that!!\n        // this.pageSize = queryParams['size'] ? Number(queryParams['size']) : 10;\n        this.requestComplexResults();\n        document.body.scrollTop = 0;\n      });\n    this.route.fragment.subscribe(fragment => {\n      if (fragment === this.COMPLEX_NAVIGATOR_VIEW) {\n        this.DisplayType = this.COMPLEX_NAVIGATOR_VIEW;\n      } else if (fragment === this.LIST_VIEW) {\n        this.DisplayType = this.LIST_VIEW;\n      }\n    });\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  private requestComplexResults() {\n    this.complexPortalService.findComplex(this.query, this.spicesFilter, this.bioRoleFilter,\n      this.interactorTypeFilter, this.currentPageIndex, this.pageSize).subscribe(complexSearch => {\n      this.complexSearch = complexSearch;\n      this._allInteractorsInComplexSearch = [];\n      if (this.complexSearch.totalNumberOfResults !== 0) {\n        this.lastPageIndex = Math.ceil(complexSearch.totalNumberOfResults / this.pageSize);\n        for (let i = 0; i < complexSearch.elements.length; i++) {\n          for (const component of complexSearch.elements[i].interactors) {\n            if (!this._allInteractorsInComplexSearch.some(interactor => interactor.identifier === component.identifier)) {\n              this._allInteractorsInComplexSearch.push(\n                new Interactor(\n                  component.identifier,\n                  component.identifierLink,\n                  component.name,\n                  component.description,\n                  component.interactorType));\n            }\n          }\n        }\n      }\n      ProgressBarComponent.hide();\n    });\n  }\n\n  /**\n   * Prepare query params to build new URL after filter or pagination has changed\n   */\n  private reloadPage(): void {\n    const queryParams: NavigationExtras = {};\n    queryParams['query'] = this._query;\n    queryParams['page'] = this._currentPageIndex;\n    if (this._spicesFilter !== undefined && this._spicesFilter.length !== 0) {\n      queryParams['species'] = this.prepareFiltersForParams(this.spicesFilter);\n    }\n    if (this._bioRoleFilter !== undefined && this._bioRoleFilter.length !== 0) {\n      queryParams['bioRole'] = this.prepareFiltersForParams(this._bioRoleFilter);\n    }\n    if (this._interactorTypeFilter !== undefined && this._interactorTypeFilter.length !== 0) {\n      queryParams['interactorType'] = this.prepareFiltersForParams(this._interactorTypeFilter);\n    }\n    this.router.navigate([], {\n      queryParams,\n      fragment: this.DisplayType\n    });\n    ProgressBarComponent.hide();\n    // This is a test case event for GA, to monitor if users ever use more then one filter.\n    const filterCount = this.getFilterCount();\n    if (1 < filterCount) {\n      this.googleAnalyticsService.fireMultiFilterEvent(filterCount.toString());\n    }\n  }\n\n  private prepareFiltersForParams(filter: string[]): string {\n    return filter.toString().replace(/,/g, '+');\n  }\n\n  private getFilterCount(): number {\n    return this._spicesFilter.length + this._interactorTypeFilter.length + this._bioRoleFilter.length;\n  }\n\n  /**\n   *\n   * @param pageIndex new page index after hitting the paginator to update the URL and reload content\n   */\n  public onPageChange(pageIndex: number): void {\n    this.currentPageIndex = pageIndex;\n    this.reloadPage();\n  }\n\n  public onResetAllFilters(): void {\n    this.spicesFilter = [];\n    this.bioRoleFilter = [];\n    this.interactorTypeFilter = [];\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onSpicesFilterChanged(filter: string[]): void {\n    this.spicesFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onBiologicalRoleFilterChanged(filter: string[]): void {\n    this.bioRoleFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onInteractorTypeFilterChanged(filter: string[]): void {\n    this.interactorTypeFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  get query(): string {\n    return this._query;\n  }\n\n  set query(value) {\n    this._query = value;\n  }\n\n  get currentPageIndex(): number {\n    return this._currentPageIndex;\n  }\n\n  set currentPageIndex(value: number) {\n    this._currentPageIndex = value;\n  }\n\n  get complexSearch(): ComplexSearchResult {\n    return this._complexSearch;\n  }\n\n  set complexSearch(value: ComplexSearchResult) {\n    this._complexSearch = value;\n    this.setFirstDisplayType(); // if only one complex is in the search result, the display is list\n  }\n\n  get lastPageIndex(): number {\n    return this._lastPageIndex;\n  }\n\n  set lastPageIndex(value: number) {\n    this._lastPageIndex = value;\n  }\n\n  get pageSize(): number {\n    return this._pageSize;\n  }\n\n  set pageSize(value: number) {\n    this._pageSize = value;\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n\n  public get allInteractorsInComplexSearch(): Interactor[] {\n    return this._allInteractorsInComplexSearch;\n  }\n\n  set allInteractorsInComplexSearch(value: Interactor[]) {\n    this._allInteractorsInComplexSearch = value;\n  }\n\n  setListView() {\n    this.DisplayType = this.LIST_VIEW;\n    this.reloadPage();\n  }\n\n  setComplexNavigatorView() {\n    this.DisplayType = this.COMPLEX_NAVIGATOR_VIEW;\n    this.reloadPage();\n  }\n\n  setFirstDisplayType(): void {\n    if (this._complexSearch.elements.length === 1) {\n      console.log(this._complexSearch.elements.length);\n      const complexId = this._complexSearch.elements[0].complexAC;\n      window.location.href = `https://complex-portal.github.io/complex-portal-view/complex/${complexId}`; // DEV WEBSITE\n      // window.location.href = `http://localhost:4200/complex/${complexId}`; // LOCAL\n      // window.location.href = `https://www.ebi.ac.uk/complexportal/complex/${complexId}`; // EBI\n    }\n    if (!this.DisplayType) {\n      if (this._complexSearch.elements.length > 1) {\n        this.setComplexNavigatorView();\n      } else {\n        this.setListView();\n      }\n    }\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ComplexResultsComponent} from './complex-results.component';\nimport {RouterModule} from '@angular/router';\nimport {ComplexPaginatorComponent} from './complex-paginator/complex-paginator.component';\nimport {ComplexFilterComponent} from './complex-filter/complex-filter.component';\nimport {ComplexListComponent} from './complex-list/complex-list.component';\nimport {ProgressSpinnerModule} from '../../shared/loading-indicators/progress-spinner/progress-spinner.module';\nimport {ComplexNavigatorComponent} from './complex-navigator/complex-navigator.component';\nimport {TableStructureComponent} from './complex-navigator/table-structure/table-structure.component';\nimport {TableHeaderComponent} from './complex-navigator/table-structure/table-header/table-header.component';\nimport {\n  TableInteractorColumnComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-column.component';\nimport {\n  TableInteractorNameComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component';\nimport {\n  TableInteractorExternalLinkComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component';\nimport {\n  TableInteractorStoichiometryComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component';\nimport {\n  TableMainInteractorComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component';\nimport {\n  TableSubcomponentInteractorComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component';\nimport {ComplexNavigatorSortingComponent} from './complex-navigator-sorting/complex-navigator-sorting.component';\n\n\n@NgModule({\n  imports: [RouterModule.forChild([\n    {path: '', component: ComplexResultsComponent},\n  ]),\n    CommonModule,\n    ProgressSpinnerModule\n  ],\n  exports: [\n    TableStructureComponent\n  ],\n  declarations: [ComplexResultsComponent,\n    ComplexListComponent,\n    ComplexFilterComponent,\n    ComplexPaginatorComponent,\n    ComplexNavigatorComponent,\n    TableStructureComponent,\n    TableHeaderComponent,\n    TableInteractorColumnComponent,\n    TableInteractorNameComponent,\n    TableInteractorExternalLinkComponent,\n    TableInteractorStoichiometryComponent,\n    TableMainInteractorComponent,\n    TableSubcomponentInteractorComponent,\n    ComplexNavigatorSortingComponent,\n  ]\n})\nexport class ComplexResultsModule {\n}\n","export class Interactor {\n  private _identifier: string;\n  private _identifierLink: string;\n  private _name: string;\n  private _description: string;\n  private _interactorType: string;\n\n  constructor(identifier: string,\n              identifierLink: string,\n              name: string,\n              description: string,\n              interactorType: string) {\n    this._identifier = identifier;\n    this._identifierLink = identifierLink;\n    this._name = name;\n    this._description = description;\n    this._interactorType = interactorType;\n  }\n\n  get identifier(): string {\n    return this._identifier;\n  }\n\n  get identifierLink(): string {\n    return this._identifierLink;\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  get description(): string {\n    return this._description;\n  }\n\n  get interactorType(): string {\n    return this._interactorType;\n  }\n\n}\n","export default \"<div class=\\\"filters row\\\">\\n  <div class=\\\"columns medium-6\\\"><h3>Filters</h3></div>\\n  <div class=\\\"columns medium-6\\\">\\n    <div *ngIf=\\\"anyFiltersSelected()\\\">\\n      <a class=\\\"button\\\" (click)=\\\"resetAllFilters()\\\"><i class=\\\"icon icon-functional\\\" data-icon=\\\"d\\\"></i> Reset filters</a>\\n    </div>\\n  </div>\\n  <div class=\\\"columns medium-12\\\">\\n    <div *ngIf=\\\"facets.species_f\\\">\\n      <b>Species</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.species_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, spicesFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\"> {{ facet.name }} ({{ facet.count }})\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div *ngIf=\\\"facets.pbiorole_f\\\">\\n      <b>Biological Role</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.pbiorole_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, bioRoleFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\"> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n\\n    <div *ngIf=\\\"facets.ptype_f\\\">\\n      <b>Interactor Type</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.ptype_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, interactorTypeFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ facetTypeIcon(facet) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\"> {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ facetTypeIcon(facet) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n    <div *ngIf=\\\"!facets.species_f && !facets.pbiorole_f && !facets.ptype_f\\\">\\n      <h6>No filters available</h6>\\n    </div>\\n  </div>\\n</div>\\n\";","export default \"<ul class=\\\"no-bullet\\\">\\n  <li *ngFor=\\\"let complex of complexSearch.elements\\\">\\n    <h3><a [routerLink]=\\\"['/complex', complex.complexAC]\\\">{{ complex.complexName }}</a></h3>\\n    <div class=\\\"description\\\" style=\\\"background-color: white\\\">\\n      <b>Complex AC:</b> {{ complex.complexAC }} / <b>Organism:</b> ({{ complex.organismName }})<br>\\n      <b>Description:</b>\\n      <div *ngIf=\\\"complex.description.length <= 250\\\">\\n        {{ complex.description }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n      <div *ngIf=\\\"complex.description.length > 250\\\">\\n        {{ complex.description.substr(0, 250) }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n    </div>\\n  </li>\\n</ul>\\n\";","export default \"<div class=\\\"filters\\\">\\n\\n  <div class=\\\"sortingInteractors\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Sort interactors\\\" class=\\\"button\\\">\\n    <div class=\\\"typeOfSorting\\\">\\n      <input type=\\\"submit\\\" name=\\\"occurrenceClassification\\\" value=\\\"Occurrence\\\" class=\\\"button\\\"\\n             (click)=\\\"InteractorsSorting('Occurrence')\\\">\\n      <input type=\\\"submit\\\" name=\\\"typeClassification\\\" value=\\\"Type\\\" class=\\\"button\\\"\\n             (click)=\\\"InteractorsSorting('Type')\\\">\\n      <input type=\\\"submit\\\" name=\\\"organismClassification\\\" value=\\\"Organism\\\" class=\\\"button\\\"\\n             (click)=\\\"InteractorsSorting('Organism')\\\">\\n      <input type=\\\"submit\\\" name=\\\"geneClassification\\\" value=\\\"Orthology (Not available yet)\\\" class=\\\"button\\\"\\n             (click)=\\\"InteractorsSorting('Orthology')\\\">\\n    </div>\\n  </div>\\n\\n  <div class=\\\"dropdown\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Display Options\\\" class=\\\"button\\\">\\n    <ul class=\\\"displaySize\\\">\\n      <li>\\n        <input type=\\\"radio\\\" name=\\\"organism\\\" value=\\\"Detailed view\\\" class=\\\"checkbox compact\\\" (click)=\\\"compactDisplay()\\\">\\n        Compact display\\n      </li>\\n      <li class=\\\"detailedDisplay\\\">\\n        <input type=\\\"radio\\\" name=\\\"organism\\\" value=\\\"Detailed view\\\" class=\\\"checkbox detailed\\\" (click)=\\\"detailedDisplay()\\\"\\n               checked>\\n        Detailed display\\n        <ul class=\\\"detailedDisplayOptions\\\">\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"organism\\\" value=\\\"organism\\\" class=\\\"checkbox\\\" [checked]=\\\"organismIconDisplay\\\"\\n                   (change)=\\\"DisplayingOrganism()\\\">\\n            Organism\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"type\\\" value=\\\"type\\\" class=\\\"checkbox\\\" [checked]=\\\"interactorTypeDisplay\\\"\\n                   (change)=\\\"DisplayingType()\\\">\\n            Type\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"type\\\" value=\\\"type\\\" class=\\\"checkbox\\\" [checked]=\\\"IDDisplay\\\"\\n                   (change)=\\\"DisplayingID()\\\">\\n            Interactor ID\\n          </li>\\n        </ul>\\n      </li>\\n    </ul>\\n  </div>\\n\\n</div>\\n\";","export default \"<div class=\\\"ComplexNavigator\\\">\\n  <cp-complex-navigator-sorting\\n    [(interactorsSorting)]=\\\"interactorsSorting\\\"\\n    [(organismIconDisplay)]=\\\"organismIconDisplay\\\"\\n    [(interactorTypeDisplay)]=\\\"interactorTypeDisplay\\\"\\n    [(IDDisplay)]=\\\"IDDisplay\\\">\\n  </cp-complex-navigator-sorting>\\n  <cp-table-structure [complexSearch]=\\\"complexSearch\\\"\\n                      [interactors]=\\\"interactors\\\"\\n                      [interactorsSorting]=\\\"interactorsSorting\\\"\\n                      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                      [IDDisplay]=\\\"IDDisplay\\\">\\n  </cp-table-structure>\\n</div>\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"table CN-table\\\">\\n    <!-- When table is not overflowing -->\\n    <thead class=\\\"tableHead\\\" *ngIf=\\\"complexes.length<=6\\\">\\n    <tr>\\n      <th class=\\\"interactorsHeader horizontal\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 135px; max-width: 135px;   border-bottom: 3px solid #007c82;':''\\\">\\n        Interactors\\n      </th>\\n      <th class=\\\"horizontal\\\" *ngFor=\\\"let complex of complexes\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           title=\\\"{{complex.complexAC}}\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n              <div class=\\\"line\\\"></div>\\n                <div class=\\\"horizontal-label\\\">\\n                  <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                  {{ complex.complexName }}\\n                </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n    </tr>\\n    </thead>\\n    <!-- When table is overflowing -->\\n    <thead class=\\\"tableHeadOverflow\\\" *ngIf=\\\"complexes.length>6\\\">\\n    <tr [style.--cols]=\\\"complexes.length\\\">\\n      <th class=\\\"interactorsHeader\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\\\">\\n        Interactors\\n      </th>\\n      <th class=\\\"rotate\\\" *ngFor=\\\"let complex of complexes\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'left:-1px':''\\\"\\n          title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span>\\n              <div class=\\\"tilted-label\\\" title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"\\n                   title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\"></i>\\n                {{ complex.complexName }}\\n              </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n      <div class=\\\"spaceHolder\\\"></div>\\n    </tr>\\n    </thead>\\n  </table>\\n</div>\\n\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"interactors-table\\\">\\n    <!-- Interactors' column -->\\n    <ng-container *ngFor=\\\" let interactor of enrichedInteractors; let i=index\\\">\\n      <tr *ngIf=\\\"!interactor.hidden\\\">\\n        <ng-container *ngFor=\\\"let oneType of ranges\\\" class=\\\"interactorsOrdering\\\">\\n          <td *ngIf=\\\"oneType[2]===i\\\" [attr.rowspan]=\\\"oneType[1]\\\" class=\\\"interactorSeparation\\\"\\n              title=\\\"{{oneType[0]}}\\\">\\n            <div class=\\\"interactorNameContainer\\\" [style.--rowspanSize]=\\\"oneType[1]\\\">\\n              {{ oneType[0] }}\\n            </div>\\n          </td>\\n        </ng-container>\\n        <td class=\\\"interactorsColumn\\\" [ngClass]=\\\"{horizontalHeader : complexes.length<6}\\\">\\n          <cp-table-interactor-name\\n            [interactorName]=\\\"interactor.interactor.name\\\"\\n            [interactorType]=\\\"interactor.interactor.interactorType\\\"\\n            [interactorId]=\\\"interactor.interactor.identifier\\\"\\n            [interactorOrganism]=\\\"interactor.organismName\\\"\\n            [identifierLink]=\\\"interactor.interactor.identifierLink\\\"\\n            [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n            [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n            [IDDisplay]=\\\"IDDisplay\\\"\\n          ></cp-table-interactor-name>\\n          <!-- Icon for the expandable -->\\n          <div class=\\\"container\\\" *ngIf=\\\"interactor.isSubComplex\\\">\\n            <a title=\\\"{{ interactor.interactor.name }} interactors\\\" (click)=\\\"toggleSubcomplexExpandable(i)\\\">\\n              Interactors\\n              <i class=\\\"icon icon-common\\\" data-icon=\\\"&#xf078;\\\"\\n                 style=\\\"font-size:small;\\n                \\\"></i>\\n            </a>\\n          </div>\\n        </td>\\n        <!-- Interactors' stoichiometry -->\\n        <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n          <td class=\\\"intStoich\\\">\\n            <cp-table-main-interactor\\n              [complex]=\\\"complex\\\"\\n              [i]=\\\"i\\\"\\n              [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n            ></cp-table-main-interactor>\\n          </td>\\n        </ng-container>\\n        <div class=\\\"spaceHolder\\\" *ngIf=\\\"complexes.length>6\\\"></div>\\n      </tr>\\n      <!-- Expandable menu for subcomplexes -->\\n      <ng-container *ngIf=\\\"interactor.expanded\\\">\\n        <ng-container *ngIf=\\\"!!interactor.subComponents\\\">\\n          <tr *ngFor=\\\"let el of interactor.subComponents; let j=index\\\"\\n              class=\\\"expandedRows\\\"\\n              [ngClass]=\\\"{'firstExpandedRow': j === 0, 'lastExpandedRow': j === interactor.subComponents.length - 1}\\\">\\n            <td [attr.rowspan]=\\\"interactor.subComponents.length\\\" class=\\\"interactorSeparation\\\"\\n                title=\\\"{{interactor.interactor.name}} interactors\\\"\\n                *ngIf=\\\"j === 0 && (interactorsSorting === 'Type' || interactorsSorting === 'Organism')\\\">\\n              <div class=\\\"interactorSeparationName\\\"\\n                   [style.--rowspanSize]=\\\"interactor.subComponents.length\\\"> {{ interactor.interactor.name }} interactors\\n              </div>\\n            </td>\\n            <td class=\\\"subComponentColumn\\\">\\n              <div>\\n                <cp-table-interactor-name\\n                  [interactorName]=\\\"el.name\\\"\\n                  [interactorType]=\\\"el.interactorType\\\"\\n                  [interactorId]=\\\"el.identifier\\\"\\n                  [interactorOrganism]=\\\"interactor.organismName\\\"\\n                  [identifierLink]=\\\"el.identifierLink\\\"\\n                  [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                  [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                  [IDDisplay]=\\\"IDDisplay\\\"\\n                ></cp-table-interactor-name>\\n              </div>\\n              <cp-table-interactor-external-link\\n                [interactorId]=\\\"el.identifier\\\"\\n                [interactorType]=\\\"el.interactorType\\\"\\n                [identifierLink]=\\\"el.identifierLink\\\"\\n              ></cp-table-interactor-external-link>\\n            </td>\\n            <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n              <td class=\\\"intStoich\\\">\\n                <cp-table-subcomponent-interactor\\n                  [complex]=\\\"complex\\\"\\n                  [i]=\\\"i\\\"\\n                  [j]=\\\"j\\\"\\n                  [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n                ></cp-table-subcomponent-interactor>\\n              </td>\\n            </ng-container>\\n            <div class=\\\"spaceHolder\\\" *ngIf=\\\"complexes.length>6\\\"></div>\\n          </tr>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n  </table>\\n</div>\\n\";","export default \"<div class=\\\"externalLinkContainer\\\">\\n  <a *ngIf=\\\"externalLinkVisible && IDDisplay\\\" href=\\\"{{identifierLink}}\\\" target=\\\"_blank\\\" class=\\\"externalLinkContainer\\\">\\n    {{ interactorId }}\\n    <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\" title=\\\"More information about {{interactorId}}\\\"></i>\\n  </a>\\n</div>\\n\";","export default \"<div class=\\\"container\\\">\\n  <div class=\\\"nameAndIcons\\\" [ngClass]=\\\"{inlineDisplay: interactorType==='stable complex'}\\\">\\n    <i *ngIf=\\\"organismIconDisplay\\\"\\n       class=\\\"{{interactorOrganismIcon}}\\\"\\n       title=\\\"{{interactorOrganism}}\\\"></i>\\n\\n    <i *ngIf=\\\"interactorTypeDisplay\\\"\\n       class=\\\"{{interactorTypeIcon}}\\\"\\n       title=\\\"{{interactorType}}\\\"></i>\\n\\n    <div class=\\\"name\\\" title=\\\"{{interactorName}}\\\" *ngIf=\\\"IDDisplay\\\"> {{ interactorName }}\\n    </div>\\n    <div class=\\\"name\\\" title=\\\"More information about {{interactorId}}\\\" *ngIf=\\\"!IDDisplay\\\">\\n      <a *ngIf=\\\"!IDDisplay\\\" href=\\\"{{identifierLink}}\\\" target=\\\"_blank\\\"\\n         class=\\\"externalLinkContainer\\\">\\n        {{ interactorName }}\\n      </a>\\n    </div>\\n\\n    <a [routerLink]=\\\"['/complex/search']\\\"\\n       [queryParams]=\\\"{query: interactorId, page: 1}\\\"\\n       [fragment]=\\\"'view_complex_navigator'\\\"\\n       target=\\\"_blank\\\">\\n      <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n         title=\\\"Complexes containing this interactor\\\"></i>\\n    </a>\\n  </div>\\n  <cp-table-interactor-external-link\\n    [interactorId]=\\\"interactorId\\\"\\n    [identifierLink]=\\\"identifierLink\\\"\\n    [interactorType]=\\\"interactorType\\\"\\n    [isMainInteractor]=\\\"isMainInteractor\\\"\\n    [IDDisplay]=\\\"IDDisplay\\\"\\n    (externalLinkVisible)=\\\"externalLinkVisibleHandler($event)\\\">\\n  </cp-table-interactor-external-link>\\n</div>\\n\";","export default \"<ng-container>\\n  <div class=\\\"stoichNum\\\" title=\\\"{{ stoichiometryText }}\\\">\\n    {{ stoichiometryValue }}\\n  </div>\\n</ng-container>\\n\";","export default \"<div [ngClass]=\\\"displayTopLineClass(complex, i)\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!findInteractorInComplex(complex.complex, interactor.interactor.identifier)\\\"\\n  [stoichiometryText]=\\\"getStoichiometry(complex.complex, interactor.interactor.identifier)\\\"\\n  [stoichiometryValue]=\\\"stoichiometryOfInteractors(complex.complex, interactor.interactor.identifier)\\\"\\n></cp-table-interactor-stoichiometry>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!findInteractorInComplex(complex.complex, interactor.interactor.identifier) && findInteractorsInSubComplex(complex.complex, interactor.interactor.identifier).length > 0\\\"\\n  [stoichiometryText]=\\\"getStoichiometrySubComplex(complex.complex, interactor.interactor.identifier)\\\"\\n  [stoichiometryValue]=\\\"stoichiometryOfInteractorsMainTable(complex.complex, interactor.interactor.identifier)\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"displayBottomLineClass(complex, i)\\\"></div>\\n\";","export default \"<div [ngClass]=\\\"displayTopLineClass\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"interactorInComplex\\\"\\n  [stoichiometryText]=\\\"interactorStoichiometryText\\\"\\n  [stoichiometryValue]=\\\"interactorStoichiometryValue\\\"\\n></cp-table-interactor-stoichiometry>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"interactorInSubComplex\\\"\\n  [stoichiometryText]=\\\"subComplexInteractorStoichiometryText\\\"\\n  [stoichiometryValue]=\\\"subComplexInteractorStoichiometryValue\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"displayBottomLineClass\\\"></div>\\n\";","export default \"<div class=\\\"complexNavigatorTable\\\">\\n  <div class=\\\"header\\\"\\n       (scroll)=\\\"body.scrollLeft = header.scrollLeft\\\" #header>\\n\\n    <cp-table-header [complexes]=\\\"sortedComplexes\\\"\\n                     [interactorsSorting]=\\\"interactorsSorting\\\">\\n    </cp-table-header>\\n  </div>\\n  <div class=\\\"interactors\\\"\\n       (scroll)=\\\"header.scrollLeft = body.scrollLeft\\\" #body>\\n    <cp-table-interactor-column\\n      [complexes]=\\\"sortedComplexes\\\"\\n      [interactors]=\\\"interactors\\\"\\n      [interactorsSorting]=\\\"interactorsSorting\\\"\\n      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n      [IDDisplay]=\\\"IDDisplay\\\">\\n    </cp-table-interactor-column>\\n  </div>\\n  <div class=\\\"spaceHolder\\\"></div>\\n</div>\\n\\n\";","export default \"<div>\\n  <h5 class=\\\"text-center\\\">{{ currentPageIndex }} of {{ lastPageIndex }}</h5>\\n  <ul class=\\\"pagination text-center\\\" role=\\\"navigation\\\" aria-label=\\\"Pagination\\\">\\n    <li class=\\\"arrow unavailable\\\" *ngIf=\\\"currentPageIndex != 1\\\" aria-disabled=\\\"true\\\"><a\\n      (click)=\\\"getFirstPage()\\\">&Lang; First</a></li>\\n    <li class=\\\"arrow unavailable\\\" *ngIf=\\\"currentPageIndex != 1\\\" aria-disabled=\\\"true\\\"><a\\n      (click)=\\\"getPreviousPage()\\\">&lang; Previous</a></li>\\n    <ng-container *ngFor=\\\"let index of pagination\\\">\\n      <li *ngIf=\\\"index[1] == 'true'\\\" class=\\\"current\\\"><span class=\\\"show-for-sr\\\">You're on page</span>{{ index[0] }}</li>\\n      <li *ngIf=\\\"index[1] == 'false'\\\"><a (click)=\\\"getPage(index[0])\\\">{{ index[0] }}</a></li>\\n    </ng-container>\\n    <li class=\\\"arrow\\\" *ngIf=\\\"currentPageIndex != lastPageIndex\\\"><a (click)=\\\"getNextPage()\\\">Next &rang;</a></li>\\n    <li class=\\\"arrow\\\" *ngIf=\\\"currentPageIndex != lastPageIndex\\\"><a (click)=\\\"getLastPage()\\\">Last &Rang;</a></li>\\n  </ul>\\n</div>\\n\";","export default \"<div class=\\\"margin-top-large margin-bottom-large row\\\">\\n  <ng-container *ngIf=\\\"complexSearch;else loadingSpinner\\\">\\n    <div class=\\\"columns medium-12\\\" *ngIf=\\\"complexSearch.totalNumberOfResults !== 0\\\">\\n      <h2 class=\\\"padding-left-large\\\">Total number of results: {{ complexSearch.totalNumberOfResults }} </h2>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"displayButton columns medium-8\\\" style=\\\"text-align: center\\\">\\n          <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button\\\"\\n                  (click)=\\\"setListView()\\\" [ngClass]=\\\"{'selected': DisplayType === LIST_VIEW}\\\">\\n            View list\\n          </button>\\n          <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button\\\"\\n                  (click)=\\\"setComplexNavigatorView()\\\" [ngClass]=\\\"{'selected': DisplayType === COMPLEX_NAVIGATOR_VIEW}\\\">\\n            View Complex Navigator\\n            <span class=\\\"new-tag\\\" [ngClass]=\\\"{'new-tag-selected': DisplayType === COMPLEX_NAVIGATOR_VIEW}\\\">NEW!</span>\\n          </button>\\n        </div>\\n      </div>\\n      <div class=\\\"columns medium-4\\\">\\n        <cp-complex-filter *ngIf=\\\"spicesFilter && bioRoleFilter && interactorTypeFilter\\\"\\n                           [spicesFilter]=\\\"spicesFilter\\\"\\n                           [bioRoleFilter]=\\\"bioRoleFilter\\\"\\n                           [interactorTypeFilter]=\\\"interactorTypeFilter\\\" [facets]=\\\"complexSearch.facets\\\"\\n                           (onResetAllFilters)=\\\"onResetAllFilters()\\\"\\n                           (onSpicesFilterChanged)=\\\"onSpicesFilterChanged($event)\\\"\\n                           (onBiologicalRoleFilterChanged)=\\\"onBiologicalRoleFilterChanged($event)\\\"\\n                           (onInteractorTypeFilterChanged)=\\\"onInteractorTypeFilterChanged($event)\\\">\\n        </cp-complex-filter>\\n      </div>\\n      <div class=\\\"columns medium-8\\\">\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n        <cp-complex-list class=\\\"listOfResults\\\" *ngIf=\\\"DisplayType===LIST_VIEW\\\"\\n                         [complexSearch]=\\\"complexSearch\\\">\\n        </cp-complex-list>\\n        <cp-complex-navigator class=\\\"Complex-navigator\\\" *ngIf=\\\"DisplayType===COMPLEX_NAVIGATOR_VIEW\\\"\\n                              [complexSearch]=\\\"complexSearch\\\"\\n                              [interactors]=\\\"allInteractorsInComplexSearch\\\">\\n        </cp-complex-navigator>\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"columns medium-12 callout alert\\\" *ngIf=\\\"complexSearch.totalNumberOfResults === 0\\\">\\n      <h2>No Complex Portal results found</h2>\\n      <h3>We're sorry but we couldn't find anything that matched your search for: <b>{{ query }}</b></h3>\\n      <h4>Please consider refining your terms:</h4>\\n      <ul>\\n        <li>Make sure all words are spelled correctly</li>\\n        <li>Try different keywords</li>\\n        <li>Be more precise: use gene or protein IDs, e.g. Ndc80 or Q04571</li>\\n        <li>Remove quotes around phrases to search for each word individually. bike shed will often show more results\\n          than\\n          \\\"bike shed\\\"\\n        </li>\\n      </ul>\\n    </div>\\n  </ng-container>\\n  <ng-template #loadingSpinner>\\n    <cp-progress-spinner [query]=\\\"query\\\"></cp-progress-spinner>\\n  </ng-template>\\n</div>\\n\";"],"names":[],"sourceRoot":"webpack:///"}