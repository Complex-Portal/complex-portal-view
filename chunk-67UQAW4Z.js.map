{
  "version": 3,
  "sources": ["angular:jit:template:file:src/app/complex/complex-results/complex-navigator/complex-navigator.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/complex-navigator.component.css", "src/app/complex/complex-results/complex-navigator/complex-navigator.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.css", "src/app/complex/complex-portal-utils.ts", "src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/complex-navigator-utils.ts", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.css", "src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.css", "src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.ts", "angular:jit:template:file:src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.html", "angular:jit:style:file:src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.css", "src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.ts", "src/app/complex/complex-results/complex-navigator/complex-navigator.module.ts"],
  "sourcesContent": ["<div class=\"ComplexNavigator\">\n  <div class=\"Buttons\" [ngClass]=\"complexSearch.totalNumberOfResults <=6 ? 'smallCNButtons' : ''\">\n    <cp-complex-navigator-buttons\n      [(interactorsSorting)]=\"interactorsSorting\"\n      [(organismIconDisplay)]=\"organismIconDisplay\"\n      [(interactorTypeDisplay)]=\"interactorTypeDisplay\"\n      [(IDDisplay)]=\"IDDisplay\">\n    </cp-complex-navigator-buttons>\n  </div>\n  <cp-table-structure [complexSearch]=\"complexSearch\"\n                      [interactors]=\"interactors\"\n                      [interactorsSorting]=\"interactorsSorting\"\n                      [organismIconDisplay]=\"organismIconDisplay\"\n                      [interactorTypeDisplay]=\"interactorTypeDisplay\"\n                      [IDDisplay]=\"IDDisplay\"\n                      [canAddComplexesToBasket]=\"canAddComplexesToBasket\"\n                      [canRemoveComplexesFromBasket]=\"canRemoveComplexesFromBasket\"\n                      (onComplexRemovedFromBasket)=\"onComplexRemovedFromBasket.emit($event)\">\n  </cp-table-structure>\n</div>\n\n", "/*# sourceMappingURL=complex-navigator.component.css.map */\n", "import {Component, EventEmitter, Input, output, Output} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-navigator',\n  templateUrl: './complex-navigator.component.html',\n  styleUrls: ['./complex-navigator.component.css']\n})\n\nexport class ComplexNavigatorComponent {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket = output<string>();\n\n  interactorsSorting = 'Occurrence';\n  organismIconDisplay = true;\n  interactorTypeDisplay = true;\n  IDDisplay = true;\n}\n", "<div class=\"complexNavigatorTable\">\n  <div class=\"header\"\n       (scroll)=\"body.scrollLeft = header.scrollLeft\" #header>\n\n    <cp-table-header [complexes]=\"sortedComplexes\"\n                     [interactorsSorting]=\"interactorsSorting\"\n                     [canAddComplexesToBasket]=\"canAddComplexesToBasket\"\n                     [canRemoveComplexesFromBasket]=\"canRemoveComplexesFromBasket\"\n                     (onComplexRemovedFromBasket)=\"onComplexRemovedFromBasket.emit($event)\">\n    </cp-table-header>\n  </div>\n  <div class=\"interactors\"\n       (scroll)=\"header.scrollLeft = body.scrollLeft\" #body>\n    <cp-table-interactor-column\n      [complexes]=\"sortedComplexes\"\n      [interactors]=\"interactors\"\n      [interactorsSorting]=\"interactorsSorting\"\n      [organismIconDisplay]=\"organismIconDisplay\"\n      [interactorTypeDisplay]=\"interactorTypeDisplay\"\n      [IDDisplay]=\"IDDisplay\">\n    </cp-table-interactor-column>\n  </div>\n  <div class=\"spaceHolder\"></div>\n</div>\n\n", ".complexNavigatorTable{border-collapse:separate;height:100%}.header{position:sticky;top:20px;z-index:2;overflow-x:auto;overflow-y:hidden;transform:rotateX(180deg)}.interactors{z-index:1;position:relative;overflow-y:hidden}\n/*# sourceMappingURL=table-structure.component.css.map */\n", "import {Component, EventEmitter, Input, OnChanges, Output} from '@angular/core';\nimport {ComplexSearchResult} from '../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../shared/model/complex-results/interactor.model';\nimport {Element} from '../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../shared/model/complex-results/complex-component.model';\n\n@Component({\n  selector: 'cp-table-structure',\n  templateUrl: './table-structure.component.html',\n  styleUrls: ['./table-structure.component.css']\n})\nexport class TableStructureComponent implements OnChanges {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  sortedComplexes: Element[] = [];\n\n  ngOnChanges(): void {\n    this.sortedComplexes = this.classifyComplexesSimilaritiesV2(this.complexSearch.elements);\n  }\n\n  private getComponentAsComplex(component: ComplexComponent): Element | undefined {\n    return this.complexSearch.elements.find(interactor => interactor.complexAC === component.identifier);\n  }\n\n  private getAllComponents(complex?: Element, components: ComplexComponent[] = []): ComplexComponent[] {\n    for (const component of complex.interactors) {\n      if (component.interactorType === 'stable complex') {\n        const subComplex = this.getComponentAsComplex(component);\n        if (subComplex) {\n          components.push(...this.getAllComponents(subComplex));\n        } else {\n          components.push(component);\n        }\n      } else {\n        components.push(component);\n      }\n    }\n    return components;\n  }\n\n  private calculateSimilarity(complex1: Element, complex2: Element) {\n    if (complex1 === complex2) {\n      return new Set(this.getAllComponents(complex1)).size;\n    }\n\n    const [components1, components2] =\n      [complex1, complex2]\n        .map(complex => new Set(this.getAllComponents(complex).map(c => c.identifier)));\n\n    return [...components1.values()].reduce((s, c1) => components2.has(c1) ? s + 1 : s, 0);\n  }\n\n  classifyComplexesSimilaritiesV2(complexesList: Element[]) {\n    const comparedComplexes: [Element, Element, number][] = [];\n    for (const complex of complexesList) {\n      for (const comparedComplex of complexesList) {\n        // for unique comparison\n        if (complex.complexAC >= comparedComplex.complexAC) {\n          comparedComplexes.push([complex, comparedComplex, this.calculateSimilarity(complex, comparedComplex)]);\n        }\n      }\n    }\n    comparedComplexes.sort((a, b) => b[2] - a[2]); // sorting by similarityScore\n    const complexesOrderedSet = this.uniqueComplexesListOrderedBySimilarity(comparedComplexes);\n    // to be used in the table as a 1D array\n    return Array.from(complexesOrderedSet);\n  }\n\n  uniqueComplexesListOrderedBySimilarity(complexesListSimilarities: [Element, Element, number][]) {\n    const complexesOrderedSet = new Set<Element>();\n    for (let i = 0; i < complexesListSimilarities.length; i++) {\n      const [complex1, complex2, similarityScore] = complexesListSimilarities[i];\n      if (similarityScore !== 0) {\n        complexesOrderedSet.add(complex1);\n        complexesOrderedSet.add(complex2);\n        for (let j = i + 1; j < complexesListSimilarities.length; j++) {\n          const [complex3, complex4, similarityScore2nd] = complexesListSimilarities[j];\n          if (complex1 === complex3 && similarityScore2nd !== 0) {\n            complexesOrderedSet.add(complex4);\n          }\n        }\n        if (complexesOrderedSet.size === this.complexSearch.elements.length) {\n          // All complexes have been added, we can return and stop the loops\n          return complexesOrderedSet;\n        }\n      }\n      if (complexesOrderedSet.size === this.complexSearch.elements.length) {\n        // All complexes have been added, we can return and stop the loops\n        return complexesOrderedSet;\n      }\n    }\n    return complexesOrderedSet;\n  }\n}\n", "<div class=\"Complex-navigator\">\n  <table class=\"table CN-table\">\n    <!-- When table is not overflowing -->\n    <thead class=\"tableHead\" *ngIf=\"complexes.length<=6\">\n    <tr>\n      <th *ngIf=\"isInteractorSortingSet()\" class=\"spaceHolderSorting\"></th>\n      <th class=\"interactorsHeader horizontal\">\n        Components\n      </th>\n      <th class=\"horizontal\" *ngFor=\"let complex of complexes\" [class.predicted]=\"complex.predictedComplex\">\n        <div class=\"horizontal-label\">\n          <a [routerLink]=\"['/complex', complex.complexAC]\"\n             target=\"_blank\">\n            <div>\n              <span [matTooltip]=\"complex.complexName+ ' - '+ complex.complexAC + ' - ' + complex.organismName\">\n                <div class=\"line\"></div>\n                <i class=\"{{iconOrganism(complex.organismName)}}\"></i>\n                <i class=\"icon icon-generic small\" data-icon=\"x\"></i>\n                {{ complex.complexName }}\n              </span>\n            </div>\n          </a>\n        </div>\n        <div class=\"basketButton\">\n          <a class=\"button\" (click)=\"toggleBasket(complex)\">\n            <i class=\"icon icon-common\" [attr.data-icon]=\"isInBasket(complex.complexAC) ? '\uF1F8':'\uF217'\"></i>\n          </a>\n        </div>\n      </th>\n    </tr>\n    </thead>\n    <!-- When table is overflowing -->\n    <thead class=\"tableHeadOverflow\" *ngIf=\"complexes.length > 6\"\n           [ngClass]=\"isInteractorSortingSet() ? 'tableHeadOverflowWithSorting' : 'tableHeadOverflow'\">\n    <tr [style.--cols]=\"complexes.length\"\n        [style.--intHeader]=\"isInteractorSortingSet() ? '156px':''\"\n        [style.--sizeSpaceHolder]=\"'185px'\">\n      <th class=\"spaceHolderHeaderOverflow\"\n          [style]=\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\">\n      </th>\n      <th class=\"rotate\" *ngFor=\"let complex of complexes\"\n          [class.predicted]=\"complex.predictedComplex\"\n          [style.--cols]=\"complexes.length\">\n        <a [routerLink]=\"['/complex', complex.complexAC]\"\n           [matTooltip]=\"complex.complexName+ ' - '+ complex.complexAC\"\n           target=\"_blank\">\n          <div>\n            <span>\n              <div class=\"tilted-label\">\n                <i class=\"icon icon-generic small\" data-icon=\"x\"></i>\n                {{ complex.complexName }}\n              </div>\n            </span>\n          </div>\n        </a>\n      </th>\n      <div class=\"spaceHolder\"></div>\n    </tr>\n    <!-- icons row -->\n    <tr [style.--cols]=\"complexes.length\"\n        [style.--intHeader]=\"isInteractorSortingSet() ? '156px':''\"\n        [style.--sizeSpaceHolder]=\"'185px'\">\n      <th class=\"interactorsHeader overflow\"\n          [style]=\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\">\n        Components\n      </th>\n      <ng-container *ngFor=\" let complex of complexes;\">\n        <th class=\"iconOrganism\" [class.predicted]=\"complex.predictedComplex\">\n          <div>\n            <a class=\"button\" (click)=\"toggleBasket(complex)\">\n              <i class=\"icon icon-common\" [attr.data-icon]=\"isInBasket(complex.complexAC) ? '\uF1F8':'\uF217'\"></i>\n            </a>\n          </div>\n          <div>\n            <i class=\"{{iconOrganism(complex.organismName)}}\" [matTooltip]=\"complex.organismName\"></i>\n          </div>\n        </th>\n      </ng-container>\n      <div class=\"spaceHolder\"></div>\n    </tr>\n    </thead>\n  </table>\n</div>\n\n\n", ".CN-table{transform:rotateX(180deg)}thead{border:0;background-color:#fff;border-right:0 solid white;overflow:scroll}.CN-table{clip-path:fill-box;overflow:scroll}.spaceHolderSorting{width:3ch;border-bottom:3px solid var(--primary)}.spaceHolderHeaderOverflow{min-width:130px;max-width:130px;position:sticky;left:0;z-index:4;color:var(--primary);background-color:var(--on-primary);padding-top:173px;text-align:right}.iconOrganism{position:sticky;text-align:center;background-color:var(--primary);color:var(--on-primary);border-left:1px solid white;font-size:medium;height:60px}.tilted-label{text-overflow:ellipsis;width:28ch;white-space:nowrap;overflow:hidden}.CN-table .tableHeadOverflow tr{--cols: 1;--intHeader: 130px;--parentWidth: 100%;--sizeSpaceHolder: calc(var(--parentWidth) - 70px * var(--cols) - var(--intHeader));display:grid;grid-template-columns:var(--intHeader) repeat(auto-fit,70px);width:calc(var(--intHeader) + 70px * var(--cols) + var(--sizeSpaceHolder));overflow:hidden}.CN-table .tableHeadOverflowWithSorting tr{--cols: 1;--intHeader: 130px;--parentWidth: 100%;--sizeSpaceHolder: calc(var(--parentWidth) - 70px * var(--cols) - var(--intHeader));display:grid;grid-template-columns:var(--intHeader) repeat(auto-fit,70px);width:calc(var(--intHeader) + 70px * var(--cols) + var(--sizeSpaceHolder) - 3ch);overflow:hidden}.CN-table .tableHeadOverflow th.rotate{position:relative;width:350px;height:51px!important;color:var(--on-primary);font-size:14px;text-align:left;border:1px solid white;top:70px;left:-52px;display:flex;align-items:center;align-content:center;padding:0;transform:rotate(-45deg);border-collapse:collapse}.CN-table .tableHeadOverflow th.rotate a{width:100%;height:100%;align-content:center;background-color:var(--primary);padding:0 0 0 70px;border:none}.spaceHolder{width:183px;background-color:var(--primary);border-left:1px solid white}.interactorsHeader.overflow{min-width:130px;max-width:130px;width:130px;position:sticky;left:0;z-index:4;background-color:var(--on-primary);border-bottom:3px solid var(--primary);height:60px;line-height:70px;text-align:right;color:var(--primary)}.CN-table th.horizontal.interactorsHeader{padding:5px;min-width:130px;max-width:130px;font-size:medium;border-left:none;text-align:right;color:var(--primary);background-color:var(--on-primary);border-bottom:3px solid var(--primary)}.horizontal-label{text-align:center;text-overflow:ellipsis;width:90%;white-space:nowrap;overflow:hidden;margin:auto}.CN-table th.horizontal{color:#fff;background-color:var(--primary);border-left:1px solid white;min-width:80px;max-width:80px;height:35px;font-size:15px}a:visited,a{color:var(--on-primary)}.basket-icons{margin-left:5px}.button{padding:0;margin:0}.basketButton{text-align:center}\n/*# sourceMappingURL=table-header.component.css.map */\n", "export function interactorTypeIcon(type: string): string {\n  switch (type) {\n    case 'small molecule':\n      return 'icon icon-conceptual icon-chemical';\n    case 'protein':\n    case 'peptide':\n      return 'icon icon-conceptual icon-structures-3d';\n    case 'stable complex':\n      return 'icon icon-conceptual icon-systems';\n    case 'molecule set':\n      return 'icon icon-generic icon-math';\n    case 'single stranded deoxyribonucleic acid':\n    case 'double stranded deoxyribonucleic acid':\n    case 'small nuclear rna':\n    case 'small nucleolar rna':\n    case 'ribosomal rna':\n    case 'messenger rna':\n    case 'transfer rna':\n    case 'signal recognition particle rna':\n    case 'ribonucleic acid':\n    case 'nucleic acid':\n    case 'long non-coding ribonucleic acid':\n      return 'icon icon-conceptual icon-dna';\n  }\n}\n\nexport function organismIcon(organism: string): string {\n  const formattedName = formatOrganismName(organism);\n  switch (formattedName) {\n    case 'Homo sapiens':\n      return 'icon icon-species icon-human';\n    case 'Mus musculus':\n      return 'icon icon-species icon-mouse';\n    case 'Schizosaccharomyces pombe':\n    case 'Saccharomyces cerevisiae':\n      return 'icon icon-species icon-yeast';\n    case 'Escherichia coli':\n    case 'Pseudomonas aeruginosa':\n    case 'Klebsiella pneumoniae':\n    case 'Chlamydomonas reinhardtii':\n      return 'icon icon-species icon-ecoli';\n    case 'Rattus norvegicus':\n      return 'icon icon-species icon-rat';\n    case 'Caenorhabditis elegans':\n      return 'icon icon-species icon-c-elegans';\n    case 'Gallus gallus':\n      return 'icon icon-species icon-chicken';\n    case 'Drosophila melanogaster':\n      return 'icon icon-species icon-fly';\n    case 'Bos taurus':\n      return 'icon icon-species icon-cow';\n    case 'Oryctolagus cuniculus':\n      return 'icon icon-species icon-rabbit';\n    case 'Ovis aries':\n      return 'icon icon-species icon-sheep';\n    case 'Xenopus laevis':\n      return 'icon icon-species icon-frog';\n    case 'Canis lupus':\n    case 'Canis familiaris':\n      return 'icon icon-species icon-dog';\n    case 'Vibrio cholerae':\n      return 'assets/images/EMBL_Species_Vibrio_cholerae.svg';\n    case 'Crotalus durissus':\n      return 'assets/images/EMBL_Species_RattleSnake.svg';\n    case 'Sus scrofa':\n      return 'icon icon-species icon-pig';\n    case 'Torpedo marmorata':\n    case 'Tetronarce californica':\n      return 'icon icon-species icon-ray';\n    case 'Lymnaea stagnalis':\n      return 'icon icon-species icon-snail';\n    case 'Arabidopsis thaliana':\n      return 'icon icon-species icon-brassica';\n    case 'Danio rerio':\n      return 'icon icon-species icon-zebrafish';\n    case 'Severe acute':\n    case 'Human SARS' :\n    case 'SARS-CoV-2':\n    case 'Middle East':\n    case 'Human betacoronavirus':\n      return 'icon icon-species icon-virus';\n  }\n  return '';\n}\n\nfunction formatOrganismName(name: string): string {\n  return (name || '?')\n    .split(';')[0]\n    .split(' ').slice(0, 2)\n    .join(' ');\n}\n", "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\nimport {organismIcon} from '../../../../complex-portal-utils';\nimport {BasketService} from '../../../../../shared/basket/service/basket.service';\n\n@Component({\n  selector: 'cp-table-header',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css'],\n})\n\nexport class TableHeaderComponent {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private basketService: BasketService) {\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  iconOrganism(organismName: string) {\n    return organismIcon(organismName);\n  }\n\n  toggleBasket(complex: Element) {\n    if (this.isInBasket(complex.complexAC)) {\n      this.removeComplex(complex.complexAC);\n    } else {\n      this.saveComplex(complex);\n    }\n  }\n\n  saveComplex(complex: Element) {\n    this.basketService.saveInBasket(complex);\n  }\n\n  removeComplex(complexAC: string): void {\n    this.basketService.deleteFromBasket(complexAC);\n    this.onComplexRemovedFromBasket.emit(complexAC);\n  }\n\n  isInBasket(complexAC: string): boolean {\n    return this.basketService.isInBasket(complexAC);\n  }\n}\n", "<div class=\"Complex-navigator\">\n  <table class=\"interactors-table\"\n         [ngClass]=\"{'inheritedWidth': complexes.length > 6}\"\n         [style.--cols]=\"complexes.length\">\n    <ng-container *ngFor=\" let interactor of enrichedInteractors; let i=index\">\n      <tr *ngIf=\"!interactor.hidden\">\n        <ng-container *ngFor=\"let oneType of ranges\" class=\"interactorsOrdering\">\n          <td *ngIf=\"oneType[2]===i\" [attr.rowspan]=\"oneType[1]\" class=\"interactorSeparation\"\n              [matTooltip]=\"oneType[0]\">\n            <div class=\"interactorNameContainer\" [style.--rowspanSize]=\"oneType[1]\">\n              {{ oneType[0] }}\n            </div>\n          </td>\n        </ng-container>\n        <td class=\"interactorsColumn\"\n            [ngClass]=\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\"\n            [style]=\"ranges.length!=0 ? 'left:3ch':''\">\n          <cp-table-interactor-name\n            [interactorName]=\"interactor.interactor.name\"\n            [interactorType]=\"interactor.interactor.interactorType\"\n            [interactorId]=\"interactor.interactor.identifier\"\n            [interactorOrganism]=\"interactor.interactor.organismName\"\n            [identifierLink]=\"interactor.interactor.identifierLink\"\n            [organismIconDisplay]=\"organismIconDisplay\"\n            [interactorTypeDisplay]=\"interactorTypeDisplay\"\n            [IDDisplay]=\"IDDisplay\"\n          ></cp-table-interactor-name>\n          <!-- Icon for the expandable -->\n          <div class=\"container\" *ngIf=\"interactor.isSubComplex\">\n            <a (click)=\"toggleSubcomplexExpandable(i)\"\n               [matTooltip]=\"interactor.interactor.name + ' components'\">\n              Components\n              <i class=\"icon icon-common\" data-icon=\"&#xf078;\"\n                 style=\"font-size:small;\n                \"></i>\n            </a>\n          </div>\n        </td>\n        <!-- Interactors' stoichiometry -->\n        <ng-container *ngFor=\"let complex of enrichedComplexes\">\n          <td class=\"intStoich\" [ngClass]=\"{'intStoichFixedWidth': complexes.length > 6}\" [class.predicted]=\"complex.complex.predictedComplex\">\n            <cp-table-main-interactor\n              [complex]=\"complex\"\n              [i]=\"i\"\n              [enrichedInteractors]=\"enrichedInteractors\"\n            ></cp-table-main-interactor>\n          </td>\n        </ng-container>\n        <div *ngIf=\"complexes.length>6\"\n             [ngClass]=\"isInteractorSortingSet() ? 'spaceHolderWithSorting' : 'spaceHolder'\"></div>\n      </tr>\n      <!-- Expandable menu for subcomplexes -->\n      <ng-container *ngIf=\"interactor.expanded\">\n        <ng-container *ngIf=\"!!interactor.subComponents\">\n          <tr *ngFor=\"let el of interactor.subComponents; let j=index\"\n              class=\"expandedRows\"\n              [ngClass]=\"getExpandedRowClass(j, interactor.subComponents.length)\">\n            <td [attr.rowspan]=\"interactor.subComponents.length\" class=\"interactorSeparation\"\n                [matTooltip]=\"interactor.interactor.name + ' components'\"\n                *ngIf=\"j === 0 && (interactorsSorting === 'Type' || interactorsSorting === 'Organism')\">\n              <div class=\"interactorSeparationName\"\n                   [style.--rowspanSize]=\"interactor.subComponents.length\"> {{ interactor.interactor.name }} components\n              </div>\n            </td>\n            <td class=\"subComponentColumn\"\n                [ngClass]=\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\"\n                [style]=\"ranges.length!=0 ? 'left:3ch':''\">\n              <div>\n                <cp-table-interactor-name\n                  [interactorName]=\"el.name\"\n                  [interactorType]=\"el.interactorType\"\n                  [interactorId]=\"el.identifier\"\n                  [interactorOrganism]=\"interactor.interactor.organismName\"\n                  [identifierLink]=\"el.identifierLink\"\n                  [organismIconDisplay]=\"organismIconDisplay\"\n                  [interactorTypeDisplay]=\"interactorTypeDisplay\"\n                  [IDDisplay]=\"IDDisplay\"\n                ></cp-table-interactor-name>\n              </div>\n            </td>\n            <ng-container *ngFor=\"let complex of enrichedComplexes\">\n              <td class=\"intStoich\" [ngClass]=\"{'intStoichFixedWidth': complexes.length > 6}\">\n                <cp-table-subcomponent-interactor\n                  [complex]=\"complex\"\n                  [i]=\"i\"\n                  [j]=\"j\"\n                  [enrichedInteractors]=\"enrichedInteractors\"\n                ></cp-table-subcomponent-interactor>\n              </td>\n            </ng-container>\n            <div class=\"spaceHolder\" *ngIf=\"enrichedComplexes.length > 6\"></div>\n          </tr>\n        </ng-container>\n      </ng-container>\n    </ng-container>\n  </table>\n</div>\n", "table{--cols: 1;height:1px;overflow:scroll}.inheritedWidth{width:calc(130px + var(--cols) * 70px + 183px)}.interactorsColumn{position:sticky;left:0;z-index:5;height:45px;min-width:130px;max-width:130px;padding:5px;text-align:end;color:#0e6f76;font-weight:700;background:inherit}.interactorsColumnFixedWidth{width:130px}.interactorsColumn a{font-weight:400}.intStoich{height:100%;max-width:70px;min-width:70px;font-size:medium;text-align:end;z-index:1}.intStoichFixedWidth{width:70px}i:not(.small){font-size:large}tr:nth-child(2n){background-color:#f7f7f7}tr:nth-child(odd){background-color:#fff}a,a:visited{color:#0e6f76}.spaceHolder{width:183px}.spaceHolderWithSorting{width:calc(183px - 3ch)}.subComponentColumn{left:0;z-index:30;height:45px;min-width:130px;max-width:130px;padding:5px;text-align:end;color:#0e6f76;font-weight:700;background:inherit;position:sticky}.expandedRows{color:#0e6f76;position:relative}.firstExpandedRow:after{z-index:40;content:\"\";position:absolute;inset:-2px -1px;pointer-events:none;background:linear-gradient(180deg,#0e6f7696 0px,transparent 10px)}.lastExpandedRow:after{z-index:40;content:\"\";position:absolute;inset:-2px -1px;pointer-events:none;background:linear-gradient(0deg,#0e6f7696 0px,transparent 10px)}.singleExpandedRow:after{z-index:40;content:\"\";position:absolute;inset:-2px -1px;pointer-events:none;background:linear-gradient(180deg,#0e6f7696 0px,transparent 10px),linear-gradient(0deg,#0e6f7696 0px,transparent 10px)}.interactorSeparation{max-width:3ch;min-width:3ch;background-color:#0e6f76;border:1px solid white;overflow:hidden;width:1%;text-align:-webkit-center;position:sticky;z-index:31;left:0}.interactorNameContainer,.interactorSeparationName{--rowspanSize: 1;writing-mode:vertical-rl;transform:rotate(-180deg);font-size:small;color:#fff;line-height:.8;text-align:center;text-overflow:ellipsis;height:calc(var(--rowspanSize) * 48px);white-space:nowrap;overflow:hidden}.container{font-size:14px}.horizontalHeader{min-width:114px;max-width:114px}@supports (-webkit-hyphens:none){.interactorsColumn{height:45px!important}.intStoich{height:45px;overflow-y:visible}}\n/*# sourceMappingURL=table-interactor-column.component.css.map */\n", "import {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedInteractor} from './table-interactor-column.component';\n\n\nexport class ComponentWithStoichiometry {\n  identifier: string;\n  stochiometryValue: [number, number];\n  stochiometryText?: string;\n  stochiometryValueFormatted?: string;\n}\n\nexport function findInteractorInComplex(complex: Element,\n                                        interactorId: string,\n                                        enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const interactor = findInteractorInComplexComponents(complex.interactors, interactorId, enrichedInteractors);\n  if (!!interactor) {\n    return {\n      identifier: interactor.identifier,\n      stochiometryValue: interactor.stochiometryValue,\n      stochiometryText: getStoichiometryText(interactor.stochiometryValue),\n      stochiometryValueFormatted: formatStoichiometryValues(interactor.stochiometryValue)\n    };\n  }\n  return null;\n}\n\n// Private functions\n\nfunction findInteractorInComplexComponents(complexComponents: ComplexComponent[],\n                                           interactorId: string,\n                                           enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  // We look for the interactor in the complex, as one of the components, or as part of any subcomplex of the complex, recursively.\n  // Even if we find a match for the interactor as one of the complex components, we keep looking at other components, as the interactor\n  // could also be part of a subcomplex, so the stoichiometry would need to be added for all matches.\n\n  let interactorFound = false;\n  let stoichiometry: [number, number] = null;\n\n  // We iterate through all the components of the complex to find matches\n  for (const complexComponent of complexComponents) {\n    const interactorMatch = findInteractorInComplexComponent(complexComponent, interactorId, enrichedInteractors);\n    if (!!interactorMatch) {\n      // We found a match for the interactor, on this component, or on a subcomponent of it in the case of a subcomplex\n      interactorFound = true;\n      // If we have any stoichiometry for the component, we add it to the total stoichiometry\n      if (!!interactorMatch.stochiometryValue) {\n        if (!!stoichiometry) {\n          stoichiometry = [\n            stoichiometry[0] + interactorMatch.stochiometryValue[0],\n            stoichiometry[1] + interactorMatch.stochiometryValue[1]\n          ];\n        } else {\n          stoichiometry = [\n            interactorMatch.stochiometryValue[0],\n            interactorMatch.stochiometryValue[1]\n          ];\n        }\n      }\n    }\n  }\n\n  // If we have found the interactor as part of one of the complex components, or part of a subcomplex, we return it\n  if (interactorFound) {\n    return {\n      identifier: interactorId,\n      stochiometryValue: stoichiometry\n    };\n  }\n\n  return null;\n}\n\nfunction findInteractorInComplexComponent(complexComponent: ComplexComponent,\n                                          interactorId: string,\n                                          enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const componentStoichiometry = parseStoichiometryValues(complexComponent.stochiometry);\n\n  if (complexComponent.identifier === interactorId) {\n    // The interactor is the complex component we are currently checking\n    return {\n      identifier: interactorId,\n      stochiometryValue: componentStoichiometry\n    };\n  }\n\n  if (complexComponent.interactorType === 'stable complex') {\n    // If the id does not match, and the component is a subcomplex, then we can look for the interactor in the subcomplex components\n    const complexComponentInteractor = enrichedInteractors.find(interactor =>\n      interactor.interactor.identifier === complexComponent.identifier);\n\n    if (!!complexComponentInteractor && !!complexComponentInteractor.subComponents) {\n      const subComponentsMatch = findInteractorInComplexComponents(\n        complexComponentInteractor.subComponents, interactorId, enrichedInteractors);\n\n      if (!!subComponentsMatch) {\n        // We have found the interactor in the subcomplex\n        if (!!subComponentsMatch.stochiometryValue) {\n          if (!!componentStoichiometry) {\n            // If we have stoichiometry for both the component and the subcomponent, we add both\n            return {\n              identifier: interactorId,\n              stochiometryValue: [\n                componentStoichiometry[0] * subComponentsMatch.stochiometryValue[0],\n                componentStoichiometry[1] * subComponentsMatch.stochiometryValue[1]\n              ]\n            };\n          } else {\n            // If we only have stoichiometry for the subcomponent, we use that stoichiometry\n            return {\n              identifier: interactorId,\n              stochiometryValue: subComponentsMatch.stochiometryValue\n            };\n          }\n        } else {\n          // If we only have stoichiometry for the component, we use that stoichiometry\n          return {\n            identifier: interactorId,\n            stochiometryValue: componentStoichiometry\n          };\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction fetchValuesFromStoichiometry(stoichiometry: string) {\n  const pattern = 'minValue: ([0-9+]), maxValue: ([0-9+])';\n  return stoichiometry.match(pattern);\n}\n\nfunction parseStoichiometryValues(stoichiometry: string): [number, number] {\n  if (!!stoichiometry) {\n    const matchedStoichiometry = fetchValuesFromStoichiometry(stoichiometry);\n    if (!!matchedStoichiometry) {\n      const minValue = parseInt(matchedStoichiometry[1], 10);\n      const maxValue = parseInt(matchedStoichiometry[2], 10);\n      if (!isNaN(minValue) && !isNaN(maxValue)) {\n        return [minValue, maxValue];\n      }\n    }\n  }\n  return null;\n}\n\nfunction formatStoichiometryValues(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n    const minValue = stoichiometry[0];\n    const maxValue = stoichiometry[1];\n    if (minValue === maxValue) {\n      return minValue.toString();\n    } else {\n      return `${minValue}-${maxValue}`;\n    }\n  }\n  return ' '; // sometimes we don't have the stoichiometry value\n}\n\nfunction getStoichiometryText(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n    return 'Stoichiometry values: minValue: ' + stoichiometry[0] + ', maxValue: ' + stoichiometry[1];\n  } else {\n    return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n  }\n}\n", "import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {Interactor} from '../../../../shared/model/complex-results/interactor.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {Observable} from 'rxjs/Observable';\nimport {of} from 'rxjs';\nimport {ComplexPortalService} from '../../../../shared/service/complex-portal.service';\nimport {map} from 'rxjs/operators';\nimport {findInteractorInComplex} from './complex-navigator-utils';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\n\nexport class EnrichedInteractor {\n  interactor: Interactor;\n  hidden: boolean;\n  isSubComplex: boolean;\n  expanded: boolean;\n  subComponents: ComplexComponent[];\n  partOfComplex: number[];\n  timesAppearing: number;\n}\n\nexport class EnrichedComplex {\n  complex: Element;\n  startInteractorIndex: number;\n  endInteractorIndex: number;\n  startSubComponentIndex: number;\n  endSubComponentIndex: number;\n  startInteractorIncludedWhenExpanded: boolean;\n}\n\n@Component({\n  selector: 'cp-table-interactor-column',\n  templateUrl: './table-interactor-column.component.html',\n  styleUrls: ['./table-interactor-column.component.css']\n})\nexport class TableInteractorColumnComponent implements OnChanges {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() interactors: Interactor[];\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  enrichedInteractors: EnrichedInteractor[];\n  enrichedComplexes: EnrichedComplex[];\n  ranges: number[];\n\n  _timesAppearingByType: Map<string, number>;\n  _timesAppearingByOrganism: Map<string, number>;\n\n  constructor(private complexPortalService: ComplexPortalService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!!changes['interactors']) {\n      this.enrichInteractors();\n      this.calculateTimesAppearing();\n    }\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  private classifyInteractors(): void {\n    if (!!this.interactorsSorting && !!this.enrichedInteractors && this.enrichedInteractors.length > 0) {\n      if (this.interactorsSorting === 'Type') {\n        this.classifyInteractorsByType();\n      } else if (this.interactorsSorting === 'Organism') {\n        this.classifyInteractorsByOrganism();\n      } else {\n        this.classifyInteractorsByOccurrence();\n      }\n    }\n  }\n\n  private enrichInteractors() {\n    this.enrichedInteractors = [];\n    for (const interactor of this.interactors) {\n      const isSubComplex = interactor.interactorType === 'stable complex';\n      const newEnrichedInteractor: EnrichedInteractor = {\n        interactor,\n        hidden: false,\n        isSubComplex,\n        expanded: false,\n        subComponents: null,\n        partOfComplex: [],\n        timesAppearing: 0,\n      };\n      if (isSubComplex) {\n        this.loadSubInteractors(newEnrichedInteractor).subscribe(subComponents => newEnrichedInteractor.subComponents = subComponents);\n      }\n      this.enrichedInteractors.push(newEnrichedInteractor);\n    }\n  }\n\n  toggleSubcomplexExpandable(i: number): void {\n    this.enrichedInteractors[i].expanded = !this.enrichedInteractors[i].expanded;\n\n    if (this.enrichedInteractors[i].expanded) {\n      // EnrichedInteractor has been expanded, we need to:\n\n      // 1. Collapse the other ones, in case there is any other expanded\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        if (i !== j) {\n          this.enrichedInteractors[j].expanded = false;\n        }\n      }\n\n      // 2. Hide any interactor now displayed in the expanded section\n      if (!!this.enrichedInteractors[i].subComponents) {\n        const subInteractorIds: string[] = this.enrichedInteractors[i].subComponents.map(component => component.identifier);\n        for (let j = 0; j < this.enrichedInteractors.length; j++) {\n          if (i !== j) {\n            this.enrichedInteractors[j].hidden = !!subInteractorIds.includes(this.enrichedInteractors[j].interactor.identifier);\n          }\n        }\n      }\n    } else {\n      // EnrichedInteractor has been collapsed, we need to:\n      // 1. Display any interactor previously hidden\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        this.enrichedInteractors[j].hidden = false;\n      }\n    }\n\n    // Something has been expanded or collapsed, we need to recalculate the start and end indexes for the lines\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n\n  }\n\n  private loadSubInteractors(interactor: EnrichedInteractor): Observable<ComplexComponent[]> {\n    // this function returns the list of subcomponents of an interactor of type stable complex\n    const foundComplex: Element = this.complexes.find(complex => complex.complexAC === interactor.interactor.identifier);\n    if (!!foundComplex) {\n      return of(foundComplex.interactors);\n    } else {\n      // Actually call the back-end to fetch these\n      return this.complexPortalService.getSimplifiedComplex(interactor.interactor.identifier)\n        .pipe(map(complex => complex?.interactors));\n    }\n  }\n\n  private calculateAllStartAndEndIndexes(): void {\n    this.enrichedComplexes = [];\n\n    for (const complex of this.complexes) {\n      this.enrichedComplexes.push(this.calculateStartAndEndIndexes(complex));\n    }\n  }\n\n  private getMinValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.min(valueA, valueB);\n  }\n\n  private getMaxValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.max(valueA, valueB);\n  }\n\n  private calculateStartAndEndIndexes(complex: Element): EnrichedComplex {\n    const enrichedComplex: EnrichedComplex = {\n      complex,\n      startInteractorIndex: null,\n      endInteractorIndex: null,\n      startSubComponentIndex: null,\n      endSubComponentIndex: null,\n      startInteractorIncludedWhenExpanded: true,\n    };\n\n    // We iterate through the interactors to find the first and last one part of the complex\n    // We do this to be able to draw a line connecting all interactors in the complex\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n\n        if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].interactor.identifier, this.enrichedInteractors)) {\n          // The interactor is part of the complex, we update the start and end indices for the interactors\n          // line as it may start in this interactor\n          enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n          if (enrichedComplex.startInteractorIndex === i) {\n            // The line starts in this interactor, so the line always starts in this interactor, even when expanded\n            enrichedComplex.startInteractorIncludedWhenExpanded = true;\n          }\n          enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n\n          // The interactor is a subcomplex\n          if (this.enrichedInteractors[i].isSubComplex && !!this.enrichedInteractors[i].subComponents) {\n            if (this.enrichedInteractors[i].expanded) {\n              // If the subcomplex is expanded, as the subcomplex is part of the complex, all its subcomponents are also part\n              // of it. That means we need a line connecting all the subcomponents.\n              // That line must also connect to the subcomplex, so we start it at -1 to make sure it starts at the interactor cell\n              // and not at the first subcomponent\n              enrichedComplex.startSubComponentIndex = -1;\n              enrichedComplex.endSubComponentIndex = this.enrichedInteractors[i].subComponents.length - 1;\n            }\n          }\n        } else if (this.enrichedInteractors[i].isSubComplex &&\n          !!this.enrichedInteractors[i].subComponents &&\n          this.enrichedInteractors[i].expanded) {\n          // The interactor is not part of the complex, but it is a subcomplex, and it is expanded.\n          // This means the subcomponents of the subcomplex are visible, and any of them could be part of the complex.\n          // In that case, the line could start or end on any of those subcomponents\n          for (let k = 0; k < this.enrichedInteractors[i].subComponents.length; k++) {\n            if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].subComponents[k].identifier, this.enrichedInteractors)) {\n              // The subcomponent of this interactor is part of the complex, we update the start and end indices for the interactors\n              // line as it may start in this interactor\n              enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n              if (enrichedComplex.startInteractorIndex === i) {\n                // The line starts in a subcomponent of the interactor, but not on the interactor itself,\n                // so the line does not start in the interactor when expanded\n                enrichedComplex.startInteractorIncludedWhenExpanded = false;\n              }\n              enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n              // The subcomponent of this interactor is part of the complex, we update the start and end indices for the subcomponents\n              // line as it may start in this subcomponent\n              enrichedComplex.startSubComponentIndex = this.getMinValue(enrichedComplex.startSubComponentIndex, k);\n              enrichedComplex.endSubComponentIndex = this.getMaxValue(enrichedComplex.endSubComponentIndex, k);\n            }\n          }\n        }\n      }\n    }\n    return enrichedComplex;\n  }\n\n  public classifyInteractorsByOrganism() {\n    this.enrichedInteractors.sort((a, b) => {\n      if (b.interactor.organismName === a.interactor.organismName) {\n        return b.timesAppearing - a.timesAppearing;\n      } else {\n        const organismBTimesAppearing = this._timesAppearingByOrganism.get(b.interactor.organismName);\n        const organismATimesAppearing = this._timesAppearingByOrganism.get(a.interactor.organismName);\n        if (organismBTimesAppearing === organismATimesAppearing) {\n          return b.interactor.organismName.localeCompare(a.interactor.organismName);\n        } else {\n          return organismBTimesAppearing - organismATimesAppearing;\n        }\n      }\n    });\n    this.rangeOfInteractorOrganism();\n  }\n\n  public classifyInteractorsByType() {\n    this.enrichedInteractors.sort((a, b) => {\n      if (b.interactor.interactorType === a.interactor.interactorType) {\n        return b.timesAppearing - a.timesAppearing;\n      } else {\n        const typeBTimesAppearing = this._timesAppearingByType.get(b.interactor.interactorType);\n        const typeATimesAppearing = this._timesAppearingByType.get(a.interactor.interactorType);\n        if (typeBTimesAppearing === typeATimesAppearing) {\n          return b.interactor.interactorType.localeCompare(a.interactor.interactorType);\n        } else {\n          return typeBTimesAppearing - typeATimesAppearing;\n        }\n      }\n    });\n    this.rangeOfInteractorType();\n  }\n\n  public classifyInteractorsByOccurrence() {\n    this.enrichedInteractors.sort((a, b) =>\n      b.timesAppearing - a.timesAppearing\n    );\n    this.ranges = [];\n  }\n\n  public rangeOfInteractorType() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.interactorType !== this.enrichedInteractors[i + 1].interactor.interactorType) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.interactorType, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  public rangeOfInteractorOrganism() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.organismName !== this.enrichedInteractors[i + 1].interactor.organismName) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.organismName, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  getExpandedRowClass(i: number, length: number): string {\n    if (i === 0) {\n      if (length === 1) {\n        return 'singleExpandedRow';\n      } else {\n        return 'firstExpandedRow';\n      }\n    } else if (i === length - 1) {\n      return 'lastExpandedRow';\n    }\n    return null;\n  }\n\n  private calculateTimesAppearing() {\n    // Initialise times appearing by type or organism\n    this._timesAppearingByType = new Map();\n    this._timesAppearingByOrganism = new Map();\n    for (const oneInteractor of this.enrichedInteractors) {\n      // Initialise times appearing for each interactor\n      oneInteractor.timesAppearing = 0;\n      for (const complex of this.complexes) {\n        const match = findInteractorInComplex(complex, oneInteractor.interactor.identifier, this.enrichedInteractors);\n        if (!!match) {\n          // Update times appearing for the interactor\n          oneInteractor.timesAppearing += 1;\n          // Update times appearing for the interactor type\n          this._timesAppearingByType.set(\n            oneInteractor.interactor.interactorType,\n            (this._timesAppearingByType.get(oneInteractor.interactor.interactorType) || 0) + 1);\n          // Update times appearing for the interactor organism\n          this._timesAppearingByOrganism.set(\n            oneInteractor.interactor.organismName,\n            (this._timesAppearingByOrganism.get(oneInteractor.interactor.organismName) || 0) + 1);\n        }\n      }\n    }\n  }\n\n}\n", "<div class=\"container\">\n  <div class=\"nameAndIcons\" [ngClass]=\"{inlineDisplay: interactorType==='stable complex'}\">\n    <i *ngIf=\"organismIconDisplay\"\n       class=\"{{interactorOrganismIcon}}\"\n       [matTooltip]=\"interactorOrganism\"></i>\n\n    <i *ngIf=\"interactorTypeDisplay\"\n       class=\"{{interactorTypeIcon}}\"\n       [matTooltip]=\"interactorType\"></i>\n\n    <div class=\"name\" *ngIf=\"IDDisplay\" [matTooltip]=\"interactorId\"> {{ interactorName }}\n    </div>\n    <a *ngIf=\"IDDisplay\"\n       [routerLink]=\"['/complex/search']\"\n       [queryParams]=\"{query: interactorId, page: 1}\"\n       target=\"_blank\">\n      <i class=\"icon icon-functional small\" data-icon=\"1\"\n         [matTooltip]=\"'More complexes containing ' + interactorName \"></i>\n    </a>\n\n    <div class=\"nameCompact\" *ngIf=\"!IDDisplay\">\n      <div class=\"name\" *ngIf=\"!IDDisplay\" [matTooltip]=\"'More information about ' + interactorName\">\n        <a *ngIf=\"!!identifierLink\" href=\"{{identifierLink}}\" target=\"_blank\" class=\"externalLinkContainer\">\n          {{ interactorName }}\n        </a>\n      </div>\n      <a [routerLink]=\"['/complex/search']\"\n         [queryParams]=\"{query: interactorId, page: 1}\"\n         target=\"_blank\">\n        <i class=\"icon icon-functional small\" data-icon=\"1\"\n           [matTooltip]=\"'More complexes containing ' + interactorName \"></i>\n      </a>\n    </div>\n  </div>\n  <cp-table-interactor-external-link\n    *ngIf=\"IDDisplay\"\n    [interactorId]=\"interactorId\"\n    [identifierLink]=\"identifierLink\"\n    [interactorType]=\"interactorType\"\n    [isMainInteractor]=\"isMainInteractor\"\n    [IDDisplay]=\"IDDisplay\"\n    (externalLinkVisible)=\"externalLinkVisibleHandler($event)\">\n  </cp-table-interactor-external-link>\n</div>\n", "a{font-weight:700}a,a:visited{color:#0e6f76}i:not(.small){font-size:medium}.nameAndIcons{font-size:14px;display:flex;width:inherit;justify-content:flex-end}.inlineDisplay{display:flex;justify-content:flex-end}.name{width:inherit;text-overflow:ellipsis;overflow:hidden;text-wrap:nowrap;text-align:end;padding-right:5px}.nameCompact{display:inline-flex;width:-webkit-fill-available}\n/*# sourceMappingURL=table-interactor-name.component.css.map */\n", "import {Component, Input, OnInit} from '@angular/core';\nimport {interactorTypeIcon} from '../../../../../complex-portal-utils';\nimport {organismIcon} from '../../../../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-table-interactor-name',\n  templateUrl: './table-interactor-name.component.html',\n  styleUrls: ['./table-interactor-name.component.css']\n})\nexport class TableInteractorNameComponent implements OnInit {\n\n  @Input() interactorName: string;\n  @Input() interactorType: string;\n  @Input() interactorId: string;\n  @Input() interactorOrganism: string;\n  @Input() identifierLink: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() isMainInteractor: boolean;\n  interactorTypeIcon: string;\n  interactorOrganismIcon: string;\n  externalLinkVisible: boolean;\n\n  ngOnInit(): void {\n    this.interactorTypeIcon = interactorTypeIcon(this.interactorType);\n    this.interactorOrganismIcon = organismIcon(this.interactorOrganism);\n  }\n\n  externalLinkVisibleHandler(isVisible: boolean): void {\n    this.externalLinkVisible = isVisible;\n  }\n}\n", "<div class=\"externalLinkContainer\" [matTooltip]=\"'More information about ' + interactorId\">\n  <a *ngIf=\"externalLinkVisible\" href=\"{{identifierLink}}\" target=\"_blank\" class=\"externalLinkContainer\">\n    {{ interactorId }}\n    <i class=\"icon icon-generic small\" data-icon=\"x\" title=\"More information about {{ interactorId }}\"></i>\n  </a>\n</div>\n", "a{font-weight:400}a,a:visited{color:#0e6f76}i:not(.small){font-size:large}.externalLinkContainer{justify-content:end;grid-gap:5px;font-size:14px;line-break:anywhere;word-break:break-word}\n/*# sourceMappingURL=table-interactor-external-link.component.css.map */\n", "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-external-link',\n  templateUrl: './table-interactor-external-link.component.html',\n  styleUrls: ['./table-interactor-external-link.component.css']\n})\nexport class TableInteractorExternalLinkComponent implements OnInit {\n\n  @Input() interactorId: string;\n  @Input() identifierLink: string;\n  @Input() interactorType: string;\n  @Input() isMainInteractor: boolean;\n  @Input() IDDisplay: boolean;\n\n  @Output() externalLinkVisible: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  ngOnInit(): void {\n    this.showExternalLink();\n  }\n\n  showExternalLink(): boolean {\n    if (this.isMainInteractor && this.interactorType === 'stable complex') {\n      this.externalLinkVisible.emit(false);\n      return false;\n    }\n    this.externalLinkVisible.emit(!!this.identifierLink);\n    return !!this.identifierLink;\n  }\n}\n", "<ng-container>\n  <div class=\"stoichNum\" [matTooltip]=\"stoichiometryText\">\n    {{ stoichiometryValue }}\n  </div>\n</ng-container>\n", ".stoichNum{width:4ch;height:4ch;border-radius:4ch;background-color:var(--primary);text-align:center;padding-top:.5ch;color:var(--on-primary);font-size:small;margin-left:auto;margin-right:auto;position:relative;z-index:1}\n/*# sourceMappingURL=table-interactor-stoichiometry.component.css.map */\n", "import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-stoichiometry',\n  templateUrl: './table-interactor-stoichiometry.component.html',\n  styleUrls: ['./table-interactor-stoichiometry.component.css']\n})\nexport class TableInteractorStoichiometryComponent {\n  @Input() stoichiometryText: string;\n  @Input() stoichiometryValue: string;\n}\n", "<div [ngClass]=\"topLineClass\"></div>\n<cp-table-interactor-stoichiometry\n  *ngIf=\"!!interactorComponent\"\n  [stoichiometryText]=\"interactorComponent.stochiometryText\"\n  [stoichiometryValue]=\"interactorComponent.stochiometryValueFormatted\"\n></cp-table-interactor-stoichiometry>\n<div [ngClass]=\"bottomLineClass\"></div>\n", ":host{display:flex;flex-direction:column;height:100%;justify-content:center;align-items:center;align-content:center;flex-wrap:nowrap}:host *{flex:1}.verticalLine,.transparentVerticalLine{margin-left:auto;margin-right:auto;min-width:1%;max-width:1%;min-height:50%;z-index:0;position:relative;height:50%}.verticalLine{border-right:3px solid var(--primary)}.transparentVerticalLine{border-right:0}\n/*# sourceMappingURL=table-main-interactor.component.css.map */\n", "import {Component, Input, OnChanges} from '@angular/core';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-main-interactor',\n  templateUrl: './table-main-interactor.component.html',\n  styleUrls: ['./table-main-interactor.component.css']\n})\nexport class TableMainInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  topLineClass: string;\n  bottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(\n      this.complex.complex, this.interactor.interactor.identifier, this.enrichedInteractors);\n    this.topLineClass = this.displayTopLineClass(this.complex, this.i);\n    this.bottomLineClass = this.displayBottomLineClass(this.complex, this.i);\n  }\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  public displayTopLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnInteractorCell(complex, interactorIndex) && !this.doesLineStartOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnInteractorCell(complex, interactorIndex) && !this.doesLineEndOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n\n      // The line starts before this interactor and ends after, so it crosses through the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      // The line starts before this interactor and end at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor, and it must cross through the interactor cell to the subcomponents\n        if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n\n      if (!this.enrichedInteractors[interactorIndex].isSubComplex) {\n        // If the interactor is not a subcomplex, then the interactor has no subcomponents and the line starts in it\n        return true;\n      }\n      // If the interactor is a subcomplex.\n      // If the interactor is actually part of the complex, the line starts in this interactor\n      // Otherwise, the line actually starts on one of the subcomponents of the complex, but not on the interactor itself, as it is\n      // not part of the complex.\n      if (complex.startInteractorIncludedWhenExpanded) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line ends at this interactor or on any of its subcomponents\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n\n      // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n      // the line does not end in this interactor, and it must cross through to the subcomponents\n      if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n        if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n}\n", "<div [ngClass]=\"displayTopLineClass\"></div>\n<cp-table-interactor-stoichiometry\n  *ngIf=\"!!interactorComponent\"\n  [stoichiometryText]=\"interactorComponent.stochiometryText\"\n  [stoichiometryValue]=\"interactorComponent.stochiometryValueFormatted\"\n></cp-table-interactor-stoichiometry>\n<div [ngClass]=\"displayBottomLineClass\"></div>\n", ".verticalLine,.transparentVerticalLine{margin-left:auto;margin-right:auto;min-width:1%;max-width:1%;max-height:50%;min-height:50%;z-index:0}.verticalLine{border-right:3px solid #0e6f76}.transparentVerticalLine{border-right:0}\n/*# sourceMappingURL=table-subcomponent-interactor.component.css.map */\n", "import {Component, Input, OnChanges} from '@angular/core';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-subcomponent-interactor',\n  templateUrl: './table-subcomponent-interactor.component.html',\n  styleUrls: ['./table-subcomponent-interactor.component.css']\n})\n\nexport class TableSubcomponentInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() j: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  displayTopLineClass: string;\n  displayBottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(this.complex.complex, this.el.identifier, this.enrichedInteractors);\n    this.displayTopLineClass = this.displayTopLineClassExpanded(this.complex, this.i, this.j);\n    this.displayBottomLineClass = this.displayBottomLineClassExpanded(this.complex, this.i, this.j);\n  }\n\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  get el(): ComplexComponent {\n    return this.enrichedInteractors[this.i].subComponents[this.j];\n  }\n\n  public displayTopLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n      // The line starts before this interactor and ends after, so it crosses through all the subcomponents of the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n        // The line starts before this subcomponent and ends after, so it crosses through the subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this interactor, and it ends on a later subcomponent, so it crosses through this subcomponent\n        if (complex.startInteractorIndex < interactorIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this subcomponent, and it ends on a later interactor, so it crosses through this subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endInteractorIndex > interactorIndex) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n      if (complex.startSubComponentIndex != null && complex.startSubComponentIndex === subComponentIndex) {\n        // If the subcomplex is a component of the complex, the line starts in the cell of the interactor, meaning it cannot\n        // start on any subcomponent.\n        // Otherwise, it starts on the subcomponent with the index subComponentIndex\n        return !complex.complex.interactors.some(component =>\n          this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier);\n\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n      // The line ends at this interactor and this subcomponent\n      if (complex.endSubComponentIndex != null && complex.endSubComponentIndex === subComponentIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n", "<div class=\"filters\">\n  <div class=\"sortingInteractors\">\n    <input type=\"submit\" name=\"classificationButton\" value=\"Sort components\" class=\"button\">\n    <div class=\"typeOfSorting\">\n      <input type=\"button\" name=\"occurrenceClassification\" value=\"Occurrence\" class=\"button\"\n             (click)=\"interactorsSortingChanges('Occurrence')\">\n      <input type=\"button\" name=\"typeClassification\" value=\"Type\" class=\"button\"\n             (click)=\"interactorsSortingChanges('Type')\">\n      <input type=\"button\" name=\"organismClassification\" value=\"Organism\" class=\"button\"\n             (click)=\"interactorsSortingChanges('Organism')\">\n      <!--      <input type=\"submit\" name=\"geneClassification\" value=\"Orthology (Not available yet)\" class=\"button\"-->\n      <!--             (click)=\"InteractorsSortingChanges('Orthology')\">-->\n    </div>\n  </div>\n\n  <div class=\"dropdown\">\n    <input type=\"submit\" name=\"classificationButton\" value=\"Display Options\" class=\"button\">\n    <ul class=\"displaySize\">\n      <li>\n        <label>\n          <input type=\"radio\" name=\"displayType\" value=\"Compact\" class=\"checkbox compact\"\n                 (click)=\"setDisplayType('compact')\" [checked]=\"typeOfDisplay === 'compact'\">\n          Compact display\n        </label>\n      </li>\n      <li class=\"detailedDisplay\">\n        <label>\n          <input type=\"radio\" name=\"displayType\" value=\"Detailed\" class=\"checkbox detailed\"\n                 (click)=\"setDisplayType('detailed')\" [checked]=\"typeOfDisplay === 'detailed'\">\n          Detailed display\n        </label>\n        <ul class=\"detailedDisplayOptions\">\n          <li>\n            <input type=\"checkbox\" name=\"organism\" value=\"organism\" class=\"checkbox\" [checked]=\"organismIconDisplay\"\n                   (change)=\"DisplayingOrganism()\">\n            Organism\n          </li>\n          <li>\n            <input type=\"checkbox\" name=\"type\" value=\"type\" class=\"checkbox\" [checked]=\"interactorTypeDisplay\"\n                   (change)=\"DisplayingType()\">\n            Type\n          </li>\n          <li>\n            <input type=\"checkbox\" name=\"id\" value=\"id\" class=\"checkbox\" [checked]=\"IDDisplay\"\n                   (change)=\"DisplayingID()\">\n            Interactor ID\n          </li>\n        </ul>\n      </li>\n    </ul>\n  </div>\n</div>\n", ".typeOfSorting{display:none}.sortingInteractors:hover .typeOfSorting{display:flex;margin-top:-15px;flex-direction:row;position:absolute;z-index:5}.typeOfSorting .button{border-right:1px solid white;font-size:14px}.filters{display:flex;justify-content:center;grid-gap:10px;height:67px;z-index:5;text-align:center}.displaySize,.detailedDisplayOptions{display:none}label{color:var(--on-primary)}.dropdown:hover .displaySize{display:flex;list-style:none;width:300px;background-color:var(--primary);color:var(--on-primary);margin-top:-15px;flex-direction:row;position:absolute;height:40px;align-content:center;z-index:5}.dropdown:hover .displaySize li{width:200px;background-color:var(--primary);margin-left:-21px;text-align:left;padding-left:6px;z-index:5}li{text-align:center;align-items:center;font-size:14px;border-left:1px solid white;padding-top:10px;max-width:171px}.detailedDisplay:hover .detailedDisplayOptions{display:flex;list-style:none;align-content:baseline;flex-direction:column;position:absolute;z-index:5;margin-left:14px}.detailedDisplayOptions li{text-align:left;z-index:5}\n/*# sourceMappingURL=complex-navigator-buttons.component.css.map */\n", "import {Component, EventEmitter, Input, Output, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-navigator-buttons',\n  templateUrl: './complex-navigator-buttons.component.html',\n  styleUrls: ['./complex-navigator-buttons.component.css']\n})\nexport class ComplexNavigatorButtonsComponent implements OnInit {\n  @Output() interactorsSortingChange = new EventEmitter<string>();\n  @Output() organismIconDisplayChange = new EventEmitter<boolean>();\n  @Output() interactorTypeDisplayChange = new EventEmitter<boolean>();\n  @Output() IDDisplayChange = new EventEmitter<boolean>();\n\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  typeOfDisplay: string;\n\n  ngOnInit() {\n    this.updateDisplay();\n  }\n\n  interactorsSortingChanges(typeOfSorting: string) {\n    this.interactorsSortingChange.emit(typeOfSorting);\n    if (this.typeOfDisplay === 'detailed') {\n      if (typeOfSorting === 'Type') {\n        this.interactorTypeDisplay = false;\n        this.organismIconDisplay = true;\n      } else if (typeOfSorting === 'Organism') {\n        this.organismIconDisplay = false;\n        this.interactorTypeDisplay = true;\n      }\n      this.updateDisplay();\n    }\n  }\n\n  DisplayingOrganism() {\n    this.organismIconDisplay = !this.organismIconDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingType() {\n    this.interactorTypeDisplay = !this.interactorTypeDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingID() {\n    this.IDDisplay = !this.IDDisplay;\n    this.updateDisplay();\n  }\n\n  setDisplayType(type: string) {\n    if (type === 'compact') {\n      this.compactDisplay();\n    } else if (type === 'detailed') {\n      this.detailedDisplay();\n    }\n  }\n\n  compactDisplay() {\n    this.organismIconDisplay = false;\n    this.interactorTypeDisplay = false;\n    this.IDDisplay = false;\n    this.typeOfDisplay = 'compact';\n    this.changesEmitter();\n  }\n\n  detailedDisplay() {\n    this.organismIconDisplay = true;\n    this.interactorTypeDisplay = true;\n    this.IDDisplay = true;\n    this.typeOfDisplay = 'detailed';\n    this.changesEmitter();\n  }\n\n  updateDisplay() {\n    if (this.organismIconDisplay || this.interactorTypeDisplay || this.IDDisplay) {\n      this.typeOfDisplay = 'detailed';\n    } else {\n      this.typeOfDisplay = 'compact';\n    }\n    this.changesEmitter();\n  }\n\n  changesEmitter() {\n    this.organismIconDisplayChange.emit(this.organismIconDisplay);\n    this.interactorTypeDisplayChange.emit(this.interactorTypeDisplay);\n    this.IDDisplayChange.emit(this.IDDisplay);\n  }\n\n}\n", "<div class=\"displayButton columns medium-12\" [ngClass]=\"\">\n  <button type=\"submit\" name=\"submit\" class=\"button view-button\"\n          (click)=\"setListView()\" [ngClass]=\"{'selected': !isDisplayComplexNavigatorView()}\">\n    View list\n  </button>\n  <button type=\"submit\" name=\"submit\" class=\"button view-button cnButton\"\n          (click)=\"setComplexNavigatorView()\" [ngClass]=\"{'selected': isDisplayComplexNavigatorView()}\">\n    View Complex Navigator\n    <span class=\"new-tag\" [ngClass]=\"{'new-tag-selected': displayType === isDisplayComplexNavigatorView()}\">NEW!</span>\n  </button>\n</div>\n", ".displayButton{text-align:center}.view-button{width:225px;margin-right:5px;background-color:#fff;color:#555;border:1px dotted var(--primary)}.view-button:hover{color:var(--primary);background-color:#eaeaea;border:transparent;border-bottom:1px dotted var(--primary)}.selected,.selected:hover{background-color:var(--primary);color:#fff}.new-tag{color:red;font-weight:700;font-size:x-small}.new-tag-selected{color:#ff0}.cnButton{outline-offset:0;outline:rgba(0,124,130,.75) solid 1px;animation:animateOutline 4s ease infinite}.cnButton.selected{animation:none}@keyframes animateOutline{0%,50%,to{outline-width:6px;outline-offset:4px;outline-color:#007c8200}10%{outline-color:#007c82bf}}\n/*# sourceMappingURL=complex-list-display-buttons.component.css.map */\n", "import {Component, EventEmitter, Input, Output} from '@angular/core';\n\nexport const LIST_VIEW = 'view_list';\nexport const COMPLEX_NAVIGATOR_VIEW = 'view_complex_navigator';\n\n@Component({\n  selector: 'cp-complex-list-display-buttons',\n  templateUrl: './complex-list-display-buttons.component.html',\n  styleUrls: ['./complex-list-display-buttons.component.css']\n})\nexport class ComplexListDisplayButtonsComponent {\n\n  @Input() displayType: string;\n  @Output() displayTypeChange = new EventEmitter<string>();\n\n  setListView() {\n    this.displayType = LIST_VIEW;\n    this.displayTypeChange.emit(this.displayType);\n  }\n\n  setComplexNavigatorView() {\n    this.displayType = COMPLEX_NAVIGATOR_VIEW;\n    this.displayTypeChange.emit(this.displayType);\n  }\n\n  isDisplayComplexNavigatorView(): boolean {\n    return this.displayType === COMPLEX_NAVIGATOR_VIEW;\n  }\n\n}\n", "import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MarkdownModule} from 'ngx-markdown';\nimport {ComplexNavigatorComponent} from './complex-navigator.component';\nimport {TableStructureComponent} from './table-structure/table-structure.component';\nimport {TableHeaderComponent} from './table-structure/table-header/table-header.component';\nimport {TableInteractorColumnComponent} from './table-structure/table-interactor-column/table-interactor-column.component';\nimport {\n  TableInteractorNameComponent\n} from './table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component';\nimport {\n  TableInteractorExternalLinkComponent\n} from './table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component';\nimport {\n  TableInteractorStoichiometryComponent\n} from './table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component';\nimport {\n  TableMainInteractorComponent\n} from './table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component';\nimport {\n  TableSubcomponentInteractorComponent\n} from './table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component';\nimport {ComplexNavigatorButtonsComponent} from '../complex-navigator-buttons/complex-navigator-buttons.component';\nimport {RouterModule} from '@angular/router';\nimport {ComplexListDisplayButtonsComponent} from './complex-list-display-buttons/complex-list-display-buttons.component';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {ProgressSpinnerComponent} from '../../../shared/loading-indicators/progress-spinner/progress-spinner.component';\n\n@NgModule({\n  imports: [\n    RouterModule,\n    CommonModule,\n    ProgressSpinnerComponent,\n    MarkdownModule,\n    MatTooltipModule\n  ],\n  exports: [\n    ComplexNavigatorComponent,\n    ComplexListDisplayButtonsComponent\n  ],\n  declarations: [\n    ComplexNavigatorComponent,\n    TableStructureComponent,\n    TableHeaderComponent,\n    TableInteractorColumnComponent,\n    TableInteractorNameComponent,\n    TableInteractorExternalLinkComponent,\n    TableInteractorStoichiometryComponent,\n    TableMainInteractorComponent,\n    TableSubcomponentInteractorComponent,\n    ComplexNavigatorButtonsComponent,\n    ComplexListDisplayButtonsComponent\n  ]\n})\nexport class ComplexNavigatorModule {\n}\n"],
  "mappings": "6RAAA,IAAAA,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECAA,IAAAC,EAAA;+UCUaC,GAANC,EAAA,KAA+B,CAA/B,cACIC,EAAA,sBACAA,EAAA,oBACAA,EAAA,gCACAA,EAAA,qCACCA,EAAA,kCAA6BC,EAAM,GAE7CD,EAAA,0BAAqB,cACrBA,EAAA,2BAAsB,IACtBA,EAAA,6BAAwB,IACxBA,EAAA,iBAAY,QAVPD,yCACJG,CAAK,CAAA,qBACLA,CAAK,CAAA,iCACLA,CAAK,CAAA,sCACLA,CAAK,CAAA,oCACLC,CAAM,CAAA,IALFJ,GAAMD,EAAyBM,GAAA,CANrCC,EAAU,CACT,SAAU,uBACV,SAAAC,aAED,GAEYR,CAAyB,ECVtC,IAAAS,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECAA,IAAAC,EAAA;AAAA;+UCWaC,GAANC,EAAA,KAA6B,CAA7B,cACIC,EAAA,sBACAA,EAAA,oBACAA,EAAA,2BACAA,EAAA,4BACAA,EAAA,8BACAA,EAAA,kBACAA,EAAA,gCACAA,EAAA,qCACCA,EAAA,kCAAmD,IAAIC,GAEjED,EAAA,uBAA6B,CAAA,GAE7B,aAAW,CACT,KAAK,gBAAkB,KAAK,gCAAgC,KAAK,cAAc,QAAQ,CACzF,CAEQ,sBAAsBE,EAA2B,CACvD,OAAO,KAAK,cAAc,SAAS,KAAKC,GAAcA,EAAW,YAAcD,EAAU,UAAU,CACrG,CAEQ,iBAAiBE,EAAmBC,EAAiC,CAAA,EAAE,CAC7E,QAAWH,KAAaE,EAAQ,YAC9B,GAAIF,EAAU,iBAAmB,iBAAkB,CACjD,IAAMI,EAAa,KAAK,sBAAsBJ,CAAS,EACnDI,EACFD,EAAW,KAAK,GAAG,KAAK,iBAAiBC,CAAU,CAAC,EAEpDD,EAAW,KAAKH,CAAS,CAE7B,MACEG,EAAW,KAAKH,CAAS,EAG7B,OAAOG,CACT,CAEQ,oBAAoBE,EAAmBC,EAAiB,CAC9D,GAAID,IAAaC,EACf,OAAO,IAAI,IAAI,KAAK,iBAAiBD,CAAQ,CAAC,EAAE,KAGlD,GAAM,CAACE,EAAaC,CAAW,EAC7B,CAACH,EAAUC,CAAQ,EAChB,IAAIJ,GAAW,IAAI,IAAI,KAAK,iBAAiBA,CAAO,EAAE,IAAIO,GAAKA,EAAE,UAAU,CAAC,CAAC,EAElF,MAAO,CAAC,GAAGF,EAAY,OAAM,CAAE,EAAE,OAAO,CAACG,EAAGC,IAAOH,EAAY,IAAIG,CAAE,EAAID,EAAI,EAAIA,EAAG,CAAC,CACvF,CAEA,gCAAgCE,EAAwB,CACtD,IAAMC,EAAkD,CAAA,EACxD,QAAWX,KAAWU,EACpB,QAAWE,KAAmBF,EAExBV,EAAQ,WAAaY,EAAgB,WACvCD,EAAkB,KAAK,CAACX,EAASY,EAAiB,KAAK,oBAAoBZ,EAASY,CAAe,CAAC,CAAC,EAI3GD,EAAkB,KAAK,CAACE,EAAGC,IAAMA,EAAE,CAAC,EAAID,EAAE,CAAC,CAAC,EAC5C,IAAME,EAAsB,KAAK,uCAAuCJ,CAAiB,EAEzF,OAAO,MAAM,KAAKI,CAAmB,CACvC,CAEA,uCAAuCC,EAAuD,CAC5F,IAAMD,EAAsB,IAAI,IAChC,QAASE,EAAI,EAAGA,EAAID,EAA0B,OAAQC,IAAK,CACzD,GAAM,CAACd,EAAUC,EAAUc,CAAe,EAAIF,EAA0BC,CAAC,EACzE,GAAIC,IAAoB,EAAG,CACzBH,EAAoB,IAAIZ,CAAQ,EAChCY,EAAoB,IAAIX,CAAQ,EAChC,QAASe,EAAIF,EAAI,EAAGE,EAAIH,EAA0B,OAAQG,IAAK,CAC7D,GAAM,CAACC,GAAUC,GAAUC,EAAkB,EAAIN,EAA0BG,CAAC,EACxEhB,IAAaiB,IAAYE,KAAuB,GAClDP,EAAoB,IAAIM,EAAQ,CAEpC,CACA,GAAIN,EAAoB,OAAS,KAAK,cAAc,SAAS,OAE3D,OAAOA,CAEX,CACA,GAAIA,EAAoB,OAAS,KAAK,cAAc,SAAS,OAE3D,OAAOA,CAEX,CACA,OAAOA,CACT,KAzFKpB,yCACJ4B,CAAK,CAAA,qBACLA,CAAK,CAAA,4BACLA,CAAK,CAAA,6BACLA,CAAK,CAAA,+BACLA,CAAK,CAAA,mBACLA,CAAK,CAAA,iCACLA,CAAK,CAAA,sCACLA,CAAK,CAAA,oCACLC,CAAM,CAAA,IATF7B,GAAMD,EAAuB+B,GAAA,CALnCC,EAAU,CACT,SAAU,qBACV,SAAAC,aAED,GACYjC,CAAuB,ECXpC,IAAAkC,EAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECAA,IAAAC,EAAA;AAAA;ECAM,SAAUC,GAAmBC,EAAY,CAC7C,OAAQA,EAAM,CACZ,IAAK,iBACH,MAAO,qCACT,IAAK,UACL,IAAK,UACH,MAAO,0CACT,IAAK,iBACH,MAAO,oCACT,IAAK,eACH,MAAO,8BACT,IAAK,wCACL,IAAK,wCACL,IAAK,oBACL,IAAK,sBACL,IAAK,gBACL,IAAK,gBACL,IAAK,eACL,IAAK,kCACL,IAAK,mBACL,IAAK,eACL,IAAK,mCACH,MAAO,+BACX,CACF,CAEM,SAAUC,EAAaC,EAAgB,CAE3C,OADsBC,GAAmBD,CAAQ,EAC1B,CACrB,IAAK,eACH,MAAO,+BACT,IAAK,eACH,MAAO,+BACT,IAAK,4BACL,IAAK,2BACH,MAAO,+BACT,IAAK,mBACL,IAAK,yBACL,IAAK,wBACL,IAAK,4BACH,MAAO,+BACT,IAAK,oBACH,MAAO,6BACT,IAAK,yBACH,MAAO,mCACT,IAAK,gBACH,MAAO,iCACT,IAAK,0BACH,MAAO,6BACT,IAAK,aACH,MAAO,6BACT,IAAK,wBACH,MAAO,gCACT,IAAK,aACH,MAAO,+BACT,IAAK,iBACH,MAAO,8BACT,IAAK,cACL,IAAK,mBACH,MAAO,6BACT,IAAK,kBACH,MAAO,iDACT,IAAK,oBACH,MAAO,6CACT,IAAK,aACH,MAAO,6BACT,IAAK,oBACL,IAAK,yBACH,MAAO,6BACT,IAAK,oBACH,MAAO,+BACT,IAAK,uBACH,MAAO,kCACT,IAAK,cACH,MAAO,mCACT,IAAK,eACL,IAAK,aACL,IAAK,aACL,IAAK,cACL,IAAK,wBACH,MAAO,8BACX,CACA,MAAO,EACT,CAEA,SAASC,GAAmBC,EAAY,CACtC,OAAQA,GAAQ,KACb,MAAM,GAAG,EAAE,CAAC,EACZ,MAAM,GAAG,EAAE,MAAM,EAAG,CAAC,EACrB,KAAK,GAAG,CACb,8UC/EaC,GAANC,EAAA,KAA0B,CAO/B,YAAoBC,EAA4B,CAA5BC,EAAA,sBANXA,EAAA,kBACAA,EAAA,2BACAA,EAAA,gCACAA,EAAA,qCACCA,EAAA,kCAAmD,IAAIC,GAE7C,KAAA,cAAAF,CACpB,CAEA,wBAAsB,CACpB,OAAO,KAAK,qBAAuB,QAAU,KAAK,qBAAuB,UAC3E,CAEA,aAAaG,EAAoB,CAC/B,OAAOC,EAAaD,CAAY,CAClC,CAEA,aAAaE,EAAgB,CACvB,KAAK,WAAWA,EAAQ,SAAS,EACnC,KAAK,cAAcA,EAAQ,SAAS,EAEpC,KAAK,YAAYA,CAAO,CAE5B,CAEA,YAAYA,EAAgB,CAC1B,KAAK,cAAc,aAAaA,CAAO,CACzC,CAEA,cAAcC,EAAiB,CAC7B,KAAK,cAAc,iBAAiBA,CAAS,EAC7C,KAAK,2BAA2B,KAAKA,CAAS,CAChD,CAEA,WAAWA,EAAiB,CAC1B,OAAO,KAAK,cAAc,WAAWA,CAAS,CAChD,KArCKP,qCAAAA,qCACJQ,CAAK,CAAA,4BACLA,CAAK,CAAA,iCACLA,CAAK,CAAA,sCACLA,CAAK,CAAA,oCACLC,CAAM,CAAA,IALFT,GAAMD,EAAoBW,GAAA,CANhCC,EAAU,CACT,SAAU,kBACV,SAAAC,aAED,GAEYb,CAAoB,ECXjC,IAAAcwBC,EACAC,EACAC,EAAyC,CAE/E,IAAMC,EAAaC,GAAkCJ,EAAQ,YAAaC,EAAcC,CAAmB,EAC3G,OAAMC,EACG,CACL,WAAYA,EAAW,WACvB,kBAAmBA,EAAW,kBAC9B,iBAAkBE,GAAqBF,EAAW,iBAAiB,EACnE,2BAA4BG,GAA0BH,EAAW,iBAAiB,GAG/E,IACT,CAIA,SAASC,GAAkCG,EACAN,EACAC,EAAyC,CAMlF,IAAIM,EAAkB,GAClBC,EAAkC,KAGtC,QAAWC,KAAoBH,EAAmB,CAChD,IAAMI,EAAkBC,GAAiCF,EAAkBT,EAAcC,CAAmB,EACtGS,IAEJH,EAAkB,GAEZG,EAAgB,oBACdF,EACJA,EAAgB,CACdA,EAAc,CAAC,EAAIE,EAAgB,kBAAkB,CAAC,EACtDF,EAAc,CAAC,EAAIE,EAAgB,kBAAkB,CAAC,GAGxDF,EAAgB,CACdE,EAAgB,kBAAkB,CAAC,EACnCA,EAAgB,kBAAkB,CAAC,IAK7C,CAGA,OAAIH,EACK,CACL,WAAYP,EACZ,kBAAmBQ,GAIhB,IACT,CAEA,SAASG,GAAiCF,EACAT,EACAC,EAAyC,CAEjF,IAAMW,EAAyBC,GAAyBJ,EAAiB,YAAY,EAErF,GAAIA,EAAiB,aAAeT,EAElC,MAAO,CACL,WAAYA,EACZ,kBAAmBY,GAIvB,GAAIH,EAAiB,iBAAmB,iBAAkB,CAExD,IAAMK,EAA6Bb,EAAoB,KAAKC,GAC1DA,EAAW,WAAW,aAAeO,EAAiB,UAAU,EAElE,GAAMK,GAAgCA,EAA2B,cAAe,CAC9E,IAAMC,EAAqBZ,GACzBW,EAA2B,cAAed,EAAcC,CAAmB,EAE7E,GAAMc,EAEJ,OAAMA,EAAmB,kBACjBH,EAEG,CACL,WAAYZ,EACZ,kBAAmB,CACjBY,EAAuB,CAAC,EAAIG,EAAmB,kBAAkB,CAAC,EAClEH,EAAuB,CAAC,EAAIG,EAAmB,kBAAkB,CAAC,IAK/D,CACL,WAAYf,EACZ,kBAAmBe,EAAmB,mBAKnC,CACL,WAAYf,EACZ,kBAAmBY,EAI3B,CACF,CAEA,OAAO,IACT,CAEA,SAASI,GAA6BR,EAAqB,CAEzD,OAAOA,EAAc,MADL,wCACkB,CACpC,CAEA,SAASK,GAAyBL,EAAqB,CACrD,GAAMA,EAAe,CACnB,IAAMS,EAAuBD,GAA6BR,CAAa,EACvE,GAAMS,EAAsB,CAC1B,IAAMC,EAAW,SAASD,EAAqB,CAAC,EAAG,EAAE,EAC/CE,EAAW,SAASF,EAAqB,CAAC,EAAG,EAAE,EACrD,GAAI,CAAC,MAAMC,CAAQ,GAAK,CAAC,MAAMC,CAAQ,EACrC,MAAO,CAACD,EAAUC,CAAQ,CAE9B,CACF,CACA,OAAO,IACT,CAEA,SAASd,GAA0BG,EAA+B,CAChE,GAAMA,EAAe,CACnB,IAAMU,EAAWV,EAAc,CAAC,EAC1BW,EAAWX,EAAc,CAAC,EAChC,OAAIU,IAAaC,EACRD,EAAS,SAAQ,EAEjB,GAAGA,CAAQ,IAAIC,CAAQ,EAElC,CACA,MAAO,GACT,CAEA,SAASf,GAAqBI,EAA+B,CAC3D,OAAMA,EACG,mCAAqCA,EAAc,CAAC,EAAI,eAAiBA,EAAc,CAAC,EAExF,iCAEX,kVCtIaY,GAANC,EAAA,KAAoC,CAezC,YAAoBC,EAA0C,CAA1CC,EAAA,6BAdXA,EAAA,kBACAA,EAAA,2BACAA,EAAA,oBACAA,EAAA,4BACAA,EAAA,8BACAA,EAAA,kBAETA,EAAA,4BACAA,EAAA,0BACAA,EAAA,eAEAA,EAAA,8BACAA,EAAA,kCAEoB,KAAA,qBAAAD,CACpB,CAEA,YAAYE,EAAsB,CAC1BA,EAAQ,cACZ,KAAK,kBAAiB,EACtB,KAAK,wBAAuB,GAE9B,KAAK,oBAAmB,EACxB,KAAK,+BAA8B,CACrC,CAEQ,qBAAmB,CACnB,KAAK,oBAAwB,KAAK,qBAAuB,KAAK,oBAAoB,OAAS,IAC3F,KAAK,qBAAuB,OAC9B,KAAK,0BAAyB,EACrB,KAAK,qBAAuB,WACrC,KAAK,8BAA6B,EAElC,KAAK,gCAA+B,EAG1C,CAEQ,mBAAiB,CACvB,KAAK,oBAAsB,CAAA,EAC3B,QAAWC,KAAc,KAAK,YAAa,CACzC,IAAMC,EAAeD,EAAW,iBAAmB,iBAC7CE,EAA4C,CAChD,WAAAF,EACA,OAAQ,GACR,aAAAC,EACA,SAAU,GACV,cAAe,KACf,cAAe,CAAA,EACf,eAAgB,GAEdA,GACF,KAAK,mBAAmBC,CAAqB,EAAE,UAAUC,GAAiBD,EAAsB,cAAgBC,CAAa,EAE/H,KAAK,oBAAoB,KAAKD,CAAqB,CACrD,CACF,CAEA,2BAA2BE,EAAS,CAGlC,GAFA,KAAK,oBAAoBA,CAAC,EAAE,SAAW,CAAC,KAAK,oBAAoBA,CAAC,EAAE,SAEhE,KAAK,oBAAoBA,CAAC,EAAE,SAAU,CAIxC,QAASC,EAAI,EAAGA,EAAI,KAAK,oBAAoB,OAAQA,IAC/CD,IAAMC,IACR,KAAK,oBAAoBA,CAAC,EAAE,SAAW,IAK3C,GAAM,KAAK,oBAAoBD,CAAC,EAAE,cAAe,CAC/C,IAAME,EAA6B,KAAK,oBAAoBF,CAAC,EAAE,cAAc,IAAIG,GAAaA,EAAU,UAAU,EAClH,QAASF,EAAI,EAAGA,EAAI,KAAK,oBAAoB,OAAQA,IAC/CD,IAAMC,IACR,KAAK,oBAAoBA,CAAC,EAAE,OAAS,CAAC,CAACC,EAAiB,SAAS,KAAK,oBAAoBD,CAAC,EAAE,WAAW,UAAU,EAGxH,CACF,KAGE,SAASA,EAAI,EAAGA,EAAI,KAAK,oBAAoB,OAAQA,IACnD,KAAK,oBAAoBA,CAAC,EAAE,OAAS,GAKzC,KAAK,oBAAmB,EACxB,KAAK,+BAA8B,CAErC,CAEQ,mBAAmBL,EAA8B,CAEvD,IAAMQ,EAAwB,KAAK,UAAU,KAAKC,GAAWA,EAAQ,YAAcT,EAAW,WAAW,UAAU,EACnH,OAAMQ,EACGE,EAAGF,EAAa,WAAW,EAG3B,KAAK,qBAAqB,qBAAqBR,EAAW,WAAW,UAAU,EACnF,KAAKW,EAAIF,GAAWA,GAAS,WAAW,CAAC,CAEhD,CAEQ,gCAA8B,CACpC,KAAK,kBAAoB,CAAA,EAEzB,QAAWA,KAAW,KAAK,UACzB,KAAK,kBAAkB,KAAK,KAAK,4BAA4BA,CAAO,CAAC,CAEzE,CAEQ,YAAYG,EAAgBC,EAAc,CAChD,OAAIA,IAAW,KACND,EAELA,IAAW,KACNC,EAEF,KAAK,IAAID,EAAQC,CAAM,CAChC,CAEQ,YAAYD,EAAgBC,EAAc,CAChD,OAAIA,IAAW,KACND,EAELA,IAAW,KACNC,EAEF,KAAK,IAAID,EAAQC,CAAM,CAChC,CAEQ,4BAA4BJ,EAAgB,CAClD,IAAMK,EAAmC,CACvC,QAAAL,EACA,qBAAsB,KACtB,mBAAoB,KACpB,uBAAwB,KACxB,qBAAsB,KACtB,oCAAqC,IAKvC,QAASL,EAAI,EAAGA,EAAI,KAAK,oBAAoB,OAAQA,IACnD,GAAI,CAAC,KAAK,oBAAoBA,CAAC,EAAE,QAE/B,GAAMW,EAAwBN,EAAS,KAAK,oBAAoBL,CAAC,EAAE,WAAW,WAAY,KAAK,mBAAmB,EAGhHU,EAAgB,qBAAuB,KAAK,YAAYA,EAAgB,qBAAsBV,CAAC,EAC3FU,EAAgB,uBAAyBV,IAE3CU,EAAgB,oCAAsC,IAExDA,EAAgB,mBAAqB,KAAK,YAAYA,EAAgB,mBAAoBV,CAAC,EAGvF,KAAK,oBAAoBA,CAAC,EAAE,cAAkB,KAAK,oBAAoBA,CAAC,EAAE,eACxE,KAAK,oBAAoBA,CAAC,EAAE,WAK9BU,EAAgB,uBAAyB,GACzCA,EAAgB,qBAAuB,KAAK,oBAAoBV,CAAC,EAAE,cAAc,OAAS,WAGrF,KAAK,oBAAoBA,CAAC,EAAE,cACnC,KAAK,oBAAoBA,CAAC,EAAE,eAC9B,KAAK,oBAAoBA,CAAC,EAAE,SAI5B,QAASY,EAAI,EAAGA,EAAI,KAAK,oBAAoBZ,CAAC,EAAE,cAAc,OAAQY,IAC9DD,EAAwBN,EAAS,KAAK,oBAAoBL,CAAC,EAAE,cAAcY,CAAC,EAAE,WAAY,KAAK,mBAAmB,IAGtHF,EAAgB,qBAAuB,KAAK,YAAYA,EAAgB,qBAAsBV,CAAC,EAC3FU,EAAgB,uBAAyBV,IAG3CU,EAAgB,oCAAsC,IAExDA,EAAgB,mBAAqB,KAAK,YAAYA,EAAgB,mBAAoBV,CAAC,EAG3FU,EAAgB,uBAAyB,KAAK,YAAYA,EAAgB,uBAAwBE,CAAC,EACnGF,EAAgB,qBAAuB,KAAK,YAAYA,EAAgB,qBAAsBE,CAAC,GAMzG,OAAOF,CACT,CAEO,+BAA6B,CAClC,KAAK,oBAAoB,KAAK,CAACG,EAAGC,IAAK,CACrC,GAAIA,EAAE,WAAW,eAAiBD,EAAE,WAAW,aAC7C,OAAOC,EAAE,eAAiBD,EAAE,eACvB,CACL,IAAME,EAA0B,KAAK,0BAA0B,IAAID,EAAE,WAAW,YAAY,EACtFE,EAA0B,KAAK,0BAA0B,IAAIH,EAAE,WAAW,YAAY,EAC5F,OAAIE,IAA4BC,EACvBF,EAAE,WAAW,aAAa,cAAcD,EAAE,WAAW,YAAY,EAEjEE,EAA0BC,CAErC,CACF,CAAC,EACD,KAAK,0BAAyB,CAChC,CAEO,2BAAyB,CAC9B,KAAK,oBAAoB,KAAK,CAACH,EAAGC,IAAK,CACrC,GAAIA,EAAE,WAAW,iBAAmBD,EAAE,WAAW,eAC/C,OAAOC,EAAE,eAAiBD,EAAE,eACvB,CACL,IAAMI,EAAsB,KAAK,sBAAsB,IAAIH,EAAE,WAAW,cAAc,EAChFI,EAAsB,KAAK,sBAAsB,IAAIL,EAAE,WAAW,cAAc,EACtF,OAAII,IAAwBC,EACnBJ,EAAE,WAAW,eAAe,cAAcD,EAAE,WAAW,cAAc,EAErEI,EAAsBC,CAEjC,CACF,CAAC,EACD,KAAK,sBAAqB,CAC5B,CAEO,iCAA+B,CACpC,KAAK,oBAAoB,KAAK,CAACL,EAAGC,IAChCA,EAAE,eAAiBD,EAAE,cAAc,EAErC,KAAK,OAAS,CAAA,CAChB,CAEO,uBAAqB,CAC1B,IAAMM,EAAS,CAAA,EACXC,EAAS,EACTC,EAAQ,KACZ,QAASrB,EAAI,EAAGA,EAAI,KAAK,oBAAoB,OAAQA,IAAK,CACxD,IAAMsB,EAAU,CAAA,EACX,KAAK,oBAAoBtB,CAAC,EAAE,SAC/BoB,GAAU,EACNC,IAAU,OACZA,EAAQrB,KAGR,CAAC,KAAK,oBAAoBA,EAAI,CAAC,GAC7B,KAAK,oBAAoBA,CAAC,EAAE,cAAgB,KAAK,oBAAoBA,CAAC,EAAE,UACzE,KAAK,oBAAoBA,CAAC,EAAE,WAAW,iBAAmB,KAAK,oBAAoBA,EAAI,CAAC,EAAE,WAAW,kBACpGqB,IAAU,OACZC,EAAQ,KAAK,KAAK,oBAAoBtB,CAAC,EAAE,WAAW,eAAgBoB,EAAQC,CAAK,EACjFF,EAAO,KAAKG,CAAO,EACnBD,EAAQ,MAEVD,EAAS,EAEb,CACA,KAAK,OAASD,CAChB,CAEO,2BAAyB,CAC9B,IAAMA,EAAS,CAAA,EACXC,EAAS,EACTC,EAAQ,KACZ,QAASrB,EAAI,EAAGA,EAAI,KAAK,oBAAoB,OAAQA,IAAK,CACxD,IAAMsB,EAAU,CAAA,EACX,KAAK,oBAAoBtB,CAAC,EAAE,SAC/BoB,GAAU,EACNC,IAAU,OACZA,EAAQrB,KAGR,CAAC,KAAK,oBAAoBA,EAAI,CAAC,GAC7B,KAAK,oBAAoBA,CAAC,EAAE,cAAgB,KAAK,oBAAoBA,CAAC,EAAE,UACzE,KAAK,oBAAoBA,CAAC,EAAE,WAAW,eAAiB,KAAK,oBAAoBA,EAAI,CAAC,EAAE,WAAW,gBAClGqB,IAAU,OACZC,EAAQ,KAAK,KAAK,oBAAoBtB,CAAC,EAAE,WAAW,aAAcoB,EAAQC,CAAK,EAC/EF,EAAO,KAAKG,CAAO,EACnBD,EAAQ,MAEVD,EAAS,EAEb,CACA,KAAK,OAASD,CAChB,CAEA,wBAAsB,CACpB,OAAO,KAAK,qBAAuB,QAAU,KAAK,qBAAuB,UAC3E,CAEA,oBAAoBnB,EAAWoB,EAAc,CAC3C,OAAIpB,IAAM,EACJoB,IAAW,EACN,oBAEA,mBAEApB,IAAMoB,EAAS,EACjB,kBAEF,IACT,CAEQ,yBAAuB,CAE7B,KAAK,sBAAwB,IAAI,IACjC,KAAK,0BAA4B,IAAI,IACrC,QAAWG,KAAiB,KAAK,oBAAqB,CAEpDA,EAAc,eAAiB,EAC/B,QAAWlB,KAAW,KAAK,UACXM,EAAwBN,EAASkB,EAAc,WAAW,WAAY,KAAK,mBAAmB,IAG1GA,EAAc,gBAAkB,EAEhC,KAAK,sBAAsB,IACzBA,EAAc,WAAW,gBACxB,KAAK,sBAAsB,IAAIA,EAAc,WAAW,cAAc,GAAK,GAAK,CAAC,EAEpF,KAAK,0BAA0B,IAC7BA,EAAc,WAAW,cACxB,KAAK,0BAA0B,IAAIA,EAAc,WAAW,YAAY,GAAK,GAAK,CAAC,EAG5F,CACF,KA7UK/B,qCAAAA,qCACJgC,CAAK,CAAA,4BACLA,CAAK,CAAA,qBACLA,CAAK,CAAA,6BACLA,CAAK,CAAA,+BACLA,CAAK,CAAA,mBACLA,CAAK,CAAA,IANDhC,GAAMD,EAA8BkC,GAAA,CAL1CC,EAAU,CACT,SAAU,6BACV,SAAAC,eAED,GACYpC,CAA8B,ECnC3C,IAAAqC,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECAA,IAAAC,GAAA;AAAA;+UCSaC,GAANC,EAAA,KAAkC,CAAlC,cAEIC,EAAA,uBACAA,EAAA,uBACAA,EAAA,qBACAA,EAAA,2BACAA,EAAA,uBACAA,EAAA,4BACAA,EAAA,8BACAA,EAAA,kBACAA,EAAA,yBACTA,EAAA,2BACAA,EAAA,+BACAA,EAAA,4BAEA,UAAQ,CACN,KAAK,mBAAqBC,GAAmB,KAAK,cAAc,EAChE,KAAK,uBAAyBC,EAAa,KAAK,kBAAkB,CACpE,CAEA,2BAA2BC,EAAkB,CAC3C,KAAK,oBAAsBA,CAC7B,KAtBKJ,0CAEJK,CAAK,CAAA,wBACLA,CAAK,CAAA,sBACLA,CAAK,CAAA,4BACLA,CAAK,CAAA,wBACLA,CAAK,CAAA,6BACLA,CAAK,CAAA,+BACLA,CAAK,CAAA,mBACLA,CAAK,CAAA,0BACLA,CAAK,CAAA,IAVDL,GAAMD,EAA4BO,GAAA,CALxCC,EAAU,CACT,SAAU,2BACV,SAAAC,eAED,GACYT,CAA4B,ECTzC,IAAAU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECAA,IAAAC,GAAA;AAAA;+UCOaC,GAANC,EAAA,KAA0C,CAA1C,cAEIC,EAAA,qBACAA,EAAA,uBACAA,EAAA,uBACAA,EAAA,yBACAA,EAAA,kBAECA,EAAA,2BAA6C,IAAIC,GAE3D,UAAQ,CACN,KAAK,iBAAgB,CACvB,CAEA,kBAAgB,CACd,OAAI,KAAK,kBAAoB,KAAK,iBAAmB,kBACnD,KAAK,oBAAoB,KAAK,EAAK,EAC5B,KAET,KAAK,oBAAoB,KAAK,CAAC,CAAC,KAAK,cAAc,EAC5C,CAAC,CAAC,KAAK,eAChB,KArBKF,wCAEJG,CAAK,CAAA,wBACLA,CAAK,CAAA,wBACLA,CAAK,CAAA,0BACLA,CAAK,CAAA,mBACLA,CAAK,CAAA,6BAELC,CAAM,CAAA,IARFJ,GAAMD,EAAoCM,GAAA,CALhDC,EAAU,CACT,SAAU,oCACV,SAAAC,eAED,GACYR,CAAoC,ECPjD,IAAAS,GAAA;AAAA;AAAA;AAAA;AAAA;ECAA,IAAAC,GAAA;AAAA;+UCOaC,GAANC,EAAA,KAA2C,CAA3C,cACIC,EAAA,0BACAA,EAAA,+BAFJD,6CACJE,CAAK,CAAA,4BACLA,CAAK,CAAA,IAFDF,GAAMD,EAAqCI,GAAA,CALjDC,EAAU,CACT,SAAU,oCACV,SAAAC,eAED,GACYN,CAAqC,ECPlD,IAAAO,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECAA,IAAAC,GAAA;AAAA;+UCSaC,GAANC,EAAA,KAAkC,CAAlC,cACIC,EAAA,gBACAA,EAAA,UACAA,EAAA,4BAETA,EAAA,4BACAA,EAAA,qBACAA,EAAA,wBAEA,aAAW,CACT,KAAK,oBAAsBC,EACzB,KAAK,QAAQ,QAAS,KAAK,WAAW,WAAW,WAAY,KAAK,mBAAmB,EACvF,KAAK,aAAe,KAAK,oBAAoB,KAAK,QAAS,KAAK,CAAC,EACjE,KAAK,gBAAkB,KAAK,uBAAuB,KAAK,QAAS,KAAK,CAAC,CACzE,CAEA,IAAI,YAAU,CACZ,OAAO,KAAK,oBAAoB,KAAK,CAAC,CACxC,CAEO,oBAAoBC,EAA0BC,EAAuB,CAI1E,OAHI,KAAK,4BAA4BD,EAASC,CAAe,GAGzD,KAAK,4BAA4BD,EAASC,CAAe,GAAK,CAAC,KAAK,8BAA8BD,EAASC,CAAe,EACrH,eAGF,yBACT,CAEO,uBAAuBD,EAA0BC,EAAuB,CAI7E,OAHI,KAAK,4BAA4BD,EAASC,CAAe,GAGzD,KAAK,8BAA8BD,EAASC,CAAe,GAAK,CAAC,KAAK,4BAA4BD,EAASC,CAAe,EACrH,eAGF,yBACT,CAEQ,4BAA4BD,EAA0BC,EAAuB,CACnF,MAAI,GAAAD,EAAQ,sBAAwB,MAAQA,EAAQ,oBAAsB,OAGpEA,EAAQ,qBAAuBC,GAAmBD,EAAQ,mBAAqBC,GAK/ED,EAAQ,qBAAuBC,GAAmBD,EAAQ,qBAAuBC,GAG/E,KAAK,oBAAoBA,CAAe,EAAE,cAAgB,KAAK,oBAAoBA,CAAe,EAAE,UAClGD,EAAQ,wBAA0B,MAAQA,EAAQ,sBAAwB,MAQtF,CAEQ,8BAA8BA,EAA0BC,EAAuB,CAErF,MAAI,GAAAD,EAAQ,sBAAwB,MAAQA,EAAQ,uBAAyBC,IAEvE,CAAC,KAAK,oBAAoBA,CAAe,EAAE,cAQ3CD,EAAQ,qCAMhB,CAEQ,4BAA4BA,EAA0BC,EAAuB,CAEnF,OAAID,EAAQ,oBAAsB,MAAQA,EAAQ,qBAAuBC,EAInE,OAAK,oBAAoBA,CAAe,EAAE,cAAgB,KAAK,oBAAoBA,CAAe,EAAE,UAClGD,EAAQ,wBAA0B,MAAQA,EAAQ,sBAAwB,MAM3E,EACT,KAnGKH,mCACJK,CAAK,CAAA,WACLA,CAAK,CAAA,6BACLA,CAAK,CAAA,IAHDL,GAAMD,EAA4BO,GAAA,CALxCC,EAAU,CACT,SAAU,2BACV,SAAAC,eAED,GACYT,CAA4B,ECTzC,IAAAU,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECAA,IAAAC,GAAA;AAAA;+UCWaC,GAANC,EAAA,KAA0C,CAA1C,cACIC,EAAA,gBACAA,EAAA,UACAA,EAAA,UACAA,EAAA,4BAETA,EAAA,4BACAA,EAAA,4BACAA,EAAA,+BAEA,aAAW,CACT,KAAK,oBAAsBC,EAAwB,KAAK,QAAQ,QAAS,KAAK,GAAG,WAAY,KAAK,mBAAmB,EACrH,KAAK,oBAAsB,KAAK,4BAA4B,KAAK,QAAS,KAAK,EAAG,KAAK,CAAC,EACxF,KAAK,uBAAyB,KAAK,+BAA+B,KAAK,QAAS,KAAK,EAAG,KAAK,CAAC,CAChG,CAGA,IAAI,YAAU,CACZ,OAAO,KAAK,oBAAoB,KAAK,CAAC,CACxC,CAEA,IAAI,IAAE,CACJ,OAAO,KAAK,oBAAoB,KAAK,CAAC,EAAE,cAAc,KAAK,CAAC,CAC9D,CAEO,4BAA4BC,EAA0BC,EAAyBC,EAAyB,CAI7G,OAHI,KAAK,8BAA8BF,EAASC,EAAiBC,CAAiB,GAG9E,KAAK,8BAA8BF,EAASC,EAAiBC,CAAiB,GAChF,CAAC,KAAK,gCAAgCF,EAASC,EAAiBC,CAAiB,EAC1E,eAGF,yBACT,CAEO,+BAA+BF,EAA0BC,EAAyBC,EAAyB,CAIhH,OAHI,KAAK,8BAA8BF,EAASC,EAAiBC,CAAiB,GAG9E,KAAK,gCAAgCF,EAASC,EAAiBC,CAAiB,GAClF,CAAC,KAAK,8BAA8BF,EAASC,EAAiBC,CAAiB,EACxE,eAGF,yBACT,CAEQ,8BAA8BF,EAA0BC,EAAyBC,EAAyB,CAChH,OAAIF,EAAQ,sBAAwB,MAAQA,EAAQ,oBAAsB,OAEpEA,EAAQ,qBAAuBC,GAAmBD,EAAQ,mBAAqBC,GAI/ED,EAAQ,wBAA0B,MAAQA,EAAQ,sBAAwB,OAExEA,EAAQ,uBAAyBE,GAAqBF,EAAQ,qBAAuBE,GAKrFF,EAAQ,qBAAuBC,GAAmBD,EAAQ,qBAAuBE,GAKjFF,EAAQ,uBAAyBE,GAAqBF,EAAQ,mBAAqBC,GAO7F,CAEQ,gCAAgCD,EAA0BC,EAAyBC,EAAyB,CAElH,OAAIF,EAAQ,sBAAwB,MAAQA,EAAQ,uBAAyBC,GACvED,EAAQ,wBAA0B,MAAQA,EAAQ,yBAA2BE,EAIxE,CAACF,EAAQ,QAAQ,YAAY,KAAKG,GACvC,KAAK,oBAAoBF,CAAe,EAAE,WAAW,aAAeE,EAAU,UAAU,EAKvF,EACT,CAEQ,8BAA8BH,EAA0BC,EAAyBC,EAAyB,CAChH,OAAIF,EAAQ,oBAAsB,MAAQA,EAAQ,qBAAuBC,GAEnED,EAAQ,sBAAwB,MAAQA,EAAQ,uBAAyBE,CAKjF,KArGKL,mCACJO,CAAK,CAAA,WACLA,CAAK,CAAA,WACLA,CAAK,CAAA,6BACLA,CAAK,CAAA,IAJDP,GAAMD,EAAoCS,GAAA,CANhDC,EAAU,CACT,SAAU,mCACV,SAAAC,eAED,GAEYX,CAAoC,ECXjD,IAAAY,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECAA,IAAAC,GAAA;AAAA;+UCOaC,GAANC,EAAA,KAAsC,CAAtC,cACKC,EAAA,gCAA2B,IAAIC,GAC/BD,EAAA,iCAA4B,IAAIC,GAChCD,EAAA,mCAA8B,IAAIC,GAClCD,EAAA,uBAAkB,IAAIC,GAEvBD,EAAA,2BACAA,EAAA,4BACAA,EAAA,8BACAA,EAAA,kBAETA,EAAA,sBAEA,UAAQ,CACN,KAAK,cAAa,CACpB,CAEA,0BAA0BE,EAAqB,CAC7C,KAAK,yBAAyB,KAAKA,CAAa,EAC5C,KAAK,gBAAkB,aACrBA,IAAkB,QACpB,KAAK,sBAAwB,GAC7B,KAAK,oBAAsB,IAClBA,IAAkB,aAC3B,KAAK,oBAAsB,GAC3B,KAAK,sBAAwB,IAE/B,KAAK,cAAa,EAEtB,CAEA,oBAAkB,CAChB,KAAK,oBAAsB,CAAC,KAAK,oBACjC,KAAK,cAAa,CACpB,CAEA,gBAAc,CACZ,KAAK,sBAAwB,CAAC,KAAK,sBACnC,KAAK,cAAa,CACpB,CAEA,cAAY,CACV,KAAK,UAAY,CAAC,KAAK,UACvB,KAAK,cAAa,CACpB,CAEA,eAAeC,EAAY,CACrBA,IAAS,UACX,KAAK,eAAc,EACVA,IAAS,YAClB,KAAK,gBAAe,CAExB,CAEA,gBAAc,CACZ,KAAK,oBAAsB,GAC3B,KAAK,sBAAwB,GAC7B,KAAK,UAAY,GACjB,KAAK,cAAgB,UACrB,KAAK,eAAc,CACrB,CAEA,iBAAe,CACb,KAAK,oBAAsB,GAC3B,KAAK,sBAAwB,GAC7B,KAAK,UAAY,GACjB,KAAK,cAAgB,WACrB,KAAK,eAAc,CACrB,CAEA,eAAa,CACP,KAAK,qBAAuB,KAAK,uBAAyB,KAAK,UACjE,KAAK,cAAgB,WAErB,KAAK,cAAgB,UAEvB,KAAK,eAAc,CACrB,CAEA,gBAAc,CACZ,KAAK,0BAA0B,KAAK,KAAK,mBAAmB,EAC5D,KAAK,4BAA4B,KAAK,KAAK,qBAAqB,EAChE,KAAK,gBAAgB,KAAK,KAAK,SAAS,CAC1C,KAnFKJ,oDACJK,CAAM,CAAA,mCACNA,CAAM,CAAA,qCACNA,CAAM,CAAA,yBACNA,CAAM,CAAA,4BAENC,CAAK,CAAA,6BACLA,CAAK,CAAA,+BACLA,CAAK,CAAA,mBACLA,CAAK,CAAA,IATDN,GAAMD,EAAgCQ,GAAA,CAL5CC,EAAU,CACT,SAAU,+BACV,SAAAC,eAED,GACYV,CAAgC,ECP7C,IAAAW,GAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ECAA,IAAAC,GAAA;AAAA;6UCEaC,GAAY,YACZC,GAAyB,2BAOzBC,GAANC,EAAA,KAAwC,CAAxC,cAEIC,EAAA,oBACCA,EAAA,yBAAoB,IAAIC,GAElC,aAAW,CACT,KAAK,YAAcL,GACnB,KAAK,kBAAkB,KAAK,KAAK,WAAW,CAC9C,CAEA,yBAAuB,CACrB,KAAK,YAAcC,GACnB,KAAK,kBAAkB,KAAK,KAAK,WAAW,CAC9C,CAEA,+BAA6B,CAC3B,OAAO,KAAK,cAAgBA,EAC9B,KAjBKE,uCAEJG,CAAK,CAAA,2BACLC,CAAM,CAAA,IAHFJ,GAAMD,EAAkCM,GAAA,CAL9CC,EAAU,CACT,SAAU,kCACV,SAAAC,eAED,GACYR,CAAkC,6UC4ClCS,GAAN,KAA4B,GAAtBA,GAAsBC,GAAA,CA1BlCC,EAAS,CACR,QAAS,CACPC,EACAC,EACAC,EACAC,EACAC,GAEF,QAAS,CACPC,EACAC,GAEF,aAAc,CACZD,EACAE,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAT,GAEH,GACYT,EAAsB",
  "names": ["complex_navigator_component_default", "complex_navigator_component_default", "ComplexNavigatorComponent", "_a", "__publicField", "output", "Input", "Output", "__decorate", "Component", "complex_navigator_component_default", "table_structure_component_default", "table_structure_component_default", "TableStructureComponent", "_a", "__publicField", "EventEmitter", "component", "interactor", "complex", "components", "subComplex", "complex1", "complex2", "components1", "components2", "c", "s", "c1", "complexesList", "comparedComplexes", "comparedComplex", "a", "b", "complexesOrderedSet", "complexesListSimilarities", "i", "similarityScore", "j", "complex3", "complex4", "similarityScore2nd", "Input", "Output", "__decorate", "Component", "table_structure_component_default", "table_header_component_default", "table_header_component_default", "interactorTypeIcon", "type", "organismIcon", "organism", "formatOrganismName", "name", "TableHeaderComponent", "_a", "basketService", "__publicField", "EventEmitter", "organismName", "organismIcon", "complex", "complexAC", "Input", "Output", "__decorate", "Component", "table_header_component_default", "table_interactor_column_component_default", "table_interactor_column_component_default", "findInteractorInComplex", "complex", "interactorId", "enrichedInteractors", "interactor", "findInteractorInComplexComponents", "getStoichiometryText", "formatStoichiometryValues", "complexComponents", "interactorFound", "stoichiometry", "complexComponent", "interactorMatch", "findInteractorInComplexComponent", "componentStoichiometry", "parseStoichiometryValues", "complexComponentInteractor", "subComponentsMatch", "fetchValuesFromStoichiometry", "matchedStoichiometry", "minValue", "maxValue", "TableInteractorColumnComponent", "_a", "complexPortalService", "__publicField", "changes", "interactor", "isSubComplex", "newEnrichedInteractor", "subComponents", "i", "j", "subInteractorIds", "component", "foundComplex", "complex", "of", "map", "valueA", "valueB", "enrichedComplex", "findInteractorInComplex", "k", "a", "b", "organismBTimesAppearing", "organismATimesAppearing", "typeBTimesAppearing", "typeATimesAppearing", "ranges", "length", "start", "oneType", "oneInteractor", "Input", "__decorate", "Component", "table_interactor_column_component_default", "table_interactor_name_component_default", "table_interactor_name_component_default", "TableInteractorNameComponent", "_a", "__publicField", "interactorTypeIcon", "organismIcon", "isVisible", "Input", "__decorate", "Component", "table_interactor_name_component_default", "table_interactor_external_link_component_default", "table_interactor_external_link_component_default", "TableInteractorExternalLinkComponent", "_a", "__publicField", "EventEmitter", "Input", "Output", "__decorate", "Component", "table_interactor_external_link_component_default", "table_interactor_stoichiometry_component_default", "table_interactor_stoichiometry_component_default", "TableInteractorStoichiometryComponent", "_a", "__publicField", "Input", "__decorate", "Component", "table_interactor_stoichiometry_component_default", "table_main_interactor_component_default", "table_main_interactor_component_default", "TableMainInteractorComponent", "_a", "__publicField", "findInteractorInComplex", "complex", "interactorIndex", "Input", "__decorate", "Component", "table_main_interactor_component_default", "table_subcomponent_interactor_component_default", "table_subcomponent_interactor_component_default", "TableSubcomponentInteractorComponent", "_a", "__publicField", "findInteractorInComplex", "complex", "interactorIndex", "subComponentIndex", "component", "Input", "__decorate", "Component", "table_subcomponent_interactor_component_default", "complex_navigator_buttons_component_default", "complex_navigator_buttons_component_default", "ComplexNavigatorButtonsComponent", "_a", "__publicField", "EventEmitter", "typeOfSorting", "type", "Output", "Input", "__decorate", "Component", "complex_navigator_buttons_component_default", "complex_list_display_buttons_component_default", "complex_list_display_buttons_component_default", "LIST_VIEW", "COMPLEX_NAVIGATOR_VIEW", "ComplexListDisplayButtonsComponent", "_a", "__publicField", "EventEmitter", "Input", "Output", "__decorate", "Component", "complex_list_display_buttons_component_default", "ComplexNavigatorModule", "__decorate", "NgModule", "RouterModule", "CommonModule", "ProgressSpinnerComponent", "MarkdownModule", "MatTooltipModule", "ComplexNavigatorComponent", "ComplexListDisplayButtonsComponent", "TableStructureComponent", "TableHeaderComponent", "TableInteractorColumnComponent", "TableInteractorNameComponent", "TableInteractorExternalLinkComponent", "TableInteractorStoichiometryComponent", "TableMainInteractorComponent", "TableSubcomponentInteractorComponent", "ComplexNavigatorButtonsComponent"]
}
