{"version":3,"mappings":"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","names":["ComplexNavigatorButtonsComponent","_angular_core__WEBPACK_IMPORTED_MODULE_2__","_createClass","key","value","updateDisplay","typeOfSorting","interactorsSortingChange","emit","typeOfDisplay","interactorTypeDisplay","organismIconDisplay","IDDisplay","type","compactDisplay","detailedDisplay","changesEmitter","organismIconDisplayChange","interactorTypeDisplayChange","IDDisplayChange","selector","template","LIST_VIEW","COMPLEX_NAVIGATOR_VIEW","ComplexListDisplayButtonsComponent","displayType","displayTypeChange","ComplexNavigatorComponent","ComplexNavigatorModule","_classCallCheck","imports","_angular_router__WEBPACK_IMPORTED_MODULE_13__","_angular_common__WEBPACK_IMPORTED_MODULE_14__","_shared_loading_indicators_progress_spinner_progress_spinner_module__WEBPACK_IMPORTED_MODULE_10__","ngx_markdown__WEBPACK_IMPORTED_MODULE_15__","_angular_material_tooltip__WEBPACK_IMPORTED_MODULE_16__","exports","_complex_navigator_component__WEBPACK_IMPORTED_MODULE_0__","_complex_list_display_buttons_complex_list_display_buttons_component__WEBPACK_IMPORTED_MODULE_11__","declarations","_table_structure_table_structure_component__WEBPACK_IMPORTED_MODULE_1__","_table_structure_table_header_table_header_component__WEBPACK_IMPORTED_MODULE_2__","_table_structure_table_interactor_column_table_interactor_column_component__WEBPACK_IMPORTED_MODULE_3__","_table_structure_table_interactor_column_table_interactor_name_table_interactor_name_component__WEBPACK_IMPORTED_MODULE_4__","_table_structure_table_interactor_column_table_interactor_external_link_table_interactor_external_link_component__WEBPACK_IMPORTED_MODULE_5__","_table_structure_table_interactor_column_table_interactor_stoichiometry_table_interactor_stoichiometry_component__WEBPACK_IMPORTED_MODULE_6__","_table_structure_table_interactor_column_table_main_interactor_table_main_interactor_component__WEBPACK_IMPORTED_MODULE_7__","_table_structure_table_interactor_column_table_subcomponent_interactor_table_subcomponent_interactor_component__WEBPACK_IMPORTED_MODULE_8__","_complex_navigator_buttons_complex_navigator_buttons_component__WEBPACK_IMPORTED_MODULE_9__","TableHeaderComponent","basketService","_angular_core__WEBPACK_IMPORTED_MODULE_4__","interactorsSorting","organismName","complex","isInBasket","complexAC","removeComplex","saveComplex","saveInBasket","deleteFromBasket","onComplexRemovedFromBasket","_shared_basket_service_basket_service__WEBPACK_IMPORTED_MODULE_3__","ComponentWithStoichiometry","findInteractorInComplex","interactorId","enrichedInteractors","interactor","findInteractorInComplexComponents","interactors","identifier","stochiometryValue","stochiometryText","getStoichiometryText","stochiometryValueFormatted","formatStoichiometryValues","complexComponents","interactorFound","stoichiometry","_step","complexComponent","interactorMatch","findInteractorInComplexComponent","_iterator","componentStoichiometry","parseStoichiometryValues","stochiometry","interactorType","complexComponentInteractor","find","subComponents","subComponentsMatch","fetchValuesFromStoichiometry","pattern","match","matchedStoichiometry","minValue","parseInt","maxValue","isNaN","toString","EnrichedInteractor","EnrichedComplex","TableInteractorColumnComponent","complexPortalService","changes","enrichInteractors","calculateTimesAppearing","classifyInteractors","calculateAllStartAndEndIndexes","length","classifyInteractorsByType","classifyInteractorsByOrganism","classifyInteractorsByOccurrence","_step2","isSubComplex","newEnrichedInteractor","hidden","expanded","partOfComplex","timesAppearing","_this","loadSubInteractors","subscribe","push","_loop","_iterator2","i","j","subInteractorIds","map","component","includes","foundComplex","complexes","getSimplifiedComplex","pipe","enrichedComplexes","_step3","calculateStartAndEndIndexes","_iterator3","valueA","valueB","Math","min","max","enrichedComplex","startInteractorIndex","endInteractorIndex","startSubComponentIndex","endSubComponentIndex","startInteractorIncludedWhenExpanded","getMinValue","getMaxValue","k","sort","a","b","organismBTimesAppearing","_this2","_timesAppearingByOrganism","get","organismATimesAppearing","localeCompare","rangeOfInteractorOrganism","typeBTimesAppearing","_this3","_timesAppearingByType","typeATimesAppearing","rangeOfInteractorType","ranges","start","oneType","Map","_step4","oneInteractor","_step5","set","_iterator5","_iterator4","_shared_service_complex_portal_service__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","TableInteractorExternalLinkComponent","showExternalLink","isMainInteractor","externalLinkVisible","identifierLink","TableInteractorNameComponent","interactorTypeIcon","interactorOrganismIcon","interactorOrganism","isVisible","_angular_core__WEBPACK_IMPORTED_MODULE_3__","TableInteractorStoichiometryComponent","TableMainInteractorComponent","interactorComponent","topLineClass","displayTopLineClass","bottomLineClass","displayBottomLineClass","interactorIndex","doesLineCrossInteractorCell","doesLineEndOnInteractorCell","doesLineStartOnInteractorCell","TableSubcomponentInteractorComponent","el","displayTopLineClassExpanded","displayBottomLineClassExpanded","subComponentIndex","doesLineCrossSubcomponentCell","doesLineEndOnSubcomponentCell","doesLineStartOnSubcomponentCell","some","_this4","TableStructureComponent","sortedComplexes","classifyComplexesSimilaritiesV2","complexSearch","elements","components","_step6","subComplex","getComponentAsComplex","getAllComponents","_iterator6","complex1","complex2","Set","size","_this5","c","_map2","components1","components2","_toConsumableArray","values","reduce","s","c1","has","complexesList","comparedComplexes","_step7","_step8","comparedComplex","calculateSimilarity","_iterator8","_iterator7","complexesOrderedSet","uniqueComplexesListOrderedBySimilarity","Array","from","complexesListSimilarities","similarityScore","add","complex3","complex4","similarityScore2nd","__webpack_exports__"],"sources":["webpack:///src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.module.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/complex-navigator-utils.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.ts","webpack:///src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.html","webpack:///src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.html","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.html"],"sourcesContent":["import {Component, EventEmitter, Input, Output, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-navigator-buttons',\n  templateUrl: './complex-navigator-buttons.component.html',\n  styleUrls: ['./complex-navigator-buttons.component.css']\n})\nexport class ComplexNavigatorButtonsComponent implements OnInit {\n  @Output() interactorsSortingChange = new EventEmitter<string>();\n  @Output() organismIconDisplayChange = new EventEmitter<boolean>();\n  @Output() interactorTypeDisplayChange = new EventEmitter<boolean>();\n  @Output() IDDisplayChange = new EventEmitter<boolean>();\n\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  typeOfDisplay: string;\n\n  ngOnInit() {\n    this.updateDisplay();\n  }\n\n  interactorsSortingChanges(typeOfSorting: string) {\n    this.interactorsSortingChange.emit(typeOfSorting);\n    if (this.typeOfDisplay === 'detailed') {\n      if (typeOfSorting === 'Type') {\n        this.interactorTypeDisplay = false;\n        this.organismIconDisplay = true;\n      } else if (typeOfSorting === 'Organism') {\n        this.organismIconDisplay = false;\n        this.interactorTypeDisplay = true;\n      }\n      this.updateDisplay();\n    }\n  }\n\n  DisplayingOrganism() {\n    this.organismIconDisplay = !this.organismIconDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingType() {\n    this.interactorTypeDisplay = !this.interactorTypeDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingID() {\n    this.IDDisplay = !this.IDDisplay;\n    this.updateDisplay();\n  }\n\n  setDisplayType(type: string) {\n    if (type === 'compact') {\n      this.compactDisplay();\n    } else if (type === 'detailed') {\n      this.detailedDisplay();\n    }\n  }\n\n  compactDisplay() {\n    this.organismIconDisplay = false;\n    this.interactorTypeDisplay = false;\n    this.IDDisplay = false;\n    this.typeOfDisplay = 'compact';\n    this.changesEmitter();\n  }\n\n  detailedDisplay() {\n    this.organismIconDisplay = true;\n    this.interactorTypeDisplay = true;\n    this.IDDisplay = true;\n    this.typeOfDisplay = 'detailed';\n    this.changesEmitter();\n  }\n\n  updateDisplay() {\n    if (this.organismIconDisplay || this.interactorTypeDisplay || this.IDDisplay) {\n      this.typeOfDisplay = 'detailed';\n    } else {\n      this.typeOfDisplay = 'compact';\n    }\n    this.changesEmitter();\n  }\n\n  changesEmitter() {\n    this.organismIconDisplayChange.emit(this.organismIconDisplay);\n    this.interactorTypeDisplayChange.emit(this.interactorTypeDisplay);\n    this.IDDisplayChange.emit(this.IDDisplay);\n  }\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\nexport const LIST_VIEW = 'view_list';\nexport const COMPLEX_NAVIGATOR_VIEW = 'view_complex_navigator';\n\n@Component({\n  selector: 'cp-complex-list-display-buttons',\n  templateUrl: './complex-list-display-buttons.component.html',\n  styleUrls: ['./complex-list-display-buttons.component.css']\n})\nexport class ComplexListDisplayButtonsComponent {\n\n  @Input() displayType: string;\n  @Output() displayTypeChange = new EventEmitter<string>();\n\n  setListView() {\n    this.displayType = LIST_VIEW;\n    this.displayTypeChange.emit(this.displayType);\n  }\n\n  setComplexNavigatorView() {\n    this.displayType = COMPLEX_NAVIGATOR_VIEW;\n    this.displayTypeChange.emit(this.displayType);\n  }\n\n  isDisplayComplexNavigatorView(): boolean {\n    return this.displayType === COMPLEX_NAVIGATOR_VIEW;\n  }\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-navigator',\n  templateUrl: './complex-navigator.component.html',\n  styleUrls: ['./complex-navigator.component.css']\n})\n\nexport class ComplexNavigatorComponent {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  interactorsSorting = 'Occurrence';\n  organismIconDisplay = true;\n  interactorTypeDisplay = true;\n  IDDisplay = true;\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MarkdownModule} from 'ngx-markdown';\nimport {ComplexNavigatorComponent} from './complex-navigator.component';\nimport {TableStructureComponent} from './table-structure/table-structure.component';\nimport {TableHeaderComponent} from './table-structure/table-header/table-header.component';\nimport {TableInteractorColumnComponent} from './table-structure/table-interactor-column/table-interactor-column.component';\nimport {\n  TableInteractorNameComponent\n} from './table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component';\nimport {\n  TableInteractorExternalLinkComponent\n} from './table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component';\nimport {\n  TableInteractorStoichiometryComponent\n} from './table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component';\nimport {\n  TableMainInteractorComponent\n} from './table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component';\nimport {\n  TableSubcomponentInteractorComponent\n} from './table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component';\nimport {ComplexNavigatorButtonsComponent} from '../complex-navigator-buttons/complex-navigator-buttons.component';\nimport {ProgressSpinnerModule} from '../../../shared/loading-indicators/progress-spinner/progress-spinner.module';\nimport {RouterModule} from '@angular/router';\nimport {ComplexListDisplayButtonsComponent} from './complex-list-display-buttons/complex-list-display-buttons.component';\nimport {MatTooltipModule} from '@angular/material/tooltip';\n\n@NgModule({\n  imports: [\n    RouterModule,\n    CommonModule,\n    ProgressSpinnerModule,\n    MarkdownModule,\n    MatTooltipModule\n  ],\n  exports: [\n    ComplexNavigatorComponent,\n    ComplexListDisplayButtonsComponent\n  ],\n  declarations: [\n    ComplexNavigatorComponent,\n    TableStructureComponent,\n    TableHeaderComponent,\n    TableInteractorColumnComponent,\n    TableInteractorNameComponent,\n    TableInteractorExternalLinkComponent,\n    TableInteractorStoichiometryComponent,\n    TableMainInteractorComponent,\n    TableSubcomponentInteractorComponent,\n    ComplexNavigatorButtonsComponent,\n    ComplexListDisplayButtonsComponent\n  ]\n})\nexport class ComplexNavigatorModule {\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\nimport {organismIcon} from '../../../../complex-portal-utils';\nimport {BasketService} from '../../../../../shared/basket/service/basket.service';\n\n@Component({\n  selector: 'cp-table-header',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css'],\n})\n\nexport class TableHeaderComponent {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private basketService: BasketService) {\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  iconOrganism(organismName: string) {\n    return organismIcon(organismName);\n  }\n\n  toggleBasket(complex: Element) {\n    if (this.isInBasket(complex.complexAC)) {\n      this.removeComplex(complex.complexAC);\n    } else {\n      this.saveComplex(complex);\n    }\n  }\n\n  saveComplex(complex: Element) {\n    this.basketService.saveInBasket(complex);\n  }\n\n  removeComplex(complexAC: string): void {\n    this.basketService.deleteFromBasket(complexAC);\n    this.onComplexRemovedFromBasket.emit(complexAC);\n  }\n\n  isInBasket(complexAC: string): boolean {\n    return this.basketService.isInBasket(complexAC);\n  }\n}\n","import {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedInteractor} from './table-interactor-column.component';\n\n\nexport class ComponentWithStoichiometry {\n  identifier: string;\n  stochiometryValue: [number, number];\n  stochiometryText?: string;\n  stochiometryValueFormatted?: string;\n}\n\nexport function findInteractorInComplex(complex: Element,\n                                        interactorId: string,\n                                        enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const interactor = findInteractorInComplexComponents(complex.interactors, interactorId, enrichedInteractors);\n  if (!!interactor) {\n    return {\n      identifier: interactor.identifier,\n      stochiometryValue: interactor.stochiometryValue,\n      stochiometryText: getStoichiometryText(interactor.stochiometryValue),\n      stochiometryValueFormatted: formatStoichiometryValues(interactor.stochiometryValue)\n    };\n  }\n  return null;\n}\n\n// Private functions\n\nfunction findInteractorInComplexComponents(complexComponents: ComplexComponent[],\n                                           interactorId: string,\n                                           enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  // We look for the interactor in the complex, as one of the components, or as part of any subcomplex of the complex, recursively.\n  // Even if we find a match for the interactor as one of the complex components, we keep looking at other components, as the interactor\n  // could also be part of a subcomplex, so the stoichiometry would need to be added for all matches.\n\n  let interactorFound = false;\n  let stoichiometry: [number, number] = null;\n\n  // We iterate through all the components of the complex to find matches\n  for (const complexComponent of complexComponents) {\n    const interactorMatch = findInteractorInComplexComponent(complexComponent, interactorId, enrichedInteractors);\n    if (!!interactorMatch) {\n      // We found a match for the interactor, on this component, or on a subcomponent of it in the case of a subcomplex\n      interactorFound = true;\n      // If we have any stoichiometry for the component, we add it to the total stoichiometry\n      if (!!interactorMatch.stochiometryValue) {\n        if (!!stoichiometry) {\n          stoichiometry = [\n            stoichiometry[0] + interactorMatch.stochiometryValue[0],\n            stoichiometry[1] + interactorMatch.stochiometryValue[1]\n          ];\n        } else {\n          stoichiometry = [\n            interactorMatch.stochiometryValue[0],\n            interactorMatch.stochiometryValue[1]\n          ];\n        }\n      }\n    }\n  }\n\n  // If we have found the interactor as part of one of the complex components, or part of a subcomplex, we return it\n  if (interactorFound) {\n    return {\n      identifier: interactorId,\n      stochiometryValue: stoichiometry\n    };\n  }\n\n  return null;\n}\n\nfunction findInteractorInComplexComponent(complexComponent: ComplexComponent,\n                                          interactorId: string,\n                                          enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const componentStoichiometry = parseStoichiometryValues(complexComponent.stochiometry);\n\n  if (complexComponent.identifier === interactorId) {\n    // The interactor is the complex component we are currently checking\n    return {\n      identifier: interactorId,\n      stochiometryValue: componentStoichiometry\n    };\n  }\n\n  if (complexComponent.interactorType === 'stable complex') {\n    // If the id does not match, and the component is a subcomplex, then we can look for the interactor in the subcomplex components\n    const complexComponentInteractor = enrichedInteractors.find(interactor =>\n      interactor.interactor.identifier === complexComponent.identifier);\n\n    if (!!complexComponentInteractor && !!complexComponentInteractor.subComponents) {\n      const subComponentsMatch = findInteractorInComplexComponents(\n        complexComponentInteractor.subComponents, interactorId, enrichedInteractors);\n\n      if (!!subComponentsMatch) {\n        // We have found the interactor in the subcomplex\n        if (!!subComponentsMatch.stochiometryValue) {\n          if (!!componentStoichiometry) {\n            // If we have stoichiometry for both the component and the subcomponent, we add both\n            return {\n              identifier: interactorId,\n              stochiometryValue: [\n                componentStoichiometry[0] * subComponentsMatch.stochiometryValue[0],\n                componentStoichiometry[1] * subComponentsMatch.stochiometryValue[1]\n              ]\n            };\n          } else {\n            // If we only have stoichiometry for the subcomponent, we use that stoichiometry\n            return {\n              identifier: interactorId,\n              stochiometryValue: subComponentsMatch.stochiometryValue\n            };\n          }\n        } else {\n          // If we only have stoichiometry for the component, we use that stoichiometry\n          return {\n            identifier: interactorId,\n            stochiometryValue: componentStoichiometry\n          };\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction fetchValuesFromStoichiometry(stoichiometry: string) {\n  const pattern = 'minValue: ([0-9+]), maxValue: ([0-9+])';\n  return stoichiometry.match(pattern);\n}\n\nfunction parseStoichiometryValues(stoichiometry: string): [number, number] {\n  if (!!stoichiometry) {\n    const matchedStoichiometry = fetchValuesFromStoichiometry(stoichiometry);\n    if (!!matchedStoichiometry) {\n      const minValue = parseInt(matchedStoichiometry[1], 10);\n      const maxValue = parseInt(matchedStoichiometry[2], 10);\n      if (!isNaN(minValue) && !isNaN(maxValue)) {\n        return [minValue, maxValue];\n      }\n    }\n  }\n  return null;\n}\n\nfunction formatStoichiometryValues(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n    const minValue = stoichiometry[0];\n    const maxValue = stoichiometry[1];\n    if (minValue === maxValue) {\n      return minValue.toString();\n    } else {\n      return `${minValue}-${maxValue}`;\n    }\n  }\n  return ' '; // sometimes we don't have the stoichiometry value\n}\n\nfunction getStoichiometryText(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n    return 'Stoichiometry values: minValue: ' + stoichiometry[0] + ', maxValue: ' + stoichiometry[1];\n  } else {\n    return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n  }\n}\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {Interactor} from '../../../../shared/model/complex-results/interactor.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {Observable} from 'rxjs/Observable';\nimport {of} from 'rxjs';\nimport {ComplexPortalService} from '../../../../shared/service/complex-portal.service';\nimport {map} from 'rxjs/operators';\nimport {findInteractorInComplex} from './complex-navigator-utils';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\n\nexport class EnrichedInteractor {\n  interactor: Interactor;\n  hidden: boolean;\n  isSubComplex: boolean;\n  expanded: boolean;\n  subComponents: ComplexComponent[];\n  partOfComplex: number[];\n  timesAppearing: number;\n}\n\nexport class EnrichedComplex {\n  complex: Element;\n  startInteractorIndex: number;\n  endInteractorIndex: number;\n  startSubComponentIndex: number;\n  endSubComponentIndex: number;\n  startInteractorIncludedWhenExpanded: boolean;\n}\n\n@Component({\n  selector: 'cp-table-interactor-column',\n  templateUrl: './table-interactor-column.component.html',\n  styleUrls: ['./table-interactor-column.component.css']\n})\nexport class TableInteractorColumnComponent implements OnChanges {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() interactors: Interactor[];\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  enrichedInteractors: EnrichedInteractor[];\n  enrichedComplexes: EnrichedComplex[];\n  ranges: number[];\n\n  _timesAppearingByType: Map<string, number>;\n  _timesAppearingByOrganism: Map<string, number>;\n\n  constructor(private complexPortalService: ComplexPortalService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!!changes['interactors']) {\n      this.enrichInteractors();\n      this.calculateTimesAppearing();\n    }\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  private classifyInteractors(): void {\n    if (!!this.interactorsSorting && !!this.enrichedInteractors && this.enrichedInteractors.length > 0) {\n      if (this.interactorsSorting === 'Type') {\n        this.classifyInteractorsByType();\n      } else if (this.interactorsSorting === 'Organism') {\n        this.classifyInteractorsByOrganism();\n      } else {\n        this.classifyInteractorsByOccurrence();\n      }\n    }\n  }\n\n  private enrichInteractors() {\n    this.enrichedInteractors = [];\n    for (const interactor of this.interactors) {\n      const isSubComplex = interactor.interactorType === 'stable complex';\n      const newEnrichedInteractor: EnrichedInteractor = {\n        interactor,\n        hidden: false,\n        isSubComplex,\n        expanded: false,\n        subComponents: null,\n        partOfComplex: [],\n        timesAppearing: 0,\n      };\n      if (isSubComplex) {\n        this.loadSubInteractors(newEnrichedInteractor).subscribe(subComponents => newEnrichedInteractor.subComponents = subComponents);\n      }\n      this.enrichedInteractors.push(newEnrichedInteractor);\n    }\n  }\n\n  toggleSubcomplexExpandable(i: number): void {\n    this.enrichedInteractors[i].expanded = !this.enrichedInteractors[i].expanded;\n\n    if (this.enrichedInteractors[i].expanded) {\n      // EnrichedInteractor has been expanded, we need to:\n\n      // 1. Collapse the other ones, in case there is any other expanded\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        if (i !== j) {\n          this.enrichedInteractors[j].expanded = false;\n        }\n      }\n\n      // 2. Hide any interactor now displayed in the expanded section\n      if (!!this.enrichedInteractors[i].subComponents) {\n        const subInteractorIds: string[] = this.enrichedInteractors[i].subComponents.map(component => component.identifier);\n        for (let j = 0; j < this.enrichedInteractors.length; j++) {\n          if (i !== j) {\n            this.enrichedInteractors[j].hidden = !!subInteractorIds.includes(this.enrichedInteractors[j].interactor.identifier);\n          }\n        }\n      }\n    } else {\n      // EnrichedInteractor has been collapsed, we need to:\n      // 1. Display any interactor previously hidden\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        this.enrichedInteractors[j].hidden = false;\n      }\n    }\n\n    // Something has been expanded or collapsed, we need to recalculate the start and end indexes for the lines\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n\n  }\n\n  private loadSubInteractors(interactor: EnrichedInteractor): Observable<ComplexComponent[]> {\n    // this function returns the list of subcomponents of an interactor of type stable complex\n    const foundComplex: Element = this.complexes.find(complex => complex.complexAC === interactor.interactor.identifier);\n    if (!!foundComplex) {\n      return of(foundComplex.interactors);\n    } else {\n      // Actually call the back-end to fetch these\n      return this.complexPortalService.getSimplifiedComplex(interactor.interactor.identifier)\n        .pipe(map(complex => complex?.interactors));\n    }\n  }\n\n  private calculateAllStartAndEndIndexes(): void {\n    this.enrichedComplexes = [];\n\n    for (const complex of this.complexes) {\n      this.enrichedComplexes.push(this.calculateStartAndEndIndexes(complex));\n    }\n  }\n\n  private getMinValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.min(valueA, valueB);\n  }\n\n  private getMaxValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.max(valueA, valueB);\n  }\n\n  private calculateStartAndEndIndexes(complex: Element): EnrichedComplex {\n    const enrichedComplex: EnrichedComplex = {\n      complex,\n      startInteractorIndex: null,\n      endInteractorIndex: null,\n      startSubComponentIndex: null,\n      endSubComponentIndex: null,\n      startInteractorIncludedWhenExpanded: true,\n    };\n\n    // We iterate through the interactors to find the first and last one part of the complex\n    // We do this to be able to draw a line connecting all interactors in the complex\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n\n        if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].interactor.identifier, this.enrichedInteractors)) {\n          // The interactor is part of the complex, we update the start and end indices for the interactors\n          // line as it may start in this interactor\n          enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n          if (enrichedComplex.startInteractorIndex === i) {\n            // The line starts in this interactor, so the line always starts in this interactor, even when expanded\n            enrichedComplex.startInteractorIncludedWhenExpanded = true;\n          }\n          enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n\n          // The interactor is a subcomplex\n          if (this.enrichedInteractors[i].isSubComplex && !!this.enrichedInteractors[i].subComponents) {\n            if (this.enrichedInteractors[i].expanded) {\n              // If the subcomplex is expanded, as the subcomplex is part of the complex, all its subcomponents are also part\n              // of it. That means we need a line connecting all the subcomponents.\n              // That line must also connect to the subcomplex, so we start it at -1 to make sure it starts at the interactor cell\n              // and not at the first subcomponent\n              enrichedComplex.startSubComponentIndex = -1;\n              enrichedComplex.endSubComponentIndex = this.enrichedInteractors[i].subComponents.length - 1;\n            }\n          }\n        } else if (this.enrichedInteractors[i].isSubComplex &&\n          !!this.enrichedInteractors[i].subComponents &&\n          this.enrichedInteractors[i].expanded) {\n          // The interactor is not part of the complex, but it is a subcomplex, and it is expanded.\n          // This means the subcomponents of the subcomplex are visible, and any of them could be part of the complex.\n          // In that case, the line could start or end on any of those subcomponents\n          for (let k = 0; k < this.enrichedInteractors[i].subComponents.length; k++) {\n            if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].subComponents[k].identifier, this.enrichedInteractors)) {\n              // The subcomponent of this interactor is part of the complex, we update the start and end indices for the interactors\n              // line as it may start in this interactor\n              enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n              if (enrichedComplex.startInteractorIndex === i) {\n                // The line starts in a subcomponent of the interactor, but not on the interactor itself,\n                // so the line does not start in the interactor when expanded\n                enrichedComplex.startInteractorIncludedWhenExpanded = false;\n              }\n              enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n              // The subcomponent of this interactor is part of the complex, we update the start and end indices for the subcomponents\n              // line as it may start in this subcomponent\n              enrichedComplex.startSubComponentIndex = this.getMinValue(enrichedComplex.startSubComponentIndex, k);\n              enrichedComplex.endSubComponentIndex = this.getMaxValue(enrichedComplex.endSubComponentIndex, k);\n            }\n          }\n        }\n      }\n    }\n    return enrichedComplex;\n  }\n\n  public classifyInteractorsByOrganism() {\n    this.enrichedInteractors.sort((a, b) => {\n      if (b.interactor.organismName === a.interactor.organismName) {\n        return b.timesAppearing - a.timesAppearing;\n      } else {\n        const organismBTimesAppearing = this._timesAppearingByOrganism.get(b.interactor.organismName);\n        const organismATimesAppearing = this._timesAppearingByOrganism.get(a.interactor.organismName);\n        if (organismBTimesAppearing === organismATimesAppearing) {\n          return b.interactor.organismName.localeCompare(a.interactor.organismName);\n        } else {\n          return organismBTimesAppearing - organismATimesAppearing;\n        }\n      }\n    });\n    this.rangeOfInteractorOrganism();\n  }\n\n  public classifyInteractorsByType() {\n    this.enrichedInteractors.sort((a, b) => {\n      if (b.interactor.interactorType === a.interactor.interactorType) {\n        return b.timesAppearing - a.timesAppearing;\n      } else {\n        const typeBTimesAppearing = this._timesAppearingByType.get(b.interactor.interactorType);\n        const typeATimesAppearing = this._timesAppearingByType.get(a.interactor.interactorType);\n        if (typeBTimesAppearing === typeATimesAppearing) {\n          return b.interactor.interactorType.localeCompare(a.interactor.interactorType);\n        } else {\n          return typeBTimesAppearing - typeATimesAppearing;\n        }\n      }\n    });\n    this.rangeOfInteractorType();\n  }\n\n  public classifyInteractorsByOccurrence() {\n    this.enrichedInteractors.sort((a, b) =>\n      b.timesAppearing - a.timesAppearing\n    );\n    this.ranges = [];\n  }\n\n  public rangeOfInteractorType() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.interactorType !== this.enrichedInteractors[i + 1].interactor.interactorType) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.interactorType, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  public rangeOfInteractorOrganism() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.organismName !== this.enrichedInteractors[i + 1].interactor.organismName) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.organismName, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  getExpandedRowClass(i: number, length: number): string {\n    if (i === 0) {\n      if (length === 1) {\n        return 'singleExpandedRow';\n      } else {\n        return 'firstExpandedRow';\n      }\n    } else if (i === length - 1) {\n      return 'lastExpandedRow';\n    }\n    return null;\n  }\n\n  private calculateTimesAppearing() {\n    // Initialise times appearing by type or organism\n    this._timesAppearingByType = new Map();\n    this._timesAppearingByOrganism = new Map();\n    for (const oneInteractor of this.enrichedInteractors) {\n      // Initialise times appearing for each interactor\n      oneInteractor.timesAppearing = 0;\n      for (const complex of this.complexes) {\n        const match = findInteractorInComplex(complex, oneInteractor.interactor.identifier, this.enrichedInteractors);\n        if (!!match) {\n          // Update times appearing for the interactor\n          oneInteractor.timesAppearing += 1;\n          // Update times appearing for the interactor type\n          this._timesAppearingByType.set(\n            oneInteractor.interactor.interactorType,\n            (this._timesAppearingByType.get(oneInteractor.interactor.interactorType) || 0) + 1);\n          // Update times appearing for the interactor organism\n          this._timesAppearingByOrganism.set(\n            oneInteractor.interactor.organismName,\n            (this._timesAppearingByOrganism.get(oneInteractor.interactor.organismName) || 0) + 1);\n        }\n      }\n    }\n  }\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-external-link',\n  templateUrl: './table-interactor-external-link.component.html',\n  styleUrls: ['./table-interactor-external-link.component.css']\n})\nexport class TableInteractorExternalLinkComponent implements OnInit {\n\n  @Input() interactorId: string;\n  @Input() identifierLink: string;\n  @Input() interactorType: string;\n  @Input() isMainInteractor: boolean;\n  @Input() IDDisplay: boolean;\n\n  @Output() externalLinkVisible: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  ngOnInit(): void {\n    this.showExternalLink();\n  }\n\n  showExternalLink(): boolean {\n    if (this.isMainInteractor && this.interactorType === 'stable complex') {\n      this.externalLinkVisible.emit(false);\n      return false;\n    }\n    this.externalLinkVisible.emit(!!this.identifierLink);\n    return !!this.identifierLink;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {interactorTypeIcon} from '../../../../../complex-portal-utils';\nimport {organismIcon} from '../../../../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-table-interactor-name',\n  templateUrl: './table-interactor-name.component.html',\n  styleUrls: ['./table-interactor-name.component.css']\n})\nexport class TableInteractorNameComponent implements OnInit {\n\n  @Input() interactorName: string;\n  @Input() interactorType: string;\n  @Input() interactorId: string;\n  @Input() interactorOrganism: string;\n  @Input() identifierLink: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() isMainInteractor: boolean;\n  interactorTypeIcon: string;\n  interactorOrganismIcon: string;\n  externalLinkVisible: boolean;\n\n  ngOnInit(): void {\n    this.interactorTypeIcon = interactorTypeIcon(this.interactorType);\n    this.interactorOrganismIcon = organismIcon(this.interactorOrganism);\n  }\n\n  externalLinkVisibleHandler(isVisible: boolean): void {\n    this.externalLinkVisible = isVisible;\n  }\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-stoichiometry',\n  templateUrl: './table-interactor-stoichiometry.component.html',\n  styleUrls: ['./table-interactor-stoichiometry.component.css']\n})\nexport class TableInteractorStoichiometryComponent {\n  @Input() stoichiometryText: string;\n  @Input() stoichiometryValue: string;\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-main-interactor',\n  templateUrl: './table-main-interactor.component.html',\n  styleUrls: ['./table-main-interactor.component.css']\n})\nexport class TableMainInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  topLineClass: string;\n  bottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(\n      this.complex.complex, this.interactor.interactor.identifier, this.enrichedInteractors);\n    this.topLineClass = this.displayTopLineClass(this.complex, this.i);\n    this.bottomLineClass = this.displayBottomLineClass(this.complex, this.i);\n  }\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  public displayTopLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnInteractorCell(complex, interactorIndex) && !this.doesLineStartOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnInteractorCell(complex, interactorIndex) && !this.doesLineEndOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n\n      // The line starts before this interactor and ends after, so it crosses through the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      // The line starts before this interactor and end at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor, and it must cross through the interactor cell to the subcomponents\n        if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n\n      if (!this.enrichedInteractors[interactorIndex].isSubComplex) {\n        // If the interactor is not a subcomplex, then the interactor has no subcomponents and the line starts in it\n        return true;\n      }\n      // If the interactor is a subcomplex.\n      // If the interactor is actually part of the complex, the line starts in this interactor\n      // Otherwise, the line actually starts on one of the subcomponents of the complex, but not on the interactor itself, as it is\n      // not part of the complex.\n      if (complex.startInteractorIncludedWhenExpanded) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line ends at this interactor or on any of its subcomponents\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n\n      // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n      // the line does not end in this interactor, and it must cross through to the subcomponents\n      if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n        if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-subcomponent-interactor',\n  templateUrl: './table-subcomponent-interactor.component.html',\n  styleUrls: ['./table-subcomponent-interactor.component.css']\n})\n\nexport class TableSubcomponentInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() j: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  displayTopLineClass: string;\n  displayBottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(this.complex.complex, this.el.identifier, this.enrichedInteractors);\n    this.displayTopLineClass = this.displayTopLineClassExpanded(this.complex, this.i, this.j);\n    this.displayBottomLineClass = this.displayBottomLineClassExpanded(this.complex, this.i, this.j);\n  }\n\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  get el(): ComplexComponent {\n    return this.enrichedInteractors[this.i].subComponents[this.j];\n  }\n\n  public displayTopLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n      // The line starts before this interactor and ends after, so it crosses through all the subcomponents of the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n        // The line starts before this subcomponent and ends after, so it crosses through the subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this interactor, and it ends on a later subcomponent, so it crosses through this subcomponent\n        if (complex.startInteractorIndex < interactorIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this subcomponent, and it ends on a later interactor, so it crosses through this subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endInteractorIndex > interactorIndex) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n      if (complex.startSubComponentIndex != null && complex.startSubComponentIndex === subComponentIndex) {\n        // If the subcomplex is a component of the complex, the line starts in the cell of the interactor, meaning it cannot\n        // start on any subcomponent.\n        // Otherwise, it starts on the subcomponent with the index subComponentIndex\n        return !complex.complex.interactors.some(component =>\n          this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier);\n\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n      // The line ends at this interactor and this subcomponent\n      if (complex.endSubComponentIndex != null && complex.endSubComponentIndex === subComponentIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n","import {Component, EventEmitter, Input, OnChanges, Output} from '@angular/core';\nimport {ComplexSearchResult} from '../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../shared/model/complex-results/interactor.model';\nimport {Element} from '../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../shared/model/complex-results/complex-component.model';\n\n@Component({\n  selector: 'cp-table-structure',\n  templateUrl: './table-structure.component.html',\n  styleUrls: ['./table-structure.component.css']\n})\nexport class TableStructureComponent implements OnChanges {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  sortedComplexes: Element[] = [];\n\n  ngOnChanges(): void {\n    this.sortedComplexes = this.classifyComplexesSimilaritiesV2(this.complexSearch.elements);\n  }\n\n  private getComponentAsComplex(component: ComplexComponent): Element | undefined {\n    return this.complexSearch.elements.find(interactor => interactor.complexAC === component.identifier);\n  }\n\n  private getAllComponents(complex?: Element, components: ComplexComponent[] = []): ComplexComponent[] {\n    for (const component of complex.interactors) {\n      if (component.interactorType === 'stable complex') {\n        const subComplex = this.getComponentAsComplex(component);\n        if (subComplex) {\n          components.push(...this.getAllComponents(subComplex));\n        } else {\n          components.push(component);\n        }\n      } else {\n        components.push(component);\n      }\n    }\n    return components;\n  }\n\n  private calculateSimilarity(complex1: Element, complex2: Element) {\n    if (complex1 === complex2) {\n      return new Set(this.getAllComponents(complex1)).size;\n    }\n\n    const [components1, components2] =\n      [complex1, complex2]\n        .map(complex => new Set(this.getAllComponents(complex).map(c => c.identifier)));\n\n    return [...components1.values()].reduce((s, c1) => components2.has(c1) ? s + 1 : s, 0);\n  }\n\n  classifyComplexesSimilaritiesV2(complexesList: Element[]) {\n    const comparedComplexes: [Element, Element, number][] = [];\n    for (const complex of complexesList) {\n      for (const comparedComplex of complexesList) {\n        // for unique comparison\n        if (complex.complexAC >= comparedComplex.complexAC) {\n          comparedComplexes.push([complex, comparedComplex, this.calculateSimilarity(complex, comparedComplex)]);\n        }\n      }\n    }\n    comparedComplexes.sort((a, b) => b[2] - a[2]); // sorting by similarityScore\n    const complexesOrderedSet = this.uniqueComplexesListOrderedBySimilarity(comparedComplexes);\n    // to be used in the table as a 1D array\n    return Array.from(complexesOrderedSet);\n  }\n\n  uniqueComplexesListOrderedBySimilarity(complexesListSimilarities: [Element, Element, number][]) {\n    const complexesOrderedSet = new Set<Element>();\n    for (let i = 0; i < complexesListSimilarities.length; i++) {\n      const [complex1, complex2, similarityScore] = complexesListSimilarities[i];\n      if (similarityScore !== 0) {\n        complexesOrderedSet.add(complex1);\n        complexesOrderedSet.add(complex2);\n        for (let j = i + 1; j < complexesListSimilarities.length; j++) {\n          const [complex3, complex4, similarityScore2nd] = complexesListSimilarities[j];\n          if (complex1 === complex3 && similarityScore2nd !== 0) {\n            complexesOrderedSet.add(complex4);\n          }\n        }\n        if (complexesOrderedSet.size === this.complexSearch.elements.length) {\n          // All complexes have been added, we can return and stop the loops\n          return complexesOrderedSet;\n        }\n      }\n      if (complexesOrderedSet.size === this.complexSearch.elements.length) {\n        // All complexes have been added, we can return and stop the loops\n        return complexesOrderedSet;\n      }\n    }\n    return complexesOrderedSet;\n  }\n}\n","export default \"<div class=\\\"filters\\\">\\n  <div class=\\\"sortingInteractors\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Sort components\\\" class=\\\"button\\\">\\n    <div class=\\\"typeOfSorting\\\">\\n      <input type=\\\"button\\\" name=\\\"occurrenceClassification\\\" value=\\\"Occurrence\\\" class=\\\"button\\\"\\n             (click)=\\\"interactorsSortingChanges('Occurrence')\\\">\\n      <input type=\\\"button\\\" name=\\\"typeClassification\\\" value=\\\"Type\\\" class=\\\"button\\\"\\n             (click)=\\\"interactorsSortingChanges('Type')\\\">\\n      <input type=\\\"button\\\" name=\\\"organismClassification\\\" value=\\\"Organism\\\" class=\\\"button\\\"\\n             (click)=\\\"interactorsSortingChanges('Organism')\\\">\\n      <!--      <input type=\\\"submit\\\" name=\\\"geneClassification\\\" value=\\\"Orthology (Not available yet)\\\" class=\\\"button\\\"-->\\n      <!--             (click)=\\\"InteractorsSortingChanges('Orthology')\\\">-->\\n    </div>\\n  </div>\\n\\n  <div class=\\\"dropdown\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Display Options\\\" class=\\\"button\\\">\\n    <ul class=\\\"displaySize\\\">\\n      <li>\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"displayType\\\" value=\\\"Compact\\\" class=\\\"checkbox compact\\\"\\n                 (click)=\\\"setDisplayType('compact')\\\" [checked]=\\\"typeOfDisplay === 'compact'\\\">\\n          Compact display\\n        </label>\\n      </li>\\n      <li class=\\\"detailedDisplay\\\">\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"displayType\\\" value=\\\"Detailed\\\" class=\\\"checkbox detailed\\\"\\n                 (click)=\\\"setDisplayType('detailed')\\\" [checked]=\\\"typeOfDisplay === 'detailed'\\\">\\n          Detailed display\\n        </label>\\n        <ul class=\\\"detailedDisplayOptions\\\">\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"organism\\\" value=\\\"organism\\\" class=\\\"checkbox\\\" [checked]=\\\"organismIconDisplay\\\"\\n                   (change)=\\\"DisplayingOrganism()\\\">\\n            Organism\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"type\\\" value=\\\"type\\\" class=\\\"checkbox\\\" [checked]=\\\"interactorTypeDisplay\\\"\\n                   (change)=\\\"DisplayingType()\\\">\\n            Type\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"id\\\" value=\\\"id\\\" class=\\\"checkbox\\\" [checked]=\\\"IDDisplay\\\"\\n                   (change)=\\\"DisplayingID()\\\">\\n            Interactor ID\\n          </li>\\n        </ul>\\n      </li>\\n    </ul>\\n  </div>\\n</div>\\n\";","export default \"<div class=\\\"displayButton columns medium-12\\\" [ngClass]=\\\"\\\">\\n  <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button\\\"\\n          (click)=\\\"setListView()\\\" [ngClass]=\\\"{'selected': !isDisplayComplexNavigatorView()}\\\">\\n    View list\\n  </button>\\n  <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button cnButton\\\"\\n          (click)=\\\"setComplexNavigatorView()\\\" [ngClass]=\\\"{'selected': isDisplayComplexNavigatorView()}\\\">\\n    View Complex Navigator\\n    <span class=\\\"new-tag\\\" [ngClass]=\\\"{'new-tag-selected': displayType === isDisplayComplexNavigatorView()}\\\">NEW!</span>\\n  </button>\\n</div>\\n\";","export default \"<div class=\\\"ComplexNavigator\\\">\\n  <div class=\\\"Buttons\\\" [ngClass]=\\\"complexSearch.totalNumberOfResults <=6 ? 'smallCNButtons' : ''\\\">\\n    <cp-complex-navigator-buttons\\n      [(interactorsSorting)]=\\\"interactorsSorting\\\"\\n      [(organismIconDisplay)]=\\\"organismIconDisplay\\\"\\n      [(interactorTypeDisplay)]=\\\"interactorTypeDisplay\\\"\\n      [(IDDisplay)]=\\\"IDDisplay\\\">\\n    </cp-complex-navigator-buttons>\\n  </div>\\n  <cp-table-structure [complexSearch]=\\\"complexSearch\\\"\\n                      [interactors]=\\\"interactors\\\"\\n                      [interactorsSorting]=\\\"interactorsSorting\\\"\\n                      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                      [IDDisplay]=\\\"IDDisplay\\\"\\n                      [canAddComplexesToBasket]=\\\"canAddComplexesToBasket\\\"\\n                      [canRemoveComplexesFromBasket]=\\\"canRemoveComplexesFromBasket\\\"\\n                      (onComplexRemovedFromBasket)=\\\"onComplexRemovedFromBasket.emit($event)\\\">\\n  </cp-table-structure>\\n</div>\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"table CN-table\\\">\\n    <!-- When table is not overflowing -->\\n    <thead class=\\\"tableHead\\\" *ngIf=\\\"complexes.length<=6\\\">\\n    <tr>\\n      <th *ngIf=\\\"isInteractorSortingSet()\\\" class=\\\"spaceHolderSorting\\\"></th>\\n      <th class=\\\"interactorsHeader horizontal\\\">\\n        Components\\n      </th>\\n      <th class=\\\"horizontal\\\" *ngFor=\\\"let complex of complexes\\\" [class.predicted]=\\\"complex.predictedComplex\\\">\\n        <div class=\\\"horizontal-label\\\">\\n          <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n             target=\\\"_blank\\\">\\n            <div>\\n              <span [matTooltip]=\\\"complex.complexName+ ' - '+ complex.complexAC + ' - ' + complex.organismName\\\">\\n                <div class=\\\"line\\\"></div>\\n                <i class=\\\"{{iconOrganism(complex.organismName)}}\\\"></i>\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                {{ complex.complexName }}\\n              </span>\\n            </div>\\n          </a>\\n        </div>\\n        <div class=\\\"basketButton\\\">\\n          <a class=\\\"button\\\" (click)=\\\"toggleBasket(complex)\\\">\\n            <i class=\\\"icon icon-common\\\" [attr.data-icon]=\\\"isInBasket(complex.complexAC) ? '':''\\\"></i>\\n          </a>\\n        </div>\\n      </th>\\n    </tr>\\n    </thead>\\n    <!-- When table is overflowing -->\\n    <thead class=\\\"tableHeadOverflow\\\" *ngIf=\\\"complexes.length > 6\\\"\\n           [ngClass]=\\\"isInteractorSortingSet() ? 'tableHeadOverflowWithSorting' : 'tableHeadOverflow'\\\">\\n    <tr [style.--cols]=\\\"complexes.length\\\"\\n        [style.--intHeader]=\\\"isInteractorSortingSet() ? '156px':''\\\"\\n        [style.--sizeSpaceHolder]=\\\"'185px'\\\">\\n      <th class=\\\"spaceHolderHeaderOverflow\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\\\">\\n      </th>\\n      <th class=\\\"rotate\\\" *ngFor=\\\"let complex of complexes\\\"\\n          [class.predicted]=\\\"complex.predictedComplex\\\"\\n          [style.--cols]=\\\"complexes.length\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           [matTooltip]=\\\"complex.complexName+ ' - '+ complex.complexAC\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span>\\n              <div class=\\\"tilted-label\\\">\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                {{ complex.complexName }}\\n              </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n      <div class=\\\"spaceHolder\\\"></div>\\n    </tr>\\n    <!-- icons row -->\\n    <tr [style.--cols]=\\\"complexes.length\\\"\\n        [style.--intHeader]=\\\"isInteractorSortingSet() ? '156px':''\\\"\\n        [style.--sizeSpaceHolder]=\\\"'185px'\\\">\\n      <th class=\\\"interactorsHeader overflow\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\\\">\\n        Components\\n      </th>\\n      <ng-container *ngFor=\\\" let complex of complexes;\\\">\\n        <th class=\\\"iconOrganism\\\" [class.predicted]=\\\"complex.predictedComplex\\\">\\n          <div>\\n            <a class=\\\"button\\\" (click)=\\\"toggleBasket(complex)\\\">\\n              <i class=\\\"icon icon-common\\\" [attr.data-icon]=\\\"isInBasket(complex.complexAC) ? '':''\\\"></i>\\n            </a>\\n          </div>\\n          <div>\\n            <i class=\\\"{{iconOrganism(complex.organismName)}}\\\" [matTooltip]=\\\"complex.organismName\\\"></i>\\n          </div>\\n        </th>\\n      </ng-container>\\n      <div class=\\\"spaceHolder\\\"></div>\\n    </tr>\\n    </thead>\\n  </table>\\n</div>\\n\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"interactors-table\\\"\\n         [ngClass]=\\\"{'inheritedWidth': complexes.length > 6}\\\"\\n         [style.--cols]=\\\"complexes.length\\\">\\n    <ng-container *ngFor=\\\" let interactor of enrichedInteractors; let i=index\\\">\\n      <tr *ngIf=\\\"!interactor.hidden\\\">\\n        <ng-container *ngFor=\\\"let oneType of ranges\\\" class=\\\"interactorsOrdering\\\">\\n          <td *ngIf=\\\"oneType[2]===i\\\" [attr.rowspan]=\\\"oneType[1]\\\" class=\\\"interactorSeparation\\\"\\n              [matTooltip]=\\\"oneType[0]\\\">\\n            <div class=\\\"interactorNameContainer\\\" [style.--rowspanSize]=\\\"oneType[1]\\\">\\n              {{ oneType[0] }}\\n            </div>\\n          </td>\\n        </ng-container>\\n        <td class=\\\"interactorsColumn\\\"\\n            [ngClass]=\\\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\\\"\\n            [style]=\\\"ranges.length!=0 ? 'left:3ch':''\\\">\\n          <cp-table-interactor-name\\n            [interactorName]=\\\"interactor.interactor.name\\\"\\n            [interactorType]=\\\"interactor.interactor.interactorType\\\"\\n            [interactorId]=\\\"interactor.interactor.identifier\\\"\\n            [interactorOrganism]=\\\"interactor.interactor.organismName\\\"\\n            [identifierLink]=\\\"interactor.interactor.identifierLink\\\"\\n            [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n            [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n            [IDDisplay]=\\\"IDDisplay\\\"\\n          ></cp-table-interactor-name>\\n          <!-- Icon for the expandable -->\\n          <div class=\\\"container\\\" *ngIf=\\\"interactor.isSubComplex\\\">\\n            <a (click)=\\\"toggleSubcomplexExpandable(i)\\\"\\n               [matTooltip]=\\\"interactor.interactor.name + ' components'\\\">\\n              Components\\n              <i class=\\\"icon icon-common\\\" data-icon=\\\"&#xf078;\\\"\\n                 style=\\\"font-size:small;\\n                \\\"></i>\\n            </a>\\n          </div>\\n        </td>\\n        <!-- Interactors' stoichiometry -->\\n        <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n          <td class=\\\"intStoich\\\" [ngClass]=\\\"{'intStoichFixedWidth': complexes.length > 6}\\\" [class.predicted]=\\\"complex.complex.predictedComplex\\\">\\n            <cp-table-main-interactor\\n              [complex]=\\\"complex\\\"\\n              [i]=\\\"i\\\"\\n              [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n            ></cp-table-main-interactor>\\n          </td>\\n        </ng-container>\\n        <div *ngIf=\\\"complexes.length>6\\\"\\n             [ngClass]=\\\"isInteractorSortingSet() ? 'spaceHolderWithSorting' : 'spaceHolder'\\\"></div>\\n      </tr>\\n      <!-- Expandable menu for subcomplexes -->\\n      <ng-container *ngIf=\\\"interactor.expanded\\\">\\n        <ng-container *ngIf=\\\"!!interactor.subComponents\\\">\\n          <tr *ngFor=\\\"let el of interactor.subComponents; let j=index\\\"\\n              class=\\\"expandedRows\\\"\\n              [ngClass]=\\\"getExpandedRowClass(j, interactor.subComponents.length)\\\">\\n            <td [attr.rowspan]=\\\"interactor.subComponents.length\\\" class=\\\"interactorSeparation\\\"\\n                [matTooltip]=\\\"interactor.interactor.name + ' components'\\\"\\n                *ngIf=\\\"j === 0 && (interactorsSorting === 'Type' || interactorsSorting === 'Organism')\\\">\\n              <div class=\\\"interactorSeparationName\\\"\\n                   [style.--rowspanSize]=\\\"interactor.subComponents.length\\\"> {{ interactor.interactor.name }} components\\n              </div>\\n            </td>\\n            <td class=\\\"subComponentColumn\\\"\\n                [ngClass]=\\\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\\\"\\n                [style]=\\\"ranges.length!=0 ? 'left:3ch':''\\\">\\n              <div>\\n                <cp-table-interactor-name\\n                  [interactorName]=\\\"el.name\\\"\\n                  [interactorType]=\\\"el.interactorType\\\"\\n                  [interactorId]=\\\"el.identifier\\\"\\n                  [interactorOrganism]=\\\"interactor.interactor.organismName\\\"\\n                  [identifierLink]=\\\"el.identifierLink\\\"\\n                  [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                  [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                  [IDDisplay]=\\\"IDDisplay\\\"\\n                ></cp-table-interactor-name>\\n              </div>\\n            </td>\\n            <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n              <td class=\\\"intStoich\\\" [ngClass]=\\\"{'intStoichFixedWidth': complexes.length > 6}\\\">\\n                <cp-table-subcomponent-interactor\\n                  [complex]=\\\"complex\\\"\\n                  [i]=\\\"i\\\"\\n                  [j]=\\\"j\\\"\\n                  [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n                ></cp-table-subcomponent-interactor>\\n              </td>\\n            </ng-container>\\n            <div class=\\\"spaceHolder\\\" *ngIf=\\\"enrichedComplexes.length > 6\\\"></div>\\n          </tr>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n  </table>\\n</div>\\n\";","export default \"<div class=\\\"externalLinkContainer\\\" [matTooltip]=\\\"'More information about ' + interactorId\\\">\\n  <a *ngIf=\\\"externalLinkVisible\\\" href=\\\"{{identifierLink}}\\\" target=\\\"_blank\\\" class=\\\"externalLinkContainer\\\">\\n    {{ interactorId }}\\n    <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\" title=\\\"More information about {{ interactorId }}\\\"></i>\\n  </a>\\n</div>\\n\";","export default \"<div class=\\\"container\\\">\\n  <div class=\\\"nameAndIcons\\\" [ngClass]=\\\"{inlineDisplay: interactorType==='stable complex'}\\\">\\n    <i *ngIf=\\\"organismIconDisplay\\\"\\n       class=\\\"{{interactorOrganismIcon}}\\\"\\n       [matTooltip]=\\\"interactorOrganism\\\"></i>\\n\\n    <i *ngIf=\\\"interactorTypeDisplay\\\"\\n       class=\\\"{{interactorTypeIcon}}\\\"\\n       [matTooltip]=\\\"interactorType\\\"></i>\\n\\n    <div class=\\\"name\\\" *ngIf=\\\"IDDisplay\\\" [matTooltip]=\\\"interactorId\\\"> {{ interactorName }}\\n    </div>\\n    <a *ngIf=\\\"IDDisplay\\\"\\n       [routerLink]=\\\"['/complex/search']\\\"\\n       [queryParams]=\\\"{query: interactorId, page: 1}\\\"\\n       target=\\\"_blank\\\">\\n      <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n         [matTooltip]=\\\"'More complexes containing ' + interactorName \\\"></i>\\n    </a>\\n\\n    <div class=\\\"nameCompact\\\" *ngIf=\\\"!IDDisplay\\\">\\n      <div class=\\\"name\\\" *ngIf=\\\"!IDDisplay\\\" [matTooltip]=\\\"'More information about ' + interactorName\\\">\\n        <a *ngIf=\\\"!!identifierLink\\\" href=\\\"{{identifierLink}}\\\" target=\\\"_blank\\\" class=\\\"externalLinkContainer\\\">\\n          {{ interactorName }}\\n        </a>\\n      </div>\\n      <a [routerLink]=\\\"['/complex/search']\\\"\\n         [queryParams]=\\\"{query: interactorId, page: 1}\\\"\\n         target=\\\"_blank\\\">\\n        <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n           [matTooltip]=\\\"'More complexes containing ' + interactorName \\\"></i>\\n      </a>\\n    </div>\\n  </div>\\n  <cp-table-interactor-external-link\\n    *ngIf=\\\"IDDisplay\\\"\\n    [interactorId]=\\\"interactorId\\\"\\n    [identifierLink]=\\\"identifierLink\\\"\\n    [interactorType]=\\\"interactorType\\\"\\n    [isMainInteractor]=\\\"isMainInteractor\\\"\\n    [IDDisplay]=\\\"IDDisplay\\\"\\n    (externalLinkVisible)=\\\"externalLinkVisibleHandler($event)\\\">\\n  </cp-table-interactor-external-link>\\n</div>\\n\";","export default \"<ng-container>\\n  <div class=\\\"stoichNum\\\" [matTooltip]=\\\"stoichiometryText\\\">\\n    {{ stoichiometryValue }}\\n  </div>\\n</ng-container>\\n\";","export default \"<div [ngClass]=\\\"topLineClass\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!interactorComponent\\\"\\n  [stoichiometryText]=\\\"interactorComponent.stochiometryText\\\"\\n  [stoichiometryValue]=\\\"interactorComponent.stochiometryValueFormatted\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"bottomLineClass\\\"></div>\\n\";","export default \"<div [ngClass]=\\\"displayTopLineClass\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!interactorComponent\\\"\\n  [stoichiometryText]=\\\"interactorComponent.stochiometryText\\\"\\n  [stoichiometryValue]=\\\"interactorComponent.stochiometryValueFormatted\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"displayBottomLineClass\\\"></div>\\n\";","export default \"<div class=\\\"complexNavigatorTable\\\">\\n  <div class=\\\"header\\\"\\n       (scroll)=\\\"body.scrollLeft = header.scrollLeft\\\" #header>\\n\\n    <cp-table-header [complexes]=\\\"sortedComplexes\\\"\\n                     [interactorsSorting]=\\\"interactorsSorting\\\"\\n                     [canAddComplexesToBasket]=\\\"canAddComplexesToBasket\\\"\\n                     [canRemoveComplexesFromBasket]=\\\"canRemoveComplexesFromBasket\\\"\\n                     (onComplexRemovedFromBasket)=\\\"onComplexRemovedFromBasket.emit($event)\\\">\\n    </cp-table-header>\\n  </div>\\n  <div class=\\\"interactors\\\"\\n       (scroll)=\\\"header.scrollLeft = body.scrollLeft\\\" #body>\\n    <cp-table-interactor-column\\n      [complexes]=\\\"sortedComplexes\\\"\\n      [interactors]=\\\"interactors\\\"\\n      [interactorsSorting]=\\\"interactorsSorting\\\"\\n      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n      [IDDisplay]=\\\"IDDisplay\\\">\\n    </cp-table-interactor-column>\\n  </div>\\n  <div class=\\\"spaceHolder\\\"></div>\\n</div>\\n\\n\";"]}