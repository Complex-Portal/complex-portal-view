{"version":3,"mappings":"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","names":["interactorTypeIcon","type","organismIcon","organism","formattedName","formatOrganismName","name","split","slice","join","ComplexNavigatorButtonsComponent","_angular_core__WEBPACK_IMPORTED_MODULE_2__","updateDisplay","typeOfSorting","interactorsSortingChange","emit","typeOfDisplay","interactorTypeDisplay","organismIconDisplay","IDDisplay","compactDisplay","detailedDisplay","changesEmitter","organismIconDisplayChange","interactorTypeDisplayChange","IDDisplayChange","selector","template","LIST_VIEW","COMPLEX_NAVIGATOR_VIEW","ComplexListDisplayButtonsComponent","displayType","displayTypeChange","ComplexNavigatorComponent","ComplexNavigatorModule","imports","_angular_router__WEBPACK_IMPORTED_MODULE_13__","_angular_common__WEBPACK_IMPORTED_MODULE_14__","_shared_loading_indicators_progress_spinner_progress_spinner_module__WEBPACK_IMPORTED_MODULE_10__","ngx_markdown__WEBPACK_IMPORTED_MODULE_15__","_angular_material_tooltip__WEBPACK_IMPORTED_MODULE_16__","exports","_complex_navigator_component__WEBPACK_IMPORTED_MODULE_0__","_complex_list_display_buttons_complex_list_display_buttons_component__WEBPACK_IMPORTED_MODULE_11__","declarations","_table_structure_table_structure_component__WEBPACK_IMPORTED_MODULE_1__","_table_structure_table_header_table_header_component__WEBPACK_IMPORTED_MODULE_2__","_table_structure_table_interactor_column_table_interactor_column_component__WEBPACK_IMPORTED_MODULE_3__","_table_structure_table_interactor_column_table_interactor_name_table_interactor_name_component__WEBPACK_IMPORTED_MODULE_4__","_table_structure_table_interactor_column_table_interactor_external_link_table_interactor_external_link_component__WEBPACK_IMPORTED_MODULE_5__","_table_structure_table_interactor_column_table_interactor_stoichiometry_table_interactor_stoichiometry_component__WEBPACK_IMPORTED_MODULE_6__","_table_structure_table_interactor_column_table_main_interactor_table_main_interactor_component__WEBPACK_IMPORTED_MODULE_7__","_table_structure_table_interactor_column_table_subcomponent_interactor_table_subcomponent_interactor_component__WEBPACK_IMPORTED_MODULE_8__","_complex_navigator_buttons_complex_navigator_buttons_component__WEBPACK_IMPORTED_MODULE_9__","TableHeaderComponent","basketService","_angular_core__WEBPACK_IMPORTED_MODULE_4__","interactorsSorting","organismName","complexName","complexAC","complexOrganism","isInBasket","removeComplex","saveComplex","saveInBasket","key","getKey","deleteFromBasket","onComplexRemovedFromBasket","_shared_basket_service_basket_service__WEBPACK_IMPORTED_MODULE_3__","ComponentWithStoichiometry","findInteractorInComplex","complex","interactorId","enrichedInteractors","interactor","findInteractorInComplexComponents","interactors","identifier","stochiometryValue","stochiometryText","getStoichiometryText","stochiometryValueFormatted","formatStoichiometryValues","complexComponents","interactorFound","stoichiometry","complexComponent","interactorMatch","findInteractorInComplexComponent","componentStoichiometry","parseStoichiometryValues","stochiometry","interactorType","complexComponentInteractor","find","subComponents","subComponentsMatch","fetchValuesFromStoichiometry","pattern","match","matchedStoichiometry","minValue","parseInt","maxValue","isNaN","toString","EnrichedInteractor","EnrichedComplex","TableInteractorColumnComponent","complexPortalService","changes","enrichInteractors","calculateTimesAppearing","classifyInteractors","calculateAllStartAndEndIndexes","length","classifyInteractorsByType","classifyInteractorsByOrganism","classifyInteractorsByOccurrence","isSubComplex","newEnrichedInteractor","hidden","expanded","partOfComplex","timesAppearing","loadSubInteractors","subscribe","push","i","j","subInteractorIds","map","component","includes","foundComplex","complexes","getSimplifiedComplex","pipe","enrichedComplexes","calculateStartAndEndIndexes","valueA","valueB","Math","min","max","enrichedComplex","startInteractorIndex","endInteractorIndex","startSubComponentIndex","endSubComponentIndex","startInteractorIncludedWhenExpanded","getMinValue","getMaxValue","k","sort","a","b","organismBTimesAppearing","_timesAppearingByOrganism","get","organismATimesAppearing","localeCompare","rangeOfInteractorOrganism","typeBTimesAppearing","_timesAppearingByType","typeATimesAppearing","rangeOfInteractorType","ranges","start","oneType","Map","oneInteractor","set","_shared_service_complex_portal_service__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","TableInteractorExternalLinkComponent","showExternalLink","isMainInteractor","externalLinkVisible","identifierLink","TableInteractorNameComponent","interactorOrganismIcon","interactorOrganism","isVisible","_angular_core__WEBPACK_IMPORTED_MODULE_3__","TableInteractorStoichiometryComponent","TableMainInteractorComponent","interactorComponent","topLineClass","displayTopLineClass","bottomLineClass","displayBottomLineClass","interactorIndex","doesLineCrossInteractorCell","doesLineEndOnInteractorCell","doesLineStartOnInteractorCell","TableSubcomponentInteractorComponent","el","displayTopLineClassExpanded","displayBottomLineClassExpanded","subComponentIndex","doesLineCrossSubcomponentCell","doesLineEndOnSubcomponentCell","doesLineStartOnSubcomponentCell","some","TableStructureComponent","sortedComplexes","classifyComplexesSimilaritiesV2","complexSearch","elements","components","subComplex","getComponentAsComplex","getAllComponents","complex1","complex2","Set","size","c","components1","components2","values","reduce","s","c1","has","complexesList","comparedComplexes","comparedComplex","calculateSimilarity","complexesOrderedSet","uniqueComplexesListOrderedBySimilarity","Array","from","complexesListSimilarities","similarityScore","add","complex3","complex4","similarityScore2nd","__webpack_exports__"],"sources":["webpack:///src/app/complex/complex-portal-utils.ts","webpack:///src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.module.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/complex-navigator-utils.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.ts","webpack:///src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.html","webpack:///src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.html","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.html"],"sourcesContent":["export function interactorTypeIcon(type: string): string {\n  switch (type) {\n    case 'small molecule':\n      return 'icon icon-conceptual icon-chemical';\n    case 'protein':\n    case 'peptide':\n      return 'icon icon-conceptual icon-structures-3d';\n    case 'stable complex':\n      return 'icon icon-conceptual icon-systems';\n    case 'molecule set':\n      return 'icon icon-generic icon-math';\n    case 'single stranded deoxyribonucleic acid':\n    case 'double stranded deoxyribonucleic acid':\n    case 'small nuclear rna':\n    case 'small nucleolar rna':\n    case 'ribosomal rna':\n    case 'messenger rna':\n    case 'transfer rna':\n    case 'signal recognition particle rna':\n    case 'ribonucleic acid':\n    case 'nucleic acid':\n    case 'long non-coding ribonucleic acid':\n      return 'icon icon-conceptual icon-dna';\n  }\n}\n\nexport function organismIcon(organism: string): string {\n  const formattedName = formatOrganismName(organism);\n  switch (formattedName) {\n    case 'Homo sapiens':\n      return 'icon icon-species icon-human';\n    case 'Mus musculus':\n      return 'icon icon-species icon-mouse';\n    case 'Schizosaccharomyces pombe':\n    case 'Saccharomyces cerevisiae':\n      return 'icon icon-species icon-yeast';\n    case 'Escherichia coli':\n    case 'Pseudomonas aeruginosa':\n      return 'icon icon-species icon-ecoli';\n    case 'Rattus norvegicus':\n      return 'icon icon-species icon-rat';\n    case 'Caenorhabditis elegans':\n      return 'icon icon-species icon-c-elegans';\n    case 'Gallus gallus':\n      return 'icon icon-species icon-chicken';\n    case 'Drosophila melanogaster':\n      return 'icon icon-species icon-fly';\n    case 'Bos taurus':\n      return 'icon icon-species icon-cow';\n    case 'Oryctolagus cuniculus':\n      return 'icon icon-species icon-rabbit';\n    case 'Ovis aries':\n      return 'icon icon-species icon-sheep';\n    case 'Xenopus laevis':\n      return 'icon icon-species icon-frog';\n    case 'Canis lupus':\n    case 'Canis familiaris':\n      return 'icon icon-species icon-dog';\n    case 'Vibrio cholerae':\n      return 'assets/images/EMBL_Species_Vibrio_cholerae.svg';\n    case 'Crotalus durissus':\n      return 'assets/images/EMBL_Species_RattleSnake.svg';\n    case 'Sus scrofa':\n      return 'icon icon-species icon-pig';\n    case 'Torpedo marmorata':\n    case 'Tetronarce californica':\n      return 'icon icon-species icon-ray';\n    case 'Lymnaea stagnalis':\n      return 'icon icon-species icon-snail';\n    case 'Arabidopsis thaliana':\n      return 'icon icon-species icon-brassica';\n    case 'Danio rerio':\n      return 'icon icon-species icon-zebrafish';\n    case 'Severe acute':\n    case 'Human SARS' :\n    case 'SARS-CoV-2':\n    case 'Middle East':\n    case 'Human betacoronavirus':\n      return 'icon icon-species icon-virus';\n  }\n  return '';\n}\n\nfunction formatOrganismName(name: string): string {\n  return (name || '?')\n    .split(';')[0]\n    .split(' ').slice(0, 2)\n    .join(' ');\n}\n","import {Component, EventEmitter, Input, Output, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-navigator-buttons',\n  templateUrl: './complex-navigator-buttons.component.html',\n  styleUrls: ['./complex-navigator-buttons.component.css']\n})\nexport class ComplexNavigatorButtonsComponent implements OnInit {\n  @Output() interactorsSortingChange = new EventEmitter<string>();\n  @Output() organismIconDisplayChange = new EventEmitter<boolean>();\n  @Output() interactorTypeDisplayChange = new EventEmitter<boolean>();\n  @Output() IDDisplayChange = new EventEmitter<boolean>();\n\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  typeOfDisplay: string;\n\n  ngOnInit() {\n    this.updateDisplay();\n  }\n\n  interactorsSortingChanges(typeOfSorting: string) {\n    this.interactorsSortingChange.emit(typeOfSorting);\n    if (this.typeOfDisplay === 'detailed') {\n      if (typeOfSorting === 'Type') {\n        this.interactorTypeDisplay = false;\n        this.organismIconDisplay = true;\n      } else if (typeOfSorting === 'Organism') {\n        this.organismIconDisplay = false;\n        this.interactorTypeDisplay = true;\n      }\n      this.updateDisplay();\n    }\n  }\n\n  DisplayingOrganism() {\n    this.organismIconDisplay = !this.organismIconDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingType() {\n    this.interactorTypeDisplay = !this.interactorTypeDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingID() {\n    this.IDDisplay = !this.IDDisplay;\n    this.updateDisplay();\n  }\n\n  setDisplayType(type: string) {\n    if (type === 'compact') {\n      this.compactDisplay();\n    } else if (type === 'detailed') {\n      this.detailedDisplay();\n    }\n  }\n\n  compactDisplay() {\n    this.organismIconDisplay = false;\n    this.interactorTypeDisplay = false;\n    this.IDDisplay = false;\n    this.typeOfDisplay = 'compact';\n    this.changesEmitter();\n  }\n\n  detailedDisplay() {\n    this.organismIconDisplay = true;\n    this.interactorTypeDisplay = true;\n    this.IDDisplay = true;\n    this.typeOfDisplay = 'detailed';\n    this.changesEmitter();\n  }\n\n  updateDisplay() {\n    if (this.organismIconDisplay || this.interactorTypeDisplay || this.IDDisplay) {\n      this.typeOfDisplay = 'detailed';\n    } else {\n      this.typeOfDisplay = 'compact';\n    }\n    this.changesEmitter();\n  }\n\n  changesEmitter() {\n    this.organismIconDisplayChange.emit(this.organismIconDisplay);\n    this.interactorTypeDisplayChange.emit(this.interactorTypeDisplay);\n    this.IDDisplayChange.emit(this.IDDisplay);\n  }\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\nexport const LIST_VIEW = 'view_list';\nexport const COMPLEX_NAVIGATOR_VIEW = 'view_complex_navigator';\n\n@Component({\n  selector: 'cp-complex-list-display-buttons',\n  templateUrl: './complex-list-display-buttons.component.html',\n  styleUrls: ['./complex-list-display-buttons.component.css']\n})\nexport class ComplexListDisplayButtonsComponent {\n\n  @Input() displayType: string;\n  @Output() displayTypeChange = new EventEmitter<string>();\n\n  setListView() {\n    this.displayType = LIST_VIEW;\n    this.displayTypeChange.emit(this.displayType);\n  }\n\n  setComplexNavigatorView() {\n    this.displayType = COMPLEX_NAVIGATOR_VIEW;\n    this.displayTypeChange.emit(this.displayType);\n  }\n\n  isDisplayComplexNavigatorView(): boolean {\n    return this.displayType === COMPLEX_NAVIGATOR_VIEW;\n  }\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-navigator',\n  templateUrl: './complex-navigator.component.html',\n  styleUrls: ['./complex-navigator.component.css']\n})\n\nexport class ComplexNavigatorComponent {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  interactorsSorting = 'Occurrence';\n  organismIconDisplay = true;\n  interactorTypeDisplay = true;\n  IDDisplay = true;\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MarkdownModule} from 'ngx-markdown';\nimport {ComplexNavigatorComponent} from './complex-navigator.component';\nimport {TableStructureComponent} from './table-structure/table-structure.component';\nimport {TableHeaderComponent} from './table-structure/table-header/table-header.component';\nimport {TableInteractorColumnComponent} from './table-structure/table-interactor-column/table-interactor-column.component';\nimport {\n  TableInteractorNameComponent\n} from './table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component';\nimport {\n  TableInteractorExternalLinkComponent\n} from './table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component';\nimport {\n  TableInteractorStoichiometryComponent\n} from './table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component';\nimport {\n  TableMainInteractorComponent\n} from './table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component';\nimport {\n  TableSubcomponentInteractorComponent\n} from './table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component';\nimport {ComplexNavigatorButtonsComponent} from '../complex-navigator-buttons/complex-navigator-buttons.component';\nimport {ProgressSpinnerModule} from '../../../shared/loading-indicators/progress-spinner/progress-spinner.module';\nimport {RouterModule} from '@angular/router';\nimport {ComplexListDisplayButtonsComponent} from './complex-list-display-buttons/complex-list-display-buttons.component';\nimport {MatTooltipModule} from '@angular/material/tooltip';\n\n@NgModule({\n  imports: [\n    RouterModule,\n    CommonModule,\n    ProgressSpinnerModule,\n    MarkdownModule,\n    MatTooltipModule\n  ],\n  exports: [\n    ComplexNavigatorComponent,\n    ComplexListDisplayButtonsComponent\n  ],\n  declarations: [\n    ComplexNavigatorComponent,\n    TableStructureComponent,\n    TableHeaderComponent,\n    TableInteractorColumnComponent,\n    TableInteractorNameComponent,\n    TableInteractorExternalLinkComponent,\n    TableInteractorStoichiometryComponent,\n    TableMainInteractorComponent,\n    TableSubcomponentInteractorComponent,\n    ComplexNavigatorButtonsComponent,\n    ComplexListDisplayButtonsComponent\n  ]\n})\nexport class ComplexNavigatorModule {\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\nimport {organismIcon} from '../../../../complex-portal-utils';\nimport {BasketService} from '../../../../../shared/basket/service/basket.service';\n\n@Component({\n  selector: 'cp-table-header',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css'],\n})\n\nexport class TableHeaderComponent {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private basketService: BasketService) {\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  iconOrganism(organismName: string) {\n    return organismIcon(organismName);\n  }\n\n  toggleBasket(complexName: string, complexAC: string, complexOrganism: string) {\n    if (this.isInBasket(complexAC)) {\n      this.removeComplex(complexAC);\n    } else {\n      this.saveComplex(complexName, complexAC, complexOrganism);\n    }\n  }\n\n  saveComplex(complexName: string, complexAC: string, complexOrganism: string) {\n    this.basketService.saveInBasket(complexName, complexAC, complexOrganism);\n  }\n\n  removeComplex(complexAC: string): void {\n    const key = this.basketService.getKey(complexAC);\n    this.basketService.deleteFromBasket(key);\n    this.onComplexRemovedFromBasket.emit(complexAC);\n  }\n\n  isInBasket(complexAC: string): boolean {\n    return this.basketService.isInBasket(complexAC);\n  }\n}\n","import {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedInteractor} from './table-interactor-column.component';\n\n\nexport class ComponentWithStoichiometry {\n  identifier: string;\n  stochiometryValue: [number, number];\n  stochiometryText?: string;\n  stochiometryValueFormatted?: string;\n}\n\nexport function findInteractorInComplex(complex: Element,\n                                        interactorId: string,\n                                        enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const interactor = findInteractorInComplexComponents(complex.interactors, interactorId, enrichedInteractors);\n  if (!!interactor) {\n    return {\n      identifier: interactor.identifier,\n      stochiometryValue: interactor.stochiometryValue,\n      stochiometryText: getStoichiometryText(interactor.stochiometryValue),\n      stochiometryValueFormatted: formatStoichiometryValues(interactor.stochiometryValue)\n    };\n  }\n  return null;\n}\n\n// Private functions\n\nfunction findInteractorInComplexComponents(complexComponents: ComplexComponent[],\n                                           interactorId: string,\n                                           enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  // We look for the interactor in the complex, as one of the components, or as part of any subcomplex of the complex, recursively.\n  // Even if we find a match for the interactor as one of the complex components, we keep looking at other components, as the interactor\n  // could also be part of a subcomplex, so the stoichiometry would need to be added for all matches.\n\n  let interactorFound = false;\n  let stoichiometry: [number, number] = null;\n\n  // We iterate through all the components of the complex to find matches\n  for (const complexComponent of complexComponents) {\n    const interactorMatch = findInteractorInComplexComponent(complexComponent, interactorId, enrichedInteractors);\n    if (!!interactorMatch) {\n      // We found a match for the interactor, on this component, or on a subcomponent of it in the case of a subcomplex\n      interactorFound = true;\n      // If we have any stoichiometry for the component, we add it to the total stoichiometry\n      if (!!interactorMatch.stochiometryValue) {\n        if (!!stoichiometry) {\n          stoichiometry = [\n            stoichiometry[0] + interactorMatch.stochiometryValue[0],\n            stoichiometry[1] + interactorMatch.stochiometryValue[1]\n          ];\n        } else {\n          stoichiometry = [\n            interactorMatch.stochiometryValue[0],\n            interactorMatch.stochiometryValue[1]\n          ];\n        }\n      }\n    }\n  }\n\n  // If we have found the interactor as part of one of the complex components, or part of a subcomplex, we return it\n  if (interactorFound) {\n    return {\n      identifier: interactorId,\n      stochiometryValue: stoichiometry\n    };\n  }\n\n  return null;\n}\n\nfunction findInteractorInComplexComponent(complexComponent: ComplexComponent,\n                                          interactorId: string,\n                                          enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const componentStoichiometry = parseStoichiometryValues(complexComponent.stochiometry);\n\n  if (complexComponent.identifier === interactorId) {\n    // The interactor is the complex component we are currently checking\n    return {\n      identifier: interactorId,\n      stochiometryValue: componentStoichiometry\n    };\n  }\n\n  if (complexComponent.interactorType === 'stable complex') {\n    // If the id does not match, and the component is a subcomplex, then we can look for the interactor in the subcomplex components\n    const complexComponentInteractor = enrichedInteractors.find(interactor =>\n      interactor.interactor.identifier === complexComponent.identifier);\n\n    if (!!complexComponentInteractor && !!complexComponentInteractor.subComponents) {\n      const subComponentsMatch = findInteractorInComplexComponents(\n        complexComponentInteractor.subComponents, interactorId, enrichedInteractors);\n\n      if (!!subComponentsMatch) {\n        // We have found the interactor in the subcomplex\n        if (!!subComponentsMatch.stochiometryValue) {\n          if (!!componentStoichiometry) {\n            // If we have stoichiometry for both the component and the subcomponent, we add both\n            return {\n              identifier: interactorId,\n              stochiometryValue: [\n                componentStoichiometry[0] * subComponentsMatch.stochiometryValue[0],\n                componentStoichiometry[1] * subComponentsMatch.stochiometryValue[1]\n              ]\n            };\n          } else {\n            // If we only have stoichiometry for the subcomponent, we use that stoichiometry\n            return {\n              identifier: interactorId,\n              stochiometryValue: subComponentsMatch.stochiometryValue\n            };\n          }\n        } else {\n          // If we only have stoichiometry for the component, we use that stoichiometry\n          return {\n            identifier: interactorId,\n            stochiometryValue: componentStoichiometry\n          };\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction fetchValuesFromStoichiometry(stoichiometry: string) {\n  const pattern = 'minValue: ([0-9+]), maxValue: ([0-9+])';\n  return stoichiometry.match(pattern);\n}\n\nfunction parseStoichiometryValues(stoichiometry: string): [number, number] {\n  if (!!stoichiometry) {\n    const matchedStoichiometry = fetchValuesFromStoichiometry(stoichiometry);\n    if (!!matchedStoichiometry) {\n      const minValue = parseInt(matchedStoichiometry[1], 10);\n      const maxValue = parseInt(matchedStoichiometry[2], 10);\n      if (!isNaN(minValue) && !isNaN(maxValue)) {\n        return [minValue, maxValue];\n      }\n    }\n  }\n  return null;\n}\n\nfunction formatStoichiometryValues(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n    const minValue = stoichiometry[0];\n    const maxValue = stoichiometry[1];\n    if (minValue === maxValue) {\n      return minValue.toString();\n    } else {\n      return `${minValue}-${maxValue}`;\n    }\n  }\n  return ' '; // sometimes we don't have the stoichiometry value\n}\n\nfunction getStoichiometryText(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n    return 'Stoichiometry values: minValue: ' + stoichiometry[0] + ', maxValue: ' + stoichiometry[1];\n  } else {\n    return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n  }\n}\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {Interactor} from '../../../../shared/model/complex-results/interactor.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {Observable} from 'rxjs/Observable';\nimport {of} from 'rxjs';\nimport {ComplexPortalService} from '../../../../shared/service/complex-portal.service';\nimport {map} from 'rxjs/operators';\nimport {findInteractorInComplex} from './complex-navigator-utils';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\n\nexport class EnrichedInteractor {\n  interactor: Interactor;\n  hidden: boolean;\n  isSubComplex: boolean;\n  expanded: boolean;\n  subComponents: ComplexComponent[];\n  partOfComplex: number[];\n  timesAppearing: number;\n}\n\nexport class EnrichedComplex {\n  complex: Element;\n  startInteractorIndex: number;\n  endInteractorIndex: number;\n  startSubComponentIndex: number;\n  endSubComponentIndex: number;\n  startInteractorIncludedWhenExpanded: boolean;\n}\n\n@Component({\n  selector: 'cp-table-interactor-column',\n  templateUrl: './table-interactor-column.component.html',\n  styleUrls: ['./table-interactor-column.component.css']\n})\nexport class TableInteractorColumnComponent implements OnChanges {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() interactors: Interactor[];\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  enrichedInteractors: EnrichedInteractor[];\n  enrichedComplexes: EnrichedComplex[];\n  ranges: number[];\n\n  _timesAppearingByType: Map<string, number>;\n  _timesAppearingByOrganism: Map<string, number>;\n\n  constructor(private complexPortalService: ComplexPortalService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!!changes['interactors']) {\n      this.enrichInteractors();\n      this.calculateTimesAppearing();\n    }\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  private classifyInteractors(): void {\n    if (!!this.interactorsSorting && !!this.enrichedInteractors && this.enrichedInteractors.length > 0) {\n      if (this.interactorsSorting === 'Type') {\n        this.classifyInteractorsByType();\n      } else if (this.interactorsSorting === 'Organism') {\n        this.classifyInteractorsByOrganism();\n      } else {\n        this.classifyInteractorsByOccurrence();\n      }\n    }\n  }\n\n  private enrichInteractors() {\n    this.enrichedInteractors = [];\n    for (const interactor of this.interactors) {\n      const isSubComplex = interactor.interactorType === 'stable complex';\n      const newEnrichedInteractor: EnrichedInteractor = {\n        interactor,\n        hidden: false,\n        isSubComplex,\n        expanded: false,\n        subComponents: null,\n        partOfComplex: [],\n        timesAppearing: 0,\n      };\n      if (isSubComplex) {\n        this.loadSubInteractors(newEnrichedInteractor).subscribe(subComponents => newEnrichedInteractor.subComponents = subComponents);\n      }\n      this.enrichedInteractors.push(newEnrichedInteractor);\n    }\n  }\n\n  toggleSubcomplexExpandable(i: number): void {\n    this.enrichedInteractors[i].expanded = !this.enrichedInteractors[i].expanded;\n\n    if (this.enrichedInteractors[i].expanded) {\n      // EnrichedInteractor has been expanded, we need to:\n\n      // 1. Collapse the other ones, in case there is any other expanded\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        if (i !== j) {\n          this.enrichedInteractors[j].expanded = false;\n        }\n      }\n\n      // 2. Hide any interactor now displayed in the expanded section\n      if (!!this.enrichedInteractors[i].subComponents) {\n        const subInteractorIds: string[] = this.enrichedInteractors[i].subComponents.map(component => component.identifier);\n        for (let j = 0; j < this.enrichedInteractors.length; j++) {\n          if (i !== j) {\n            this.enrichedInteractors[j].hidden = !!subInteractorIds.includes(this.enrichedInteractors[j].interactor.identifier);\n          }\n        }\n      }\n    } else {\n      // EnrichedInteractor has been collapsed, we need to:\n      // 1. Display any interactor previously hidden\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        this.enrichedInteractors[j].hidden = false;\n      }\n    }\n\n    // Something has been expanded or collapsed, we need to recalculate the start and end indexes for the lines\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n\n  }\n\n  private loadSubInteractors(interactor: EnrichedInteractor): Observable<ComplexComponent[]> {\n    // this function returns the list of subcomponents of an interactor of type stable complex\n    const foundComplex: Element = this.complexes.find(complex => complex.complexAC === interactor.interactor.identifier);\n    if (!!foundComplex) {\n      return of(foundComplex.interactors);\n    } else {\n      // Actually call the back-end to fetch these\n      return this.complexPortalService.getSimplifiedComplex(interactor.interactor.identifier)\n        .pipe(map(complex => complex?.interactors));\n    }\n  }\n\n  private calculateAllStartAndEndIndexes(): void {\n    this.enrichedComplexes = [];\n\n    for (const complex of this.complexes) {\n      this.enrichedComplexes.push(this.calculateStartAndEndIndexes(complex));\n    }\n  }\n\n  private getMinValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.min(valueA, valueB);\n  }\n\n  private getMaxValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.max(valueA, valueB);\n  }\n\n  private calculateStartAndEndIndexes(complex: Element): EnrichedComplex {\n    const enrichedComplex: EnrichedComplex = {\n      complex,\n      startInteractorIndex: null,\n      endInteractorIndex: null,\n      startSubComponentIndex: null,\n      endSubComponentIndex: null,\n      startInteractorIncludedWhenExpanded: true,\n    };\n\n    // We iterate through the interactors to find the first and last one part of the complex\n    // We do this to be able to draw a line connecting all interactors in the complex\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n\n        if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].interactor.identifier, this.enrichedInteractors)) {\n          // The interactor is part of the complex, we update the start and end indices for the interactors\n          // line as it may start in this interactor\n          enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n          if (enrichedComplex.startInteractorIndex === i) {\n            // The line starts in this interactor, so the line always starts in this interactor, even when expanded\n            enrichedComplex.startInteractorIncludedWhenExpanded = true;\n          }\n          enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n\n          // The interactor is a subcomplex\n          if (this.enrichedInteractors[i].isSubComplex && !!this.enrichedInteractors[i].subComponents) {\n            if (this.enrichedInteractors[i].expanded) {\n              // If the subcomplex is expanded, as the subcomplex is part of the complex, all its subcomponents are also part\n              // of it. That means we need a line connecting all the subcomponents.\n              // That line must also connect to the subcomplex, so we start it at -1 to make sure it starts at the interactor cell\n              // and not at the first subcomponent\n              enrichedComplex.startSubComponentIndex = -1;\n              enrichedComplex.endSubComponentIndex = this.enrichedInteractors[i].subComponents.length - 1;\n            }\n          }\n        } else if (this.enrichedInteractors[i].isSubComplex &&\n          !!this.enrichedInteractors[i].subComponents &&\n          this.enrichedInteractors[i].expanded) {\n          // The interactor is not part of the complex, but it is a subcomplex, and it is expanded.\n          // This means the subcomponents of the subcomplex are visible, and any of them could be part of the complex.\n          // In that case, the line could start or end on any of those subcomponents\n          for (let k = 0; k < this.enrichedInteractors[i].subComponents.length; k++) {\n            if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].subComponents[k].identifier, this.enrichedInteractors)) {\n              // The subcomponent of this interactor is part of the complex, we update the start and end indices for the interactors\n              // line as it may start in this interactor\n              enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n              if (enrichedComplex.startInteractorIndex === i) {\n                // The line starts in a subcomponent of the interactor, but not on the interactor itself,\n                // so the line does not start in the interactor when expanded\n                enrichedComplex.startInteractorIncludedWhenExpanded = false;\n              }\n              enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n              // The subcomponent of this interactor is part of the complex, we update the start and end indices for the subcomponents\n              // line as it may start in this subcomponent\n              enrichedComplex.startSubComponentIndex = this.getMinValue(enrichedComplex.startSubComponentIndex, k);\n              enrichedComplex.endSubComponentIndex = this.getMaxValue(enrichedComplex.endSubComponentIndex, k);\n            }\n          }\n        }\n      }\n    }\n    return enrichedComplex;\n  }\n\n  public classifyInteractorsByOrganism() {\n    this.enrichedInteractors.sort((a, b) => {\n      if (b.interactor.organismName === a.interactor.organismName) {\n        return b.timesAppearing - a.timesAppearing;\n      } else {\n        const organismBTimesAppearing = this._timesAppearingByOrganism.get(b.interactor.organismName);\n        const organismATimesAppearing = this._timesAppearingByOrganism.get(a.interactor.organismName);\n        if (organismBTimesAppearing === organismATimesAppearing) {\n          return b.interactor.organismName.localeCompare(a.interactor.organismName);\n        } else {\n          return organismBTimesAppearing - organismATimesAppearing;\n        }\n      }\n    });\n    this.rangeOfInteractorOrganism();\n  }\n\n  public classifyInteractorsByType() {\n    this.enrichedInteractors.sort((a, b) => {\n      if (b.interactor.interactorType === a.interactor.interactorType) {\n        return b.timesAppearing - a.timesAppearing;\n      } else {\n        const typeBTimesAppearing = this._timesAppearingByType.get(b.interactor.interactorType);\n        const typeATimesAppearing = this._timesAppearingByType.get(a.interactor.interactorType);\n        if (typeBTimesAppearing === typeATimesAppearing) {\n          return b.interactor.interactorType.localeCompare(a.interactor.interactorType);\n        } else {\n          return typeBTimesAppearing - typeATimesAppearing;\n        }\n      }\n    });\n    this.rangeOfInteractorType();\n  }\n\n  public classifyInteractorsByOccurrence() {\n    this.enrichedInteractors.sort((a, b) =>\n      b.timesAppearing - a.timesAppearing\n    );\n    this.ranges = [];\n  }\n\n  public rangeOfInteractorType() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.interactorType !== this.enrichedInteractors[i + 1].interactor.interactorType) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.interactorType, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  public rangeOfInteractorOrganism() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.organismName !== this.enrichedInteractors[i + 1].interactor.organismName) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.organismName, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  getExpandedRowClass(i: number, length: number): string {\n    if (i === 0) {\n      if (length === 1) {\n        return 'singleExpandedRow';\n      } else {\n        return 'firstExpandedRow';\n      }\n    } else if (i === length - 1) {\n      return 'lastExpandedRow';\n    }\n    return null;\n  }\n\n  private calculateTimesAppearing() {\n    // Initialise times appearing by type or organism\n    this._timesAppearingByType = new Map();\n    this._timesAppearingByOrganism = new Map();\n    for (const oneInteractor of this.enrichedInteractors) {\n      // Initialise times appearing for each interactor\n      oneInteractor.timesAppearing = 0;\n      for (const complex of this.complexes) {\n        const match = findInteractorInComplex(complex, oneInteractor.interactor.identifier, this.enrichedInteractors);\n        if (!!match) {\n          // Update times appearing for the interactor\n          oneInteractor.timesAppearing += 1;\n          // Update times appearing for the interactor type\n          this._timesAppearingByType.set(\n            oneInteractor.interactor.interactorType,\n            (this._timesAppearingByType.get(oneInteractor.interactor.interactorType) || 0) + 1);\n          // Update times appearing for the interactor organism\n          this._timesAppearingByOrganism.set(\n            oneInteractor.interactor.organismName,\n            (this._timesAppearingByOrganism.get(oneInteractor.interactor.organismName) || 0) + 1);\n        }\n      }\n    }\n  }\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-external-link',\n  templateUrl: './table-interactor-external-link.component.html',\n  styleUrls: ['./table-interactor-external-link.component.css']\n})\nexport class TableInteractorExternalLinkComponent implements OnInit {\n\n  @Input() interactorId: string;\n  @Input() identifierLink: string;\n  @Input() interactorType: string;\n  @Input() isMainInteractor: boolean;\n  @Input() IDDisplay: boolean;\n\n  @Output() externalLinkVisible: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  ngOnInit(): void {\n    this.showExternalLink();\n  }\n\n  showExternalLink(): boolean {\n    if (this.isMainInteractor && this.interactorType === 'stable complex') {\n      this.externalLinkVisible.emit(false);\n      return false;\n    }\n    this.externalLinkVisible.emit(!!this.identifierLink);\n    return !!this.identifierLink;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {interactorTypeIcon} from '../../../../../complex-portal-utils';\nimport {organismIcon} from '../../../../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-table-interactor-name',\n  templateUrl: './table-interactor-name.component.html',\n  styleUrls: ['./table-interactor-name.component.css']\n})\nexport class TableInteractorNameComponent implements OnInit {\n\n  @Input() interactorName: string;\n  @Input() interactorType: string;\n  @Input() interactorId: string;\n  @Input() interactorOrganism: string;\n  @Input() identifierLink: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() isMainInteractor: boolean;\n  interactorTypeIcon: string;\n  interactorOrganismIcon: string;\n  externalLinkVisible: boolean;\n\n  ngOnInit(): void {\n    this.interactorTypeIcon = interactorTypeIcon(this.interactorType);\n    this.interactorOrganismIcon = organismIcon(this.interactorOrganism);\n  }\n\n  externalLinkVisibleHandler(isVisible: boolean): void {\n    this.externalLinkVisible = isVisible;\n  }\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-stoichiometry',\n  templateUrl: './table-interactor-stoichiometry.component.html',\n  styleUrls: ['./table-interactor-stoichiometry.component.css']\n})\nexport class TableInteractorStoichiometryComponent {\n  @Input() stoichiometryText: string;\n  @Input() stoichiometryValue: string;\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-main-interactor',\n  templateUrl: './table-main-interactor.component.html',\n  styleUrls: ['./table-main-interactor.component.css']\n})\nexport class TableMainInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  topLineClass: string;\n  bottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(\n      this.complex.complex, this.interactor.interactor.identifier, this.enrichedInteractors);\n    this.topLineClass = this.displayTopLineClass(this.complex, this.i);\n    this.bottomLineClass = this.displayBottomLineClass(this.complex, this.i);\n  }\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  public displayTopLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnInteractorCell(complex, interactorIndex) && !this.doesLineStartOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnInteractorCell(complex, interactorIndex) && !this.doesLineEndOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n\n      // The line starts before this interactor and ends after, so it crosses through the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      // The line starts before this interactor and end at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor, and it must cross through the interactor cell to the subcomponents\n        if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n\n      if (!this.enrichedInteractors[interactorIndex].isSubComplex) {\n        // If the interactor is not a subcomplex, then the interactor has no subcomponents and the line starts in it\n        return true;\n      }\n      // If the interactor is a subcomplex.\n      // If the interactor is actually part of the complex, the line starts in this interactor\n      // Otherwise, the line actually starts on one of the subcomponents of the complex, but not on the interactor itself, as it is\n      // not part of the complex.\n      if (complex.startInteractorIncludedWhenExpanded) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line ends at this interactor or on any of its subcomponents\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n\n      // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n      // the line does not end in this interactor, and it must cross through to the subcomponents\n      if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n        if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-subcomponent-interactor',\n  templateUrl: './table-subcomponent-interactor.component.html',\n  styleUrls: ['./table-subcomponent-interactor.component.css']\n})\n\nexport class TableSubcomponentInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() j: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  displayTopLineClass: string;\n  displayBottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(this.complex.complex, this.el.identifier, this.enrichedInteractors);\n    this.displayTopLineClass = this.displayTopLineClassExpanded(this.complex, this.i, this.j);\n    this.displayBottomLineClass = this.displayBottomLineClassExpanded(this.complex, this.i, this.j);\n  }\n\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  get el(): ComplexComponent {\n    return this.enrichedInteractors[this.i].subComponents[this.j];\n  }\n\n  public displayTopLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n      // The line starts before this interactor and ends after, so it crosses through all the subcomponents of the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n        // The line starts before this subcomponent and ends after, so it crosses through the subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this interactor, and it ends on a later subcomponent, so it crosses through this subcomponent\n        if (complex.startInteractorIndex < interactorIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this subcomponent, and it ends on a later interactor, so it crosses through this subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endInteractorIndex > interactorIndex) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n      if (complex.startSubComponentIndex != null && complex.startSubComponentIndex === subComponentIndex) {\n        // If the subcomplex is a component of the complex, the line starts in the cell of the interactor, meaning it cannot\n        // start on any subcomponent.\n        // Otherwise, it starts on the subcomponent with the index subComponentIndex\n        return !complex.complex.interactors.some(component =>\n          this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier);\n\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n      // The line ends at this interactor and this subcomponent\n      if (complex.endSubComponentIndex != null && complex.endSubComponentIndex === subComponentIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n","import {Component, EventEmitter, Input, OnChanges, Output} from '@angular/core';\nimport {ComplexSearchResult} from '../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../shared/model/complex-results/interactor.model';\nimport {Element} from '../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../shared/model/complex-results/complex-component.model';\n\n@Component({\n  selector: 'cp-table-structure',\n  templateUrl: './table-structure.component.html',\n  styleUrls: ['./table-structure.component.css']\n})\nexport class TableStructureComponent implements OnChanges {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  sortedComplexes: Element[] = [];\n\n  ngOnChanges(): void {\n    this.sortedComplexes = this.classifyComplexesSimilaritiesV2(this.complexSearch.elements);\n  }\n\n  private getComponentAsComplex(component: ComplexComponent): Element | undefined {\n    return this.complexSearch.elements.find(interactor => interactor.complexAC === component.identifier);\n  }\n\n  private getAllComponents(complex?: Element, components: ComplexComponent[] = []): ComplexComponent[] {\n    for (const component of complex.interactors) {\n      if (component.interactorType === 'stable complex') {\n        const subComplex = this.getComponentAsComplex(component);\n        if (subComplex) {\n          components.push(...this.getAllComponents(subComplex));\n        } else {\n          components.push(component);\n        }\n      } else {\n        components.push(component);\n      }\n    }\n    return components;\n  }\n\n  private calculateSimilarity(complex1: Element, complex2: Element) {\n    if (complex1 === complex2) {\n      return new Set(this.getAllComponents(complex1)).size;\n    }\n\n    const [components1, components2] =\n      [complex1, complex2]\n        .map(complex => new Set(this.getAllComponents(complex).map(c => c.identifier)));\n\n    return [...components1.values()].reduce((s, c1) => components2.has(c1) ? s + 1 : s, 0);\n  }\n\n  classifyComplexesSimilaritiesV2(complexesList: Element[]) {\n    const comparedComplexes: [Element, Element, number][] = [];\n    for (const complex of complexesList) {\n      for (const comparedComplex of complexesList) {\n        // for unique comparison\n        if (complex.complexAC >= comparedComplex.complexAC) {\n          comparedComplexes.push([complex, comparedComplex, this.calculateSimilarity(complex, comparedComplex)]);\n        }\n      }\n    }\n    comparedComplexes.sort((a, b) => b[2] - a[2]); // sorting by similarityScore\n    const complexesOrderedSet = this.uniqueComplexesListOrderedBySimilarity(comparedComplexes);\n    // to be used in the table as a 1D array\n    return Array.from(complexesOrderedSet);\n  }\n\n  uniqueComplexesListOrderedBySimilarity(complexesListSimilarities: [Element, Element, number][]) {\n    const complexesOrderedSet = new Set<Element>();\n    for (let i = 0; i < complexesListSimilarities.length; i++) {\n      const [complex1, complex2, similarityScore] = complexesListSimilarities[i];\n      if (similarityScore !== 0) {\n        complexesOrderedSet.add(complex1);\n        complexesOrderedSet.add(complex2);\n        for (let j = i + 1; j < complexesListSimilarities.length; j++) {\n          const [complex3, complex4, similarityScore2nd] = complexesListSimilarities[j];\n          if (complex1 === complex3 && similarityScore2nd !== 0) {\n            complexesOrderedSet.add(complex4);\n          }\n        }\n        if (complexesOrderedSet.size === this.complexSearch.elements.length) {\n          // All complexes have been added, we can return and stop the loops\n          return complexesOrderedSet;\n        }\n      }\n      if (complexesOrderedSet.size === this.complexSearch.elements.length) {\n        // All complexes have been added, we can return and stop the loops\n        return complexesOrderedSet;\n      }\n    }\n    return complexesOrderedSet;\n  }\n}\n","export default \"<div class=\\\"filters\\\">\\n  <div class=\\\"sortingInteractors\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Sort components\\\" class=\\\"button\\\">\\n    <div class=\\\"typeOfSorting\\\">\\n      <input type=\\\"button\\\" name=\\\"occurrenceClassification\\\" value=\\\"Occurrence\\\" class=\\\"button\\\"\\n             (click)=\\\"interactorsSortingChanges('Occurrence')\\\">\\n      <input type=\\\"button\\\" name=\\\"typeClassification\\\" value=\\\"Type\\\" class=\\\"button\\\"\\n             (click)=\\\"interactorsSortingChanges('Type')\\\">\\n      <input type=\\\"button\\\" name=\\\"organismClassification\\\" value=\\\"Organism\\\" class=\\\"button\\\"\\n             (click)=\\\"interactorsSortingChanges('Organism')\\\">\\n      <!--      <input type=\\\"submit\\\" name=\\\"geneClassification\\\" value=\\\"Orthology (Not available yet)\\\" class=\\\"button\\\"-->\\n      <!--             (click)=\\\"InteractorsSortingChanges('Orthology')\\\">-->\\n    </div>\\n  </div>\\n\\n  <div class=\\\"dropdown\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Display Options\\\" class=\\\"button\\\">\\n    <ul class=\\\"displaySize\\\">\\n      <li>\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"displayType\\\" value=\\\"Compact\\\" class=\\\"checkbox compact\\\"\\n                 (click)=\\\"setDisplayType('compact')\\\" [checked]=\\\"typeOfDisplay === 'compact'\\\">\\n          Compact display\\n        </label>\\n      </li>\\n      <li class=\\\"detailedDisplay\\\">\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"displayType\\\" value=\\\"Detailed\\\" class=\\\"checkbox detailed\\\"\\n                 (click)=\\\"setDisplayType('detailed')\\\" [checked]=\\\"typeOfDisplay === 'detailed'\\\">\\n          Detailed display\\n        </label>\\n        <ul class=\\\"detailedDisplayOptions\\\">\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"organism\\\" value=\\\"organism\\\" class=\\\"checkbox\\\" [checked]=\\\"organismIconDisplay\\\"\\n                   (change)=\\\"DisplayingOrganism()\\\">\\n            Organism\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"type\\\" value=\\\"type\\\" class=\\\"checkbox\\\" [checked]=\\\"interactorTypeDisplay\\\"\\n                   (change)=\\\"DisplayingType()\\\">\\n            Type\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"id\\\" value=\\\"id\\\" class=\\\"checkbox\\\" [checked]=\\\"IDDisplay\\\"\\n                   (change)=\\\"DisplayingID()\\\">\\n            Interactor ID\\n          </li>\\n        </ul>\\n      </li>\\n    </ul>\\n  </div>\\n</div>\\n\";","export default \"<div class=\\\"displayButton columns medium-12\\\" [ngClass]=\\\"\\\">\\n  <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button\\\"\\n          (click)=\\\"setListView()\\\" [ngClass]=\\\"{'selected': !isDisplayComplexNavigatorView()}\\\">\\n    View list\\n  </button>\\n  <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button cnButton\\\"\\n          (click)=\\\"setComplexNavigatorView()\\\" [ngClass]=\\\"{'selected': isDisplayComplexNavigatorView()}\\\">\\n    View Complex Navigator\\n    <span class=\\\"new-tag\\\" [ngClass]=\\\"{'new-tag-selected': displayType === isDisplayComplexNavigatorView()}\\\">NEW!</span>\\n  </button>\\n</div>\\n\";","export default \"<div class=\\\"ComplexNavigator\\\">\\n  <div class=\\\"Buttons\\\" [ngClass]=\\\"complexSearch.totalNumberOfResults <=6 ? 'smallCNButtons' : ''\\\">\\n    <cp-complex-navigator-buttons\\n      [(interactorsSorting)]=\\\"interactorsSorting\\\"\\n      [(organismIconDisplay)]=\\\"organismIconDisplay\\\"\\n      [(interactorTypeDisplay)]=\\\"interactorTypeDisplay\\\"\\n      [(IDDisplay)]=\\\"IDDisplay\\\">\\n    </cp-complex-navigator-buttons>\\n  </div>\\n  <cp-table-structure [complexSearch]=\\\"complexSearch\\\"\\n                      [interactors]=\\\"interactors\\\"\\n                      [interactorsSorting]=\\\"interactorsSorting\\\"\\n                      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                      [IDDisplay]=\\\"IDDisplay\\\"\\n                      [canAddComplexesToBasket]=\\\"canAddComplexesToBasket\\\"\\n                      [canRemoveComplexesFromBasket]=\\\"canRemoveComplexesFromBasket\\\"\\n                      (onComplexRemovedFromBasket)=\\\"onComplexRemovedFromBasket.emit($event)\\\">\\n  </cp-table-structure>\\n</div>\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"table CN-table\\\">\\n    <!-- When table is not overflowing -->\\n    <thead class=\\\"tableHead\\\" *ngIf=\\\"complexes.length<=6\\\">\\n    <tr>\\n      <th *ngIf=\\\"isInteractorSortingSet()\\\" class=\\\"spaceHolderSorting\\\"></th>\\n      <th class=\\\"interactorsHeader horizontal\\\">\\n        Components\\n      </th>\\n      <th class=\\\"horizontal\\\" *ngFor=\\\"let complex of complexes\\\" [class.predicted]=\\\"complex.predicted\\\">\\n        <div class=\\\"horizontal-label\\\">\\n          <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n             target=\\\"_blank\\\">\\n            <div>\\n              <span [matTooltip]=\\\"complex.complexName+ ' - '+ complex.complexAC + ' - ' + complex.organismName\\\">\\n                <div class=\\\"line\\\"></div>\\n                <i class=\\\"{{iconOrganism(complex.organismName)}}\\\"></i>\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                {{ complex.complexName }}\\n              </span>\\n            </div>\\n          </a>\\n        </div>\\n        <div class=\\\"basketButton\\\">\\n          <a class=\\\"button\\\" (click)=\\\"toggleBasket(complex.complexName,complex.complexAC,complex.organismName)\\\">\\n            <i class=\\\"icon icon-common\\\" [attr.data-icon]=\\\"isInBasket(complex.complexAC) ? '':''\\\"></i>\\n          </a>\\n        </div>\\n      </th>\\n    </tr>\\n    </thead>\\n    <!-- When table is overflowing -->\\n    <thead class=\\\"tableHeadOverflow\\\" *ngIf=\\\"complexes.length>6\\\"\\n           [ngClass]=\\\"isInteractorSortingSet() ? 'tableHeadOverflowWithSorting' : 'tableHeadOverflow'\\\">\\n    <tr [style.--cols]=\\\"complexes.length\\\"\\n        [style.--intHeader]=\\\"isInteractorSortingSet() ? '156px':''\\\"\\n        [style.--sizeSpaceHolder]=\\\"'185px'\\\">\\n      <th class=\\\"spaceHolderHeaderOverflow\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\\\">\\n      </th>\\n      <th class=\\\"rotate\\\" *ngFor=\\\"let complex of complexes\\\"\\n          [class.predicted]=\\\"complex.predicted\\\"\\n          [style.--cols]=\\\"complexes.length\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           [matTooltip]=\\\"complex.complexName+ ' - '+ complex.complexAC\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span>\\n              <div class=\\\"tilted-label\\\">\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                {{ complex.complexName }}\\n              </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n      <div class=\\\"spaceHolder\\\"></div>\\n    </tr>\\n    <!-- icons row -->\\n    <tr [style.--cols]=\\\"complexes.length\\\"\\n        [style.--intHeader]=\\\"isInteractorSortingSet() ? '156px':''\\\"\\n        [style.--sizeSpaceHolder]=\\\"'185px'\\\">\\n      <th class=\\\"interactorsHeader overflow\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\\\">\\n        Components\\n      </th>\\n      <ng-container *ngFor=\\\" let complex of complexes;\\\">\\n        <th class=\\\"iconOrganism\\\" [class.predicted]=\\\"complex.predicted\\\">\\n          <div>\\n            <a class=\\\"button\\\" (click)=\\\"toggleBasket(complex.complexName,complex.complexAC,complex.organismName)\\\">\\n              <i class=\\\"icon icon-common\\\" [attr.data-icon]=\\\"isInBasket(complex.complexAC) ? '':''\\\"></i>\\n            </a>\\n          </div>\\n          <div>\\n            <i class=\\\"{{iconOrganism(complex.organismName)}}\\\" [matTooltip]=\\\"complex.organismName\\\"></i>\\n          </div>\\n        </th>\\n      </ng-container>\\n      <div class=\\\"spaceHolder\\\"></div>\\n    </tr>\\n    </thead>\\n  </table>\\n</div>\\n\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"interactors-table\\\"\\n         [ngClass]=\\\"{'inheritedWidth': complexes.length > 6}\\\"\\n         [style.--cols]=\\\"complexes.length\\\">\\n    <ng-container *ngFor=\\\" let interactor of enrichedInteractors; let i=index\\\">\\n      <tr *ngIf=\\\"!interactor.hidden\\\">\\n        <ng-container *ngFor=\\\"let oneType of ranges\\\" class=\\\"interactorsOrdering\\\">\\n          <td *ngIf=\\\"oneType[2]===i\\\" [attr.rowspan]=\\\"oneType[1]\\\" class=\\\"interactorSeparation\\\"\\n              [matTooltip]=\\\"oneType[0]\\\">\\n            <div class=\\\"interactorNameContainer\\\" [style.--rowspanSize]=\\\"oneType[1]\\\">\\n              {{ oneType[0] }}\\n            </div>\\n          </td>\\n        </ng-container>\\n        <td class=\\\"interactorsColumn\\\"\\n            [ngClass]=\\\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\\\"\\n            [style]=\\\"ranges.length!=0 ? 'left:3ch':''\\\">\\n          <cp-table-interactor-name\\n            [interactorName]=\\\"interactor.interactor.name\\\"\\n            [interactorType]=\\\"interactor.interactor.interactorType\\\"\\n            [interactorId]=\\\"interactor.interactor.identifier\\\"\\n            [interactorOrganism]=\\\"interactor.interactor.organismName\\\"\\n            [identifierLink]=\\\"interactor.interactor.identifierLink\\\"\\n            [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n            [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n            [IDDisplay]=\\\"IDDisplay\\\"\\n          ></cp-table-interactor-name>\\n          <!-- Icon for the expandable -->\\n          <div class=\\\"container\\\" *ngIf=\\\"interactor.isSubComplex\\\">\\n            <a (click)=\\\"toggleSubcomplexExpandable(i)\\\"\\n               [matTooltip]=\\\"interactor.interactor.name + ' components'\\\">\\n              Components\\n              <i class=\\\"icon icon-common\\\" data-icon=\\\"&#xf078;\\\"\\n                 style=\\\"font-size:small;\\n                \\\"></i>\\n            </a>\\n          </div>\\n        </td>\\n        <!-- Interactors' stoichiometry -->\\n        <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n          <td class=\\\"intStoich\\\" [ngClass]=\\\"{'intStoichFixedWidth': complexes.length > 6}\\\" [class.predicted]=\\\"complex.complex.predicted\\\">\\n            <cp-table-main-interactor\\n              [complex]=\\\"complex\\\"\\n              [i]=\\\"i\\\"\\n              [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n            ></cp-table-main-interactor>\\n          </td>\\n        </ng-container>\\n        <div *ngIf=\\\"complexes.length>6\\\"\\n             [ngClass]=\\\"isInteractorSortingSet() ? 'spaceHolderWithSorting' : 'spaceHolder'\\\"></div>\\n      </tr>\\n      <!-- Expandable menu for subcomplexes -->\\n      <ng-container *ngIf=\\\"interactor.expanded\\\">\\n        <ng-container *ngIf=\\\"!!interactor.subComponents\\\">\\n          <tr *ngFor=\\\"let el of interactor.subComponents; let j=index\\\"\\n              class=\\\"expandedRows\\\"\\n              [ngClass]=\\\"getExpandedRowClass(j, interactor.subComponents.length)\\\">\\n            <td [attr.rowspan]=\\\"interactor.subComponents.length\\\" class=\\\"interactorSeparation\\\"\\n                [matTooltip]=\\\"interactor.interactor.name + ' components'\\\"\\n                *ngIf=\\\"j === 0 && (interactorsSorting === 'Type' || interactorsSorting === 'Organism')\\\">\\n              <div class=\\\"interactorSeparationName\\\"\\n                   [style.--rowspanSize]=\\\"interactor.subComponents.length\\\"> {{ interactor.interactor.name }} components\\n              </div>\\n            </td>\\n            <td class=\\\"subComponentColumn\\\"\\n                [ngClass]=\\\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\\\"\\n                [style]=\\\"ranges.length!=0 ? 'left:3ch':''\\\">\\n              <div>\\n                <cp-table-interactor-name\\n                  [interactorName]=\\\"el.name\\\"\\n                  [interactorType]=\\\"el.interactorType\\\"\\n                  [interactorId]=\\\"el.identifier\\\"\\n                  [interactorOrganism]=\\\"interactor.interactor.organismName\\\"\\n                  [identifierLink]=\\\"el.identifierLink\\\"\\n                  [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                  [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                  [IDDisplay]=\\\"IDDisplay\\\"\\n                ></cp-table-interactor-name>\\n              </div>\\n            </td>\\n            <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n              <td class=\\\"intStoich\\\" [ngClass]=\\\"{'intStoichFixedWidth': complexes.length > 6}\\\">\\n                <cp-table-subcomponent-interactor\\n                  [complex]=\\\"complex\\\"\\n                  [i]=\\\"i\\\"\\n                  [j]=\\\"j\\\"\\n                  [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n                ></cp-table-subcomponent-interactor>\\n              </td>\\n            </ng-container>\\n            <div class=\\\"spaceHolder\\\" *ngIf=\\\"enrichedComplexes.length > 6\\\"></div>\\n          </tr>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n  </table>\\n</div>\\n\";","export default \"<div class=\\\"externalLinkContainer\\\" [matTooltip]=\\\"'More information about ' + interactorId\\\">\\n  <a *ngIf=\\\"externalLinkVisible\\\" href=\\\"{{identifierLink}}\\\" target=\\\"_blank\\\" class=\\\"externalLinkContainer\\\">\\n    {{ interactorId }}\\n    <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\" title=\\\"More information about {{ interactorId }}\\\"></i>\\n  </a>\\n</div>\\n\";","export default \"<div class=\\\"container\\\">\\n  <div class=\\\"nameAndIcons\\\" [ngClass]=\\\"{inlineDisplay: interactorType==='stable complex'}\\\">\\n    <i *ngIf=\\\"organismIconDisplay\\\"\\n       class=\\\"{{interactorOrganismIcon}}\\\"\\n       [matTooltip]=\\\"interactorOrganism\\\"></i>\\n\\n    <i *ngIf=\\\"interactorTypeDisplay\\\"\\n       class=\\\"{{interactorTypeIcon}}\\\"\\n       [matTooltip]=\\\"interactorType\\\"></i>\\n\\n    <div class=\\\"name\\\" *ngIf=\\\"IDDisplay\\\" [matTooltip]=\\\"interactorId\\\"> {{ interactorName }}\\n    </div>\\n    <a *ngIf=\\\"IDDisplay\\\"\\n       [routerLink]=\\\"['/complex/search']\\\"\\n       [queryParams]=\\\"{query: interactorId, page: 1}\\\"\\n       target=\\\"_blank\\\">\\n      <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n         [matTooltip]=\\\"'More complexes containing ' + interactorName \\\"></i>\\n    </a>\\n\\n    <div class=\\\"nameCompact\\\" *ngIf=\\\"!IDDisplay\\\">\\n      <div class=\\\"name\\\" *ngIf=\\\"!IDDisplay\\\" [matTooltip]=\\\"'More information about ' + interactorName\\\">\\n        <a *ngIf=\\\"!!identifierLink\\\" href=\\\"{{identifierLink}}\\\" target=\\\"_blank\\\" class=\\\"externalLinkContainer\\\">\\n          {{ interactorName }}\\n        </a>\\n      </div>\\n      <a [routerLink]=\\\"['/complex/search']\\\"\\n         [queryParams]=\\\"{query: interactorId, page: 1}\\\"\\n         target=\\\"_blank\\\">\\n        <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n           [matTooltip]=\\\"'More complexes containing ' + interactorName \\\"></i>\\n      </a>\\n    </div>\\n  </div>\\n  <cp-table-interactor-external-link\\n    *ngIf=\\\"IDDisplay\\\"\\n    [interactorId]=\\\"interactorId\\\"\\n    [identifierLink]=\\\"identifierLink\\\"\\n    [interactorType]=\\\"interactorType\\\"\\n    [isMainInteractor]=\\\"isMainInteractor\\\"\\n    [IDDisplay]=\\\"IDDisplay\\\"\\n    (externalLinkVisible)=\\\"externalLinkVisibleHandler($event)\\\">\\n  </cp-table-interactor-external-link>\\n</div>\\n\";","export default \"<ng-container>\\n  <div class=\\\"stoichNum\\\" [matTooltip]=\\\"stoichiometryText\\\">\\n    {{ stoichiometryValue }}\\n  </div>\\n</ng-container>\\n\";","export default \"<div [ngClass]=\\\"topLineClass\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!interactorComponent\\\"\\n  [stoichiometryText]=\\\"interactorComponent.stochiometryText\\\"\\n  [stoichiometryValue]=\\\"interactorComponent.stochiometryValueFormatted\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"bottomLineClass\\\"></div>\\n\";","export default \"<div [ngClass]=\\\"displayTopLineClass\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!interactorComponent\\\"\\n  [stoichiometryText]=\\\"interactorComponent.stochiometryText\\\"\\n  [stoichiometryValue]=\\\"interactorComponent.stochiometryValueFormatted\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"displayBottomLineClass\\\"></div>\\n\";","export default \"<div class=\\\"complexNavigatorTable\\\">\\n  <div class=\\\"header\\\"\\n       (scroll)=\\\"body.scrollLeft = header.scrollLeft\\\" #header>\\n\\n    <cp-table-header [complexes]=\\\"sortedComplexes\\\"\\n                     [interactorsSorting]=\\\"interactorsSorting\\\"\\n                     [canAddComplexesToBasket]=\\\"canAddComplexesToBasket\\\"\\n                     [canRemoveComplexesFromBasket]=\\\"canRemoveComplexesFromBasket\\\"\\n                     (onComplexRemovedFromBasket)=\\\"onComplexRemovedFromBasket.emit($event)\\\">\\n    </cp-table-header>\\n  </div>\\n  <div class=\\\"interactors\\\"\\n       (scroll)=\\\"header.scrollLeft = body.scrollLeft\\\" #body>\\n    <cp-table-interactor-column\\n      [complexes]=\\\"sortedComplexes\\\"\\n      [interactors]=\\\"interactors\\\"\\n      [interactorsSorting]=\\\"interactorsSorting\\\"\\n      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n      [IDDisplay]=\\\"IDDisplay\\\">\\n    </cp-table-interactor-column>\\n  </div>\\n  <div class=\\\"spaceHolder\\\"></div>\\n</div>\\n\\n\";"]}