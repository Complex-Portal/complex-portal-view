{"version":3,"sources":["src/app/complex/complex-details/complex-references/euro-pmc-crossreferences/service/euro-pmc.service.ts","src/app/complex/complex-details/complex-function/reactome-crossreferences/service/reactome.service.ts","src/app/shared/ols/service/ols.service.ts","node_modules/ngx-page-scroll-core/fesm2022/ngx-page-scroll-core.mjs"],"sourcesContent":["import {catchError} from 'rxjs/operators';\nimport {Injectable} from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\n\nimport {environment} from '../../../../../../environments/environment';\nimport {EuroPMCResponse} from '../model/EuroPMCResponse';\nimport {throwError} from 'rxjs/internal/observable/throwError';\nimport {Observable} from 'rxjs/Observable';\n\nconst baseURL = environment.europepmc_base_url;\n\n@Injectable()\nexport class EuroPmcService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  getPublicationInformation(id: string): Observable<EuroPMCResponse> {\n    return this.http.get<EuroPMCResponse>(baseURL + '/webservices/rest/search?query=ext_id:' + id + '%20src:med&format=json')\n      .pipe(catchError(this.handleError));\n  }\n\n  private handleError(err: HttpErrorResponse | any): Observable<any> {\n    if (err.error instanceof Error) {\n      return throwError(err);\n    } else {\n      console.error(err.message ? err.message : err.toString());\n    }\n  }\n}\n","import {catchError} from 'rxjs/operators';\nimport {Injectable} from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\n\nimport {environment} from '../../../../../../environments/environment';\nimport {Observable} from 'rxjs/Observable';\nimport {throwError} from 'rxjs/internal/observable/throwError';\n\nconst baseURL = environment.reactome_base_url;\n\n@Injectable()\nexport class ReactomeService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  /**\n   * Returns all related pathways for a given complex stable identifier\n   * @param id - a reactome stable identifier\n   * @returns {Observable<R|T>}\n   */\n  public findRelatedPathways(id: string): Observable<Pathway[]> {\n    return this.http.get<Pathway[]>(baseURL + '/ContentService/data/pathways/low/entity/' + id)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Returns the name of a complex by a given complex stable identifier\n   * @param id - a complex stable identifier\n   * @returns {Observable<R|T>}\n   */\n  public getComplexName(id: string): Observable<string> {\n    return this.http.get(baseURL + '/ContentService/data/query/' + id + '/displayName', {observe: 'body', responseType: 'text'})\n      .pipe(catchError(this.handleError));\n  }\n\n  private handleError(err: HttpErrorResponse | any): Observable<any> {\n    if (err.error instanceof Error) {\n      return throwError(err);\n    } else {\n      console.error(err.message ? err.message : err.toString());\n    }\n  }\n}\n\nexport interface Pathway {\n  dbId: number;\n  displayName: string;\n  stId: string;\n  stIdVersion: string;\n  isInDisease: boolean;\n  isInferred: boolean;\n  name: string[];\n  releaseDate: string;\n  speciesName: string;\n  hasDiagram: boolean;\n  hasEHLD: boolean;\n  schemaClass: string;\n  className: string;\n}\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {environment} from '../../../../environments/environment';\nimport {catchError, map} from 'rxjs/operators';\nimport {Observable} from 'rxjs/Observable';\nimport {throwError} from 'rxjs/internal/observable/throwError';\n\nconst baseURL = environment.ols_base_url;\n\n@Injectable()\nexport class OlsService {\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  /**\n   * Get a name of efo xref\n   * @param id\n   * @returns {Observable<R>}\n   */\n  getOrphaNetName(id: string) {\n    return this.http.get(baseURL + '/ordo/terms?iri=http://www.orpha.net/ORDO/' + id.replace(':', '_')).pipe(\n      map((response: Response) => response),\n      catchError(this.handleError));\n  }\n\n  /**\n   * Get a name of efo xref\n   * @param id\n   * @returns {Observable<R>}\n   */\n  getEfoName(id: string) {\n    return this.http.get(baseURL + '/efo/terms?iri=http://www.ebi.ac.uk/efo/' + id.replace(':', '_')).pipe(\n      catchError(this.handleError));\n  }\n\n  /**\n   * Get a name of mondo xref\n   * @param id\n   * @returns {Observable<R>}\n   */\n  getOboName(id: string) {\n    return this.http.get(baseURL + '/efo/terms?iri=http://purl.obolibrary.org/obo/' + id.replace(':', '_')).pipe(\n      catchError(this.handleError));\n  }\n\n  private handleError(err: HttpErrorResponse | any): Observable<any> {\n    if (err.error instanceof Error) {\n      return throwError(err);\n    } else {\n      console.error(err.message ? err.message : err.toString());\n    }\n  }\n}\n","import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Injectable, Inject, NgModule } from '@angular/core';\n\n/**\n * Represents a scrolling action\n */\nclass PageScrollInstance {\n  /**\n   * Private constructor, requires the properties assumed to be the bare minimum.\n   * Use the factory methods to create instances:\n   *      {@link PageScrollService#create}\n   */\n  constructor(pageScrollOptions) {\n    /**\n     * These properties will be set/manipulated if the scroll animation starts\n     */\n    /* The initial value of the scrollTop or scrollLeft position when the animation starts */\n    this.startScrollPosition = 0;\n    /* Whether an interrupt listener is attached to the body or not */\n    this.interruptListenersAttached = false;\n    /* References to the timer instance that is used to perform the scroll animation to be\n     able to clear it on animation end*/\n    this.timer = null;\n    if (!pageScrollOptions.scrollViews || pageScrollOptions.scrollViews.length === 0) {\n      pageScrollOptions.scrollViews = [pageScrollOptions.document.documentElement, pageScrollOptions.document.body, pageScrollOptions.document.body.parentNode];\n      this.isInlineScrolling = false;\n    } else {\n      this.isInlineScrolling = true;\n    }\n    this.pageScrollOptions = pageScrollOptions;\n  }\n  static getScrollingTargetPosition(pageScrollOptions, scrollTargetElement) {\n    const body = pageScrollOptions.document.body;\n    const docEl = pageScrollOptions.document.documentElement;\n    const windowPageYOffset = pageScrollOptions.document.defaultView && pageScrollOptions.document.defaultView.pageYOffset || undefined;\n    const windowPageXOffset = pageScrollOptions.document.defaultView && pageScrollOptions.document.defaultView.pageXOffset || undefined;\n    const scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;\n    const scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;\n    const clientTop = docEl.clientTop || body.clientTop || 0;\n    const clientLeft = docEl.clientLeft || body.clientLeft || 0;\n    if (scrollTargetElement === undefined || scrollTargetElement === null) {\n      // No element found, so return the current position to not cause any change in scroll position\n      return {\n        top: scrollTop,\n        left: scrollLeft\n      };\n    }\n    const box = scrollTargetElement.getBoundingClientRect();\n    const top = box.top + scrollTop - clientTop;\n    const left = box.left + scrollLeft - clientLeft;\n    return {\n      top: Math.round(top),\n      left: Math.round(left)\n    };\n  }\n  static getInlineScrollingTargetPosition(pageScrollOptions, scrollTargetElement) {\n    const position = {\n      top: scrollTargetElement.offsetTop,\n      left: scrollTargetElement.offsetLeft\n    };\n    if (pageScrollOptions.advancedInlineOffsetCalculation && pageScrollOptions.scrollViews.length === 1) {\n      const accumulatedParentsPos = {\n        top: 0,\n        left: 0\n      };\n      // not named window to make sure we're not getting the global window variable by accident\n      const theWindow = scrollTargetElement.ownerDocument.defaultView;\n      let parentFound = false;\n      // Start parent is the immediate parent\n      let parent = scrollTargetElement.parentElement;\n      // Iterate upwards all parents\n      while (!parentFound && parent !== undefined && parent !== null) {\n        if (theWindow.getComputedStyle(parent).getPropertyValue('position') === 'relative') {\n          accumulatedParentsPos.top += parent.offsetTop;\n          accumulatedParentsPos.left += parent.offsetLeft;\n        }\n        // Next iteration\n        parent = parent.parentElement;\n        parentFound = parent === pageScrollOptions.scrollViews[0];\n      }\n      if (parentFound) {\n        // Only use the results if we found the parent, otherwise we accumulated too much anyway\n        position.top += accumulatedParentsPos.top;\n        position.left += accumulatedParentsPos.left;\n      } else {\n        /* TODO Uncomment\n        if (PageScrollConfig._logLevel >= 2 || (PageScrollConfig._logLevel >= 1 && isDevMode())) {\n          console.warn('Unable to find nested scrolling targets parent!');\n        }*/\n      }\n    }\n    return position;\n  }\n  getScrollPropertyValue(scrollingView) {\n    if (!this.pageScrollOptions.verticalScrolling) {\n      return scrollingView.scrollLeft;\n    }\n    return scrollingView.scrollTop;\n  }\n  getScrollClientPropertyValue(scrollingView) {\n    if (!this.pageScrollOptions.verticalScrolling) {\n      return scrollingView.clientWidth;\n    }\n    return scrollingView.clientHeight;\n  }\n  /**\n   * Extract the exact location of the scrollTarget element.\n   *\n   * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be\n   * a string like \"#heading2\", then this method returns the corresponding DOM element for that id.\n   *\n   */\n  extractScrollTargetPosition() {\n    const scrollTargetElement = this.getScrollTargetElement();\n    if (scrollTargetElement === null || scrollTargetElement === undefined) {\n      // Scroll target not found\n      return {\n        top: NaN,\n        left: NaN\n      };\n    }\n    if (this.isInlineScrolling) {\n      return PageScrollInstance.getInlineScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);\n    }\n    return PageScrollInstance.getScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);\n  }\n  /**\n   * Get the top offset of the scroll animation.\n   * This automatically takes the offset location of the scrolling container/scrolling view\n   * into account (for nested/inline scrolling).\n   */\n  getCurrentOffset() {\n    return this.pageScrollOptions.scrollOffset;\n  }\n  /**\n   * Sets the \"scrollTop\" or \"scrollLeft\" property for all scrollViews to the provided value\n   * @return true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.\n   *          false if it failed for all ScrollViews, meaning that we should stop the animation\n   *          (probably because we're at the end of the scrolling region)\n   */\n  setScrollPosition(position) {\n    // Set the new scrollTop/scrollLeft to all scrollViews elements\n    return this.pageScrollOptions.scrollViews.reduce((oneAlreadyWorked, scrollingView) => {\n      const startScrollPropertyValue = this.getScrollPropertyValue(scrollingView);\n      if (scrollingView && startScrollPropertyValue !== undefined && startScrollPropertyValue !== null) {\n        const scrollDistance = Math.abs(startScrollPropertyValue - position);\n        // The movement we need to perform is less than 2px\n        // This we consider a small movement which some browser may not perform when\n        // changing the scrollTop/scrollLeft property\n        // Thus in this cases we do not stop the scroll animation, although setting the\n        // scrollTop/scrollLeft value \"fails\"\n        const isSmallMovement = scrollDistance < this.pageScrollOptions._minScrollDistance;\n        if (!this.pageScrollOptions.verticalScrolling) {\n          scrollingView.scrollLeft = position;\n        } else {\n          scrollingView.scrollTop = position;\n        }\n        // Return true if setting the new scrollTop/scrollLeft value worked\n        // We consider that it worked if the new scrollTop/scrollLeft value is closer to the\n        // desired scrollTop/scrollLeft than before (it might not be exactly the value we\n        // set due to dpi or rounding irregularities)\n        if (isSmallMovement || scrollDistance > Math.abs(this.getScrollPropertyValue(scrollingView) - position)) {\n          return true;\n        }\n      }\n      return oneAlreadyWorked;\n    }, false);\n  }\n  /**\n   * Trigger firing a animation finish event\n   * @param value Whether the animation finished at the target (true) or got interrupted (false)\n   */\n  fireEvent(value) {\n    if (this.pageScrollOptions.scrollFinishListener) {\n      this.pageScrollOptions.scrollFinishListener.emit(value);\n    }\n  }\n  /**\n   * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter\n   * will be called if any of the attached events is fired.\n   *\n   * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.\n   */\n  attachInterruptListeners(interruptReporter) {\n    if (this.interruptListenersAttached) {\n      // Detach possibly existing listeners first\n      this.detachInterruptListeners();\n    }\n    this.interruptListener = event => {\n      interruptReporter.report(event, this);\n    };\n    this.pageScrollOptions.interruptEvents.forEach(event => this.pageScrollOptions.document.body.addEventListener(event, this.interruptListener));\n    this.interruptListenersAttached = true;\n  }\n  /**\n   * Remove event listeners from the body and stop listening for events that might be treated as \"animation\n   * interrupt\" events.\n   */\n  detachInterruptListeners() {\n    this.pageScrollOptions.interruptEvents.forEach(event => this.pageScrollOptions.document.body.removeEventListener(event, this.interruptListener));\n    this.interruptListenersAttached = false;\n  }\n  getScrollTargetElement() {\n    if (typeof this.pageScrollOptions.scrollTarget === 'string') {\n      const targetSelector = this.pageScrollOptions.scrollTarget;\n      if (targetSelector.match(/^#[^\\s]+$/g) !== null) {\n        // It's an id selector and a valid id, as it does not contain any white space characters\n        return this.pageScrollOptions.document.getElementById(targetSelector.substr(1));\n      }\n      return this.pageScrollOptions.document.querySelector(targetSelector);\n    }\n    return this.pageScrollOptions.scrollTarget;\n  }\n}\nconst NGXPS_CONFIG = new InjectionToken('ngxps_config');\nconst defaultPageScrollConfig = {\n  _interval: 10,\n  _minScrollDistance: 2,\n  _logLevel: 1,\n  namespace: 'default',\n  verticalScrolling: true,\n  duration: 1250,\n  scrollOffset: 0,\n  advancedInlineOffsetCalculation: false,\n  interruptEvents: ['mousedown', 'wheel', 'DOMMouseScroll', 'mousewheel', 'keyup', 'touchmove'],\n  interruptKeys: [' ', 'Escape', 'Tab', 'Enter', 'PageUp', 'PageDown', 'Home', 'End', 'ArrowUp', 'ArrowRight', 'ArrowLeft', 'ArrowDown'],\n  interruptible: true,\n  scrollInView: true,\n  easingLogic: (t, b, c, d) => {\n    // Linear easing\n    return c * t / d + b;\n  }\n};\nclass PageScrollService {\n  stopInternal(interrupted, pageScrollInstance) {\n    const index = this.runningInstances.indexOf(pageScrollInstance);\n    if (index >= 0) {\n      this.runningInstances.splice(index, 1);\n    }\n    if (pageScrollInstance.interruptListenersAttached) {\n      pageScrollInstance.detachInterruptListeners();\n    }\n    if (pageScrollInstance.timer) {\n      // Clear/Stop the timer\n      clearInterval(pageScrollInstance.timer);\n      // Clear the reference to this timer\n      pageScrollInstance.timer = undefined;\n      pageScrollInstance.fireEvent(!interrupted);\n      return true;\n    }\n    return false;\n  }\n  create(options) {\n    return new PageScrollInstance({\n      ...this.config,\n      ...options\n    });\n  }\n  /**\n   * Start a scroll animation. All properties of the animation are stored in the given {@link PageScrollInstance} object.\n   *\n   * This is the core functionality of the whole library.\n   */\n  // tslint:disable-next-line:cyclomatic-complexity\n  start(pageScrollInstance) {\n    // Merge the default options in the pageScrollInstance options\n    pageScrollInstance.pageScrollOptions = {\n      ...this.config,\n      ...pageScrollInstance.pageScrollOptions\n    };\n    // Stop all possibly running scroll animations in the same namespace\n    this.stopAll(pageScrollInstance.pageScrollOptions.namespace);\n    if (pageScrollInstance.pageScrollOptions.scrollViews === null || pageScrollInstance.pageScrollOptions.scrollViews.length === 0) {\n      // No scrollViews specified, thus we can't animate anything\n      if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n        console.warn('No scrollViews specified, thus ngx-page-scroll does not know which DOM elements to scroll');\n      }\n      return;\n    }\n    let startScrollPositionFound = false;\n    let scrollRange = pageScrollInstance.getScrollClientPropertyValue(pageScrollInstance.pageScrollOptions.scrollViews[0]);\n    // Reset start scroll position to 0. If any of the scrollViews has a different one, it will be extracted next\n    pageScrollInstance.startScrollPosition = 0;\n    // Get the start scroll position from the scrollViews (e.g. if the user already scrolled down the content)\n    pageScrollInstance.pageScrollOptions.scrollViews.forEach(scrollingView => {\n      if (scrollingView === undefined || scrollingView === null) {\n        return;\n      }\n      // Get the scrollTop or scrollLeft value of the first scrollingView that returns a value for its \"scrollTop\"\n      // or \"scrollLeft\" property that is not undefined and unequal to 0\n      const scrollPosition = pageScrollInstance.getScrollPropertyValue(scrollingView);\n      if (!startScrollPositionFound && scrollPosition) {\n        // We found a scrollingView that does not have scrollTop or scrollLeft 0\n        // Return the scroll position value, as this will be our startScrollPosition\n        pageScrollInstance.startScrollPosition = scrollPosition;\n        startScrollPositionFound = true;\n        // Remember te scrollRange of this scrollingView\n        scrollRange = pageScrollInstance.getScrollClientPropertyValue(scrollingView);\n      }\n    });\n    const pageScrollOffset = pageScrollInstance.getCurrentOffset();\n    // Calculate the target position that the scroll animation should go to\n    const scrollTargetPosition = pageScrollInstance.extractScrollTargetPosition();\n    pageScrollInstance.targetScrollPosition = Math.round((pageScrollInstance.pageScrollOptions.verticalScrolling ? scrollTargetPosition.top : scrollTargetPosition.left) - pageScrollOffset);\n    // Calculate the distance we need to go in total\n    pageScrollInstance.distanceToScroll = pageScrollInstance.targetScrollPosition - pageScrollInstance.startScrollPosition;\n    if (isNaN(pageScrollInstance.distanceToScroll)) {\n      // We weren't able to find the target position, maybe the element does not exist?\n      if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n        console.log('Scrolling not possible, as we can\\'t find the specified target');\n      }\n      pageScrollInstance.fireEvent(false);\n      return;\n    }\n    // We're at the final destination already\n    // OR we need to scroll down but are already at the end\n    // OR we need to scroll up but are at the top already\n    const allReadyAtDestination = Math.abs(pageScrollInstance.distanceToScroll) < pageScrollInstance.pageScrollOptions._minScrollDistance;\n    // Check how long we need to scroll if a speed option is given\n    // Default executionDuration is the specified duration\n    pageScrollInstance.executionDuration = pageScrollInstance.pageScrollOptions.duration;\n    // Maybe we need to pay attention to the speed option?\n    if (pageScrollInstance.pageScrollOptions.speed !== undefined && pageScrollInstance.pageScrollOptions.speed !== null && (pageScrollInstance.pageScrollOptions.duration === undefined || pageScrollInstance.pageScrollOptions.duration === null)) {\n      // Speed option is set and no duration => calculate duration based on speed and scroll distance\n      pageScrollInstance.executionDuration = Math.abs(pageScrollInstance.distanceToScroll) / pageScrollInstance.pageScrollOptions.speed * 1000;\n    }\n    // We should go there directly, as our \"animation\" would have one big step\n    // only anyway and this way we save the interval stuff\n    const tooShortInterval = pageScrollInstance.executionDuration <= pageScrollInstance.pageScrollOptions._interval;\n    if (allReadyAtDestination || tooShortInterval) {\n      if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n        if (allReadyAtDestination) {\n          console.log('Scrolling not possible, as we can\\'t get any closer to the destination');\n        } else {\n          console.log('Scroll duration shorter that interval length, jumping to target');\n        }\n      }\n      pageScrollInstance.setScrollPosition(pageScrollInstance.targetScrollPosition);\n      pageScrollInstance.fireEvent(true);\n      return;\n    }\n    if (!pageScrollInstance.pageScrollOptions.scrollInView) {\n      const alreadyInView = pageScrollInstance.targetScrollPosition > pageScrollInstance.startScrollPosition && pageScrollInstance.targetScrollPosition <= pageScrollInstance.startScrollPosition + scrollRange;\n      if (alreadyInView) {\n        if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n          console.log('Not scrolling, as target already in view');\n        }\n        pageScrollInstance.fireEvent(true);\n        return;\n      }\n    }\n    // Register the interrupt listeners if we want an interruptible scroll animation\n    if (pageScrollInstance.pageScrollOptions.interruptible) {\n      pageScrollInstance.attachInterruptListeners(this.onInterrupted);\n    }\n    // Let's get started, get the start time...\n    pageScrollInstance.startTime = new Date().getTime();\n    // .. and calculate the end time (when we need to finish at last)\n    pageScrollInstance.endTime = pageScrollInstance.startTime + pageScrollInstance.executionDuration;\n    pageScrollInstance.timer = setInterval(instance => {\n      // Take the current time\n      const currentTime = new Date().getTime();\n      // Determine the new scroll position\n      let newScrollPosition;\n      let stopNow = false;\n      if (instance.endTime <= currentTime) {\n        // We're over the time already, so go the targetScrollPosition (aka destination)\n        newScrollPosition = instance.targetScrollPosition;\n        stopNow = true;\n      } else {\n        // Calculate the scroll position based on the current time using the easing function\n        newScrollPosition = Math.round(instance.pageScrollOptions.easingLogic(currentTime - instance.startTime, instance.startScrollPosition, instance.distanceToScroll, instance.executionDuration));\n      }\n      if (this.config._logLevel >= 5 && isDevMode()) {\n        console.warn('Scroll Position: ' + newScrollPosition);\n      }\n      // Set the new scrollPosition to all scrollViews elements\n      if (!instance.setScrollPosition(newScrollPosition)) {\n        // Setting the new scrollTop/scrollLeft value failed for all ScrollViews\n        // early stop the scroll animation to save resources\n        stopNow = true;\n      }\n      // At the end do the internal stop maintenance and fire the pageScrollFinish event\n      // (otherwise the event might arrive at \"too early\")\n      if (stopNow) {\n        this.stopInternal(false, instance);\n      }\n    }, this.config._interval, pageScrollInstance);\n    // Register the instance as running one\n    this.runningInstances.push(pageScrollInstance);\n  }\n  scroll(options) {\n    this.start(this.create(options));\n  }\n  /**\n   * Stop all running scroll animations. Optionally limit to stop only the ones of specific namespace.\n   */\n  stopAll(namespace) {\n    if (this.runningInstances.length > 0) {\n      let stoppedSome = false;\n      for (let i = 0; i < this.runningInstances.length; ++i) {\n        const pageScrollInstance = this.runningInstances[i];\n        if (!namespace || pageScrollInstance.pageScrollOptions.namespace === namespace) {\n          stoppedSome = true;\n          this.stopInternal(true, pageScrollInstance);\n          // Decrease the counter, as we removed an item from the array we iterate over\n          i--;\n        }\n      }\n      return stoppedSome;\n    }\n    return false;\n  }\n  stop(pageScrollInstance) {\n    return this.stopInternal(true, pageScrollInstance);\n  }\n  constructor(customConfig) {\n    this.runningInstances = [];\n    this.onInterrupted = {\n      report: (event, pageScrollInstance) => {\n        if (!pageScrollInstance.pageScrollOptions.interruptible) {\n          // Non-interruptible anyway, so do not stop anything\n          return;\n        }\n        let shouldStop = true;\n        if (event.type === 'keyup') {\n          // Only stop if specific keys have been pressed, for all others don't stop anything\n          if (this.config.interruptKeys.indexOf(event.key) === -1) {\n            // The pressed key is not in the list of interrupting keys\n            shouldStop = false;\n          }\n        } else if (event.type === 'mousedown') {\n          // For mousedown events we only stop the scroll animation of the mouse has\n          // been clicked inside the scrolling container\n          if (!pageScrollInstance.pageScrollOptions.scrollViews.some(scrollingView => scrollingView.contains(event.target))) {\n            // Mouse clicked an element which is not inside any of the the scrolling containers\n            shouldStop = false;\n          }\n        }\n        if (shouldStop) {\n          this.stopAll(pageScrollInstance.pageScrollOptions.namespace);\n        }\n      }\n    };\n    this.config = {\n      ...defaultPageScrollConfig,\n      ...customConfig\n    };\n  }\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"18.1.1\",\n      ngImport: i0,\n      type: PageScrollService,\n      deps: [{\n        token: NGXPS_CONFIG\n      }],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"18.1.1\",\n      ngImport: i0,\n      type: PageScrollService,\n      providedIn: 'root'\n    });\n  }\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"18.1.1\",\n  ngImport: i0,\n  type: PageScrollService,\n  decorators: [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }],\n  ctorParameters: () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [NGXPS_CONFIG]\n    }]\n  }]\n});\nclass NgxPageScrollCoreModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxPageScrollCoreModule,\n      providers: [PageScrollService, {\n        provide: NGXPS_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"18.1.1\",\n      ngImport: i0,\n      type: NgxPageScrollCoreModule,\n      deps: [],\n      target: i0.ɵɵFactoryTarget.NgModule\n    });\n  }\n  static {\n    this.ɵmod = i0.ɵɵngDeclareNgModule({\n      minVersion: \"14.0.0\",\n      version: \"18.1.1\",\n      ngImport: i0,\n      type: NgxPageScrollCoreModule\n    });\n  }\n  static {\n    this.ɵinj = i0.ɵɵngDeclareInjector({\n      minVersion: \"12.0.0\",\n      version: \"18.1.1\",\n      ngImport: i0,\n      type: NgxPageScrollCoreModule,\n      providers: [PageScrollService, {\n        provide: NGXPS_CONFIG,\n        useValue: {}\n      }]\n    });\n  }\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"18.1.1\",\n  ngImport: i0,\n  type: NgxPageScrollCoreModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      providers: [PageScrollService, {\n        provide: NGXPS_CONFIG,\n        useValue: {}\n      }]\n    }]\n  }]\n});\n\n/*\n * Public API Surface of ngx-page-scroll-core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGXPS_CONFIG, NgxPageScrollCoreModule, PageScrollInstance, PageScrollService, defaultPageScrollConfig };\n"],"mappings":"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","names":["import_throwError","baseURL","_a","__decorate","import_throwError","baseURL","_a","__decorate"],"x_google_ignoreList":[3]}