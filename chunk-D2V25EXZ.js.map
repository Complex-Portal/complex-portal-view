{"version":3,"sources":["src/app/complex/complex-details/complex-references/euro-pmc-crossreferences/service/euro-pmc.service.ts","src/app/complex/complex-details/complex-function/reactome-crossreferences/service/reactome.service.ts","src/app/shared/ols/service/ols.service.ts","node_modules/ngx-page-scroll-core/fesm2022/ngx-page-scroll-core.mjs"],"sourcesContent":["import {catchError} from 'rxjs/operators';\nimport {Injectable} from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\n\nimport {environment} from '../../../../../../environments/environment';\nimport {EuroPMCResponse} from '../model/EuroPMCResponse';\nimport {throwError} from 'rxjs/internal/observable/throwError';\nimport {Observable} from 'rxjs/Observable';\n\nconst baseURL = environment.europepmc_base_url;\n\n@Injectable()\nexport class EuroPmcService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  getPublicationInformation(id: string): Observable<EuroPMCResponse> {\n    return this.http.get<EuroPMCResponse>(baseURL + '/webservices/rest/search?query=ext_id:' + id + '%20src:med&format=json')\n      .pipe(catchError(this.handleError));\n  }\n\n  private handleError(err: HttpErrorResponse | any): Observable<any> {\n    if (err.error instanceof Error) {\n      return throwError(err);\n    } else {\n      console.error(err.message ? err.message : err.toString());\n    }\n  }\n}\n","import {catchError} from 'rxjs/operators';\nimport {Injectable} from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\n\n\nimport {environment} from '../../../../../../environments/environment';\nimport {Observable} from 'rxjs/Observable';\nimport {throwError} from 'rxjs/internal/observable/throwError';\n\nconst baseURL = environment.reactome_base_url;\n\n@Injectable()\nexport class ReactomeService {\n\n  constructor(private http: HttpClient) {\n  }\n\n  /**\n   * Returns all related pathways for a given complex stable identifier\n   * @param id - a reactome stable identifier\n   * @returns {Observable<R|T>}\n   */\n  public findRelatedPathways(id: string): Observable<Pathway[]> {\n    return this.http.get<Pathway[]>(baseURL + '/ContentService/data/pathways/low/entity/' + id)\n      .pipe(catchError(this.handleError));\n  }\n\n  /**\n   * Returns the name of a complex by a given complex stable identifier\n   * @param id - a complex stable identifier\n   * @returns {Observable<R|T>}\n   */\n  public getComplexName(id: string): Observable<string> {\n    return this.http.get(baseURL + '/ContentService/data/query/' + id + '/displayName', {observe: 'body', responseType: 'text'})\n      .pipe(catchError(this.handleError));\n  }\n\n  private handleError(err: HttpErrorResponse | any): Observable<any> {\n    if (err.error instanceof Error) {\n      return throwError(err);\n    } else {\n      console.error(err.message ? err.message : err.toString());\n    }\n  }\n}\n\nexport interface Pathway {\n  dbId: number;\n  displayName: string;\n  stId: string;\n  stIdVersion: string;\n  isInDisease: boolean;\n  isInferred: boolean;\n  name: string[];\n  releaseDate: string;\n  speciesName: string;\n  hasDiagram: boolean;\n  hasEHLD: boolean;\n  schemaClass: string;\n  className: string;\n}\n","import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport {Injectable} from '@angular/core';\nimport {environment} from '../../../../environments/environment';\nimport {catchError, map} from 'rxjs/operators';\nimport {Observable} from 'rxjs/Observable';\nimport {throwError} from 'rxjs/internal/observable/throwError';\n\nconst baseURL = environment.ols_base_url;\n\n@Injectable()\nexport class OlsService {\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  /**\n   * Get a name of efo xref\n   * @param id\n   * @returns {Observable<R>}\n   */\n  getOrphaNetName(id: string) {\n    return this.http.get(baseURL + '/ordo/terms?iri=http://www.orpha.net/ORDO/' + id.replace(':', '_')).pipe(\n      map((response: Response) => response),\n      catchError(this.handleError));\n  }\n\n  /**\n   * Get a name of efo xref\n   * @param id\n   * @returns {Observable<R>}\n   */\n  getEfoName(id: string) {\n    return this.http.get(baseURL + '/efo/terms?iri=http://www.ebi.ac.uk/efo/' + id.replace(':', '_')).pipe(\n      catchError(this.handleError));\n  }\n\n  /**\n   * Get a name of mondo xref\n   * @param id\n   * @returns {Observable<R>}\n   */\n  getOboName(id: string) {\n    return this.http.get(baseURL + '/efo/terms?iri=http://purl.obolibrary.org/obo/' + id.replace(':', '_')).pipe(\n      catchError(this.handleError));\n  }\n\n  private handleError(err: HttpErrorResponse | any): Observable<any> {\n    if (err.error instanceof Error) {\n      return throwError(err);\n    } else {\n      console.error(err.message ? err.message : err.toString());\n    }\n  }\n}\n","import * as i0 from '@angular/core';\nimport { InjectionToken, isDevMode, Injectable, Inject, NgModule } from '@angular/core';\n\n/**\n * Represents a scrolling action\n */\nclass PageScrollInstance {\n  /**\n   * Private constructor, requires the properties assumed to be the bare minimum.\n   * Use the factory methods to create instances:\n   *      {@link PageScrollService#create}\n   */\n  constructor(pageScrollOptions) {\n    /**\n     * These properties will be set/manipulated if the scroll animation starts\n     */\n    /* The initial value of the scrollTop or scrollLeft position when the animation starts */\n    this.startScrollPosition = 0;\n    /* Whether an interrupt listener is attached to the body or not */\n    this.interruptListenersAttached = false;\n    /* References to the timer instance that is used to perform the scroll animation to be\n     able to clear it on animation end*/\n    this.timer = null;\n    if (!pageScrollOptions.scrollViews || pageScrollOptions.scrollViews.length === 0) {\n      pageScrollOptions.scrollViews = [pageScrollOptions.document.documentElement, pageScrollOptions.document.body, pageScrollOptions.document.body.parentNode];\n      this.isInlineScrolling = false;\n    } else {\n      this.isInlineScrolling = true;\n    }\n    this.pageScrollOptions = pageScrollOptions;\n  }\n  static getScrollingTargetPosition(pageScrollOptions, scrollTargetElement) {\n    const body = pageScrollOptions.document.body;\n    const docEl = pageScrollOptions.document.documentElement;\n    const windowPageYOffset = pageScrollOptions.document.defaultView && pageScrollOptions.document.defaultView.pageYOffset || undefined;\n    const windowPageXOffset = pageScrollOptions.document.defaultView && pageScrollOptions.document.defaultView.pageXOffset || undefined;\n    const scrollTop = windowPageYOffset || docEl.scrollTop || body.scrollTop;\n    const scrollLeft = windowPageXOffset || docEl.scrollLeft || body.scrollLeft;\n    const clientTop = docEl.clientTop || body.clientTop || 0;\n    const clientLeft = docEl.clientLeft || body.clientLeft || 0;\n    if (scrollTargetElement === undefined || scrollTargetElement === null) {\n      // No element found, so return the current position to not cause any change in scroll position\n      return {\n        top: scrollTop,\n        left: scrollLeft\n      };\n    }\n    const box = scrollTargetElement.getBoundingClientRect();\n    const top = box.top + scrollTop - clientTop;\n    const left = box.left + scrollLeft - clientLeft;\n    return {\n      top: Math.round(top),\n      left: Math.round(left)\n    };\n  }\n  static getInlineScrollingTargetPosition(pageScrollOptions, scrollTargetElement) {\n    const position = {\n      top: scrollTargetElement.offsetTop,\n      left: scrollTargetElement.offsetLeft\n    };\n    if (pageScrollOptions.advancedInlineOffsetCalculation && pageScrollOptions.scrollViews.length === 1) {\n      const accumulatedParentsPos = {\n        top: 0,\n        left: 0\n      };\n      // not named window to make sure we're not getting the global window variable by accident\n      const theWindow = scrollTargetElement.ownerDocument.defaultView;\n      let parentFound = false;\n      // Start parent is the immediate parent\n      let parent = scrollTargetElement.parentElement;\n      // Iterate upwards all parents\n      while (!parentFound && parent !== undefined && parent !== null) {\n        if (theWindow.getComputedStyle(parent).getPropertyValue('position') === 'relative') {\n          accumulatedParentsPos.top += parent.offsetTop;\n          accumulatedParentsPos.left += parent.offsetLeft;\n        }\n        // Next iteration\n        parent = parent.parentElement;\n        parentFound = parent === pageScrollOptions.scrollViews[0];\n      }\n      if (parentFound) {\n        // Only use the results if we found the parent, otherwise we accumulated too much anyway\n        position.top += accumulatedParentsPos.top;\n        position.left += accumulatedParentsPos.left;\n      } else {\n        /* TODO Uncomment\n        if (PageScrollConfig._logLevel >= 2 || (PageScrollConfig._logLevel >= 1 && isDevMode())) {\n          console.warn('Unable to find nested scrolling targets parent!');\n        }*/\n      }\n    }\n    return position;\n  }\n  getScrollPropertyValue(scrollingView) {\n    if (!this.pageScrollOptions.verticalScrolling) {\n      return scrollingView.scrollLeft;\n    }\n    return scrollingView.scrollTop;\n  }\n  getScrollClientPropertyValue(scrollingView) {\n    if (!this.pageScrollOptions.verticalScrolling) {\n      return scrollingView.clientWidth;\n    }\n    return scrollingView.clientHeight;\n  }\n  /**\n   * Extract the exact location of the scrollTarget element.\n   *\n   * Extract the scrollTarget HTMLElement from the given PageScrollTarget object. The latter one may be\n   * a string like \"#heading2\", then this method returns the corresponding DOM element for that id.\n   *\n   */\n  extractScrollTargetPosition() {\n    const scrollTargetElement = this.getScrollTargetElement();\n    if (scrollTargetElement === null || scrollTargetElement === undefined) {\n      // Scroll target not found\n      return {\n        top: NaN,\n        left: NaN\n      };\n    }\n    if (this.isInlineScrolling) {\n      return PageScrollInstance.getInlineScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);\n    }\n    return PageScrollInstance.getScrollingTargetPosition(this.pageScrollOptions, scrollTargetElement);\n  }\n  /**\n   * Get the top offset of the scroll animation.\n   * This automatically takes the offset location of the scrolling container/scrolling view\n   * into account (for nested/inline scrolling).\n   */\n  getCurrentOffset() {\n    return this.pageScrollOptions.scrollOffset;\n  }\n  /**\n   * Sets the \"scrollTop\" or \"scrollLeft\" property for all scrollViews to the provided value\n   * @return true if at least for one ScrollTopSource the scrollTop/scrollLeft value could be set and it kept the new value.\n   *          false if it failed for all ScrollViews, meaning that we should stop the animation\n   *          (probably because we're at the end of the scrolling region)\n   */\n  setScrollPosition(position) {\n    // Set the new scrollTop/scrollLeft to all scrollViews elements\n    return this.pageScrollOptions.scrollViews.reduce((oneAlreadyWorked, scrollingView) => {\n      const startScrollPropertyValue = this.getScrollPropertyValue(scrollingView);\n      if (scrollingView && startScrollPropertyValue !== undefined && startScrollPropertyValue !== null) {\n        const scrollDistance = Math.abs(startScrollPropertyValue - position);\n        // The movement we need to perform is less than 2px\n        // This we consider a small movement which some browser may not perform when\n        // changing the scrollTop/scrollLeft property\n        // Thus in this cases we do not stop the scroll animation, although setting the\n        // scrollTop/scrollLeft value \"fails\"\n        const isSmallMovement = scrollDistance < this.pageScrollOptions._minScrollDistance;\n        if (!this.pageScrollOptions.verticalScrolling) {\n          scrollingView.scrollLeft = position;\n        } else {\n          scrollingView.scrollTop = position;\n        }\n        // Return true if setting the new scrollTop/scrollLeft value worked\n        // We consider that it worked if the new scrollTop/scrollLeft value is closer to the\n        // desired scrollTop/scrollLeft than before (it might not be exactly the value we\n        // set due to dpi or rounding irregularities)\n        if (isSmallMovement || scrollDistance > Math.abs(this.getScrollPropertyValue(scrollingView) - position)) {\n          return true;\n        }\n      }\n      return oneAlreadyWorked;\n    }, false);\n  }\n  /**\n   * Trigger firing a animation finish event\n   * @param value Whether the animation finished at the target (true) or got interrupted (false)\n   */\n  fireEvent(value) {\n    if (this.pageScrollOptions.scrollFinishListener) {\n      this.pageScrollOptions.scrollFinishListener.emit(value);\n    }\n  }\n  /**\n   * Attach the interrupt listeners to the PageScrollInstance body. The given interruptReporter\n   * will be called if any of the attached events is fired.\n   *\n   * Possibly attached interruptListeners are automatically removed from the body before the new one will be attached.\n   */\n  attachInterruptListeners(interruptReporter) {\n    if (this.interruptListenersAttached) {\n      // Detach possibly existing listeners first\n      this.detachInterruptListeners();\n    }\n    this.interruptListener = event => {\n      interruptReporter.report(event, this);\n    };\n    this.pageScrollOptions.interruptEvents.forEach(event => this.pageScrollOptions.document.body.addEventListener(event, this.interruptListener));\n    this.interruptListenersAttached = true;\n  }\n  /**\n   * Remove event listeners from the body and stop listening for events that might be treated as \"animation\n   * interrupt\" events.\n   */\n  detachInterruptListeners() {\n    this.pageScrollOptions.interruptEvents.forEach(event => this.pageScrollOptions.document.body.removeEventListener(event, this.interruptListener));\n    this.interruptListenersAttached = false;\n  }\n  getScrollTargetElement() {\n    if (typeof this.pageScrollOptions.scrollTarget === 'string') {\n      const targetSelector = this.pageScrollOptions.scrollTarget;\n      if (targetSelector.match(/^#[^\\s]+$/g) !== null) {\n        // It's an id selector and a valid id, as it does not contain any white space characters\n        return this.pageScrollOptions.document.getElementById(targetSelector.substr(1));\n      }\n      return this.pageScrollOptions.document.querySelector(targetSelector);\n    }\n    return this.pageScrollOptions.scrollTarget;\n  }\n}\nconst NGXPS_CONFIG = new InjectionToken('ngxps_config');\nconst defaultPageScrollConfig = {\n  _interval: 10,\n  _minScrollDistance: 2,\n  _logLevel: 1,\n  namespace: 'default',\n  verticalScrolling: true,\n  duration: 1250,\n  scrollOffset: 0,\n  advancedInlineOffsetCalculation: false,\n  interruptEvents: ['mousedown', 'wheel', 'DOMMouseScroll', 'mousewheel', 'keyup', 'touchmove'],\n  interruptKeys: [' ', 'Escape', 'Tab', 'Enter', 'PageUp', 'PageDown', 'Home', 'End', 'ArrowUp', 'ArrowRight', 'ArrowLeft', 'ArrowDown'],\n  interruptible: true,\n  scrollInView: true,\n  easingLogic: (t, b, c, d) => {\n    // Linear easing\n    return c * t / d + b;\n  }\n};\nclass PageScrollService {\n  stopInternal(interrupted, pageScrollInstance) {\n    const index = this.runningInstances.indexOf(pageScrollInstance);\n    if (index >= 0) {\n      this.runningInstances.splice(index, 1);\n    }\n    if (pageScrollInstance.interruptListenersAttached) {\n      pageScrollInstance.detachInterruptListeners();\n    }\n    if (pageScrollInstance.timer) {\n      // Clear/Stop the timer\n      clearInterval(pageScrollInstance.timer);\n      // Clear the reference to this timer\n      pageScrollInstance.timer = undefined;\n      pageScrollInstance.fireEvent(!interrupted);\n      return true;\n    }\n    return false;\n  }\n  create(options) {\n    return new PageScrollInstance({\n      ...this.config,\n      ...options\n    });\n  }\n  /**\n   * Start a scroll animation. All properties of the animation are stored in the given {@link PageScrollInstance} object.\n   *\n   * This is the core functionality of the whole library.\n   */\n  // tslint:disable-next-line:cyclomatic-complexity\n  start(pageScrollInstance) {\n    // Merge the default options in the pageScrollInstance options\n    pageScrollInstance.pageScrollOptions = {\n      ...this.config,\n      ...pageScrollInstance.pageScrollOptions\n    };\n    // Stop all possibly running scroll animations in the same namespace\n    this.stopAll(pageScrollInstance.pageScrollOptions.namespace);\n    if (pageScrollInstance.pageScrollOptions.scrollViews === null || pageScrollInstance.pageScrollOptions.scrollViews.length === 0) {\n      // No scrollViews specified, thus we can't animate anything\n      if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n        console.warn('No scrollViews specified, thus ngx-page-scroll does not know which DOM elements to scroll');\n      }\n      return;\n    }\n    let startScrollPositionFound = false;\n    let scrollRange = pageScrollInstance.getScrollClientPropertyValue(pageScrollInstance.pageScrollOptions.scrollViews[0]);\n    // Reset start scroll position to 0. If any of the scrollViews has a different one, it will be extracted next\n    pageScrollInstance.startScrollPosition = 0;\n    // Get the start scroll position from the scrollViews (e.g. if the user already scrolled down the content)\n    pageScrollInstance.pageScrollOptions.scrollViews.forEach(scrollingView => {\n      if (scrollingView === undefined || scrollingView === null) {\n        return;\n      }\n      // Get the scrollTop or scrollLeft value of the first scrollingView that returns a value for its \"scrollTop\"\n      // or \"scrollLeft\" property that is not undefined and unequal to 0\n      const scrollPosition = pageScrollInstance.getScrollPropertyValue(scrollingView);\n      if (!startScrollPositionFound && scrollPosition) {\n        // We found a scrollingView that does not have scrollTop or scrollLeft 0\n        // Return the scroll position value, as this will be our startScrollPosition\n        pageScrollInstance.startScrollPosition = scrollPosition;\n        startScrollPositionFound = true;\n        // Remember te scrollRange of this scrollingView\n        scrollRange = pageScrollInstance.getScrollClientPropertyValue(scrollingView);\n      }\n    });\n    const pageScrollOffset = pageScrollInstance.getCurrentOffset();\n    // Calculate the target position that the scroll animation should go to\n    const scrollTargetPosition = pageScrollInstance.extractScrollTargetPosition();\n    pageScrollInstance.targetScrollPosition = Math.round((pageScrollInstance.pageScrollOptions.verticalScrolling ? scrollTargetPosition.top : scrollTargetPosition.left) - pageScrollOffset);\n    // Calculate the distance we need to go in total\n    pageScrollInstance.distanceToScroll = pageScrollInstance.targetScrollPosition - pageScrollInstance.startScrollPosition;\n    if (isNaN(pageScrollInstance.distanceToScroll)) {\n      // We weren't able to find the target position, maybe the element does not exist?\n      if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n        console.log('Scrolling not possible, as we can\\'t find the specified target');\n      }\n      pageScrollInstance.fireEvent(false);\n      return;\n    }\n    // We're at the final destination already\n    // OR we need to scroll down but are already at the end\n    // OR we need to scroll up but are at the top already\n    const allReadyAtDestination = Math.abs(pageScrollInstance.distanceToScroll) < pageScrollInstance.pageScrollOptions._minScrollDistance;\n    // Check how long we need to scroll if a speed option is given\n    // Default executionDuration is the specified duration\n    pageScrollInstance.executionDuration = pageScrollInstance.pageScrollOptions.duration;\n    // Maybe we need to pay attention to the speed option?\n    if (pageScrollInstance.pageScrollOptions.speed !== undefined && pageScrollInstance.pageScrollOptions.speed !== null && (pageScrollInstance.pageScrollOptions.duration === undefined || pageScrollInstance.pageScrollOptions.duration === null)) {\n      // Speed option is set and no duration => calculate duration based on speed and scroll distance\n      pageScrollInstance.executionDuration = Math.abs(pageScrollInstance.distanceToScroll) / pageScrollInstance.pageScrollOptions.speed * 1000;\n    }\n    // We should go there directly, as our \"animation\" would have one big step\n    // only anyway and this way we save the interval stuff\n    const tooShortInterval = pageScrollInstance.executionDuration <= pageScrollInstance.pageScrollOptions._interval;\n    if (allReadyAtDestination || tooShortInterval) {\n      if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n        if (allReadyAtDestination) {\n          console.log('Scrolling not possible, as we can\\'t get any closer to the destination');\n        } else {\n          console.log('Scroll duration shorter that interval length, jumping to target');\n        }\n      }\n      pageScrollInstance.setScrollPosition(pageScrollInstance.targetScrollPosition);\n      pageScrollInstance.fireEvent(true);\n      return;\n    }\n    if (!pageScrollInstance.pageScrollOptions.scrollInView) {\n      const alreadyInView = pageScrollInstance.targetScrollPosition > pageScrollInstance.startScrollPosition && pageScrollInstance.targetScrollPosition <= pageScrollInstance.startScrollPosition + scrollRange;\n      if (alreadyInView) {\n        if (this.config._logLevel >= 2 || this.config._logLevel >= 1 && isDevMode()) {\n          console.log('Not scrolling, as target already in view');\n        }\n        pageScrollInstance.fireEvent(true);\n        return;\n      }\n    }\n    // Register the interrupt listeners if we want an interruptible scroll animation\n    if (pageScrollInstance.pageScrollOptions.interruptible) {\n      pageScrollInstance.attachInterruptListeners(this.onInterrupted);\n    }\n    // Let's get started, get the start time...\n    pageScrollInstance.startTime = new Date().getTime();\n    // .. and calculate the end time (when we need to finish at last)\n    pageScrollInstance.endTime = pageScrollInstance.startTime + pageScrollInstance.executionDuration;\n    pageScrollInstance.timer = setInterval(instance => {\n      // Take the current time\n      const currentTime = new Date().getTime();\n      // Determine the new scroll position\n      let newScrollPosition;\n      let stopNow = false;\n      if (instance.endTime <= currentTime) {\n        // We're over the time already, so go the targetScrollPosition (aka destination)\n        newScrollPosition = instance.targetScrollPosition;\n        stopNow = true;\n      } else {\n        // Calculate the scroll position based on the current time using the easing function\n        newScrollPosition = Math.round(instance.pageScrollOptions.easingLogic(currentTime - instance.startTime, instance.startScrollPosition, instance.distanceToScroll, instance.executionDuration));\n      }\n      if (this.config._logLevel >= 5 && isDevMode()) {\n        console.warn('Scroll Position: ' + newScrollPosition);\n      }\n      // Set the new scrollPosition to all scrollViews elements\n      if (!instance.setScrollPosition(newScrollPosition)) {\n        // Setting the new scrollTop/scrollLeft value failed for all ScrollViews\n        // early stop the scroll animation to save resources\n        stopNow = true;\n      }\n      // At the end do the internal stop maintenance and fire the pageScrollFinish event\n      // (otherwise the event might arrive at \"too early\")\n      if (stopNow) {\n        this.stopInternal(false, instance);\n      }\n    }, this.config._interval, pageScrollInstance);\n    // Register the instance as running one\n    this.runningInstances.push(pageScrollInstance);\n  }\n  scroll(options) {\n    this.start(this.create(options));\n  }\n  /**\n   * Stop all running scroll animations. Optionally limit to stop only the ones of specific namespace.\n   */\n  stopAll(namespace) {\n    if (this.runningInstances.length > 0) {\n      let stoppedSome = false;\n      for (let i = 0; i < this.runningInstances.length; ++i) {\n        const pageScrollInstance = this.runningInstances[i];\n        if (!namespace || pageScrollInstance.pageScrollOptions.namespace === namespace) {\n          stoppedSome = true;\n          this.stopInternal(true, pageScrollInstance);\n          // Decrease the counter, as we removed an item from the array we iterate over\n          i--;\n        }\n      }\n      return stoppedSome;\n    }\n    return false;\n  }\n  stop(pageScrollInstance) {\n    return this.stopInternal(true, pageScrollInstance);\n  }\n  constructor(customConfig) {\n    this.runningInstances = [];\n    this.onInterrupted = {\n      report: (event, pageScrollInstance) => {\n        if (!pageScrollInstance.pageScrollOptions.interruptible) {\n          // Non-interruptible anyway, so do not stop anything\n          return;\n        }\n        let shouldStop = true;\n        if (event.type === 'keyup') {\n          // Only stop if specific keys have been pressed, for all others don't stop anything\n          if (this.config.interruptKeys.indexOf(event.key) === -1) {\n            // The pressed key is not in the list of interrupting keys\n            shouldStop = false;\n          }\n        } else if (event.type === 'mousedown') {\n          // For mousedown events we only stop the scroll animation of the mouse has\n          // been clicked inside the scrolling container\n          if (!pageScrollInstance.pageScrollOptions.scrollViews.some(scrollingView => scrollingView.contains(event.target))) {\n            // Mouse clicked an element which is not inside any of the the scrolling containers\n            shouldStop = false;\n          }\n        }\n        if (shouldStop) {\n          this.stopAll(pageScrollInstance.pageScrollOptions.namespace);\n        }\n      }\n    };\n    this.config = {\n      ...defaultPageScrollConfig,\n      ...customConfig\n    };\n  }\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"18.1.1\",\n      ngImport: i0,\n      type: PageScrollService,\n      deps: [{\n        token: NGXPS_CONFIG\n      }],\n      target: i0.ɵɵFactoryTarget.Injectable\n    });\n  }\n  static {\n    this.ɵprov = i0.ɵɵngDeclareInjectable({\n      minVersion: \"12.0.0\",\n      version: \"18.1.1\",\n      ngImport: i0,\n      type: PageScrollService,\n      providedIn: 'root'\n    });\n  }\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"18.1.1\",\n  ngImport: i0,\n  type: PageScrollService,\n  decorators: [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }],\n  ctorParameters: () => [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [NGXPS_CONFIG]\n    }]\n  }]\n});\nclass NgxPageScrollCoreModule {\n  static forRoot(config) {\n    return {\n      ngModule: NgxPageScrollCoreModule,\n      providers: [PageScrollService, {\n        provide: NGXPS_CONFIG,\n        useValue: config\n      }]\n    };\n  }\n  static {\n    this.ɵfac = i0.ɵɵngDeclareFactory({\n      minVersion: \"12.0.0\",\n      version: \"18.1.1\",\n      ngImport: i0,\n      type: NgxPageScrollCoreModule,\n      deps: [],\n      target: i0.ɵɵFactoryTarget.NgModule\n    });\n  }\n  static {\n    this.ɵmod = i0.ɵɵngDeclareNgModule({\n      minVersion: \"14.0.0\",\n      version: \"18.1.1\",\n      ngImport: i0,\n      type: NgxPageScrollCoreModule\n    });\n  }\n  static {\n    this.ɵinj = i0.ɵɵngDeclareInjector({\n      minVersion: \"12.0.0\",\n      version: \"18.1.1\",\n      ngImport: i0,\n      type: NgxPageScrollCoreModule,\n      providers: [PageScrollService, {\n        provide: NGXPS_CONFIG,\n        useValue: {}\n      }]\n    });\n  }\n}\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"18.1.1\",\n  ngImport: i0,\n  type: NgxPageScrollCoreModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      providers: [PageScrollService, {\n        provide: NGXPS_CONFIG,\n        useValue: {}\n      }]\n    }]\n  }]\n});\n\n/*\n * Public API Surface of ngx-page-scroll-core\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NGXPS_CONFIG, NgxPageScrollCoreModule, PageScrollInstance, PageScrollService, defaultPageScrollConfig };\n"],"mappings":"yNAOA,IAAAA,EAAyB,iVAGnBC,EAAUC,EAAY,qBAGfC,GAANC,EAAA,KAAoB,CAEzB,YAAoBC,EAAgB,CAAhBC,EAAA,aAAA,KAAA,KAAAD,CACpB,CAEA,0BAA0BE,EAAU,CAClC,OAAO,KAAK,KAAK,IAAqBN,EAAU,yCAA2CM,EAAK,wBAAwB,EACrH,KAAKC,EAAW,KAAK,WAAW,CAAC,CACtC,CAEQ,YAAYC,EAA4B,CAC9C,GAAIA,EAAI,iBAAiB,MACvB,SAAO,cAAWA,CAAG,EAErB,QAAQ,MAAMA,EAAI,QAAUA,EAAI,QAAUA,EAAI,SAAQ,CAAE,CAE5D,KAhBKL,mCAAAA,GAAMD,EAAcO,EAAA,CAD1BC,EAAU,GACER,CAAc,ECN3B,IAAAS,EAAyB,iVAEnBC,EAAUC,EAAY,oBAGfC,GAANC,EAAA,KAAqB,CAE1B,YAAoBC,EAAgB,CAAhBC,EAAA,aAAA,KAAA,KAAAD,CACpB,CAOO,oBAAoBE,EAAU,CACnC,OAAO,KAAK,KAAK,IAAeN,EAAU,4CAA8CM,CAAE,EACvF,KAAKC,EAAW,KAAK,WAAW,CAAC,CACtC,CAOO,eAAeD,EAAU,CAC9B,OAAO,KAAK,KAAK,IAAIN,EAAU,8BAAgCM,EAAK,eAAgB,CAAC,QAAS,OAAQ,aAAc,MAAM,CAAC,EACxH,KAAKC,EAAW,KAAK,WAAW,CAAC,CACtC,CAEQ,YAAYC,EAA4B,CAC9C,GAAIA,EAAI,iBAAiB,MACvB,SAAO,cAAWA,CAAG,EAErB,QAAQ,MAAMA,EAAI,QAAUA,EAAI,QAAUA,EAAI,SAAQ,CAAE,CAE5D,KA/BKL,mCAAAA,GAAMD,EAAeO,EAAA,CAD3BC,EAAU,GACER,CAAe,ECP5B,IAAAS,EAAyB,kVAEnBC,EAAUC,EAAY,eAGfC,GAANC,EAAA,KAAgB,CAErB,YAAoBC,EAAgB,CAAhBC,EAAA,aAAA,KAAA,KAAAD,CAEpB,CAOA,gBAAgBE,EAAU,CACxB,OAAO,KAAK,KAAK,IAAIN,EAAU,6CAA+CM,EAAG,QAAQ,IAAK,GAAG,CAAC,EAAE,KAClGC,EAAKC,GAAuBA,CAAQ,EACpCC,EAAW,KAAK,WAAW,CAAC,CAChC,CAOA,WAAWH,EAAU,CACnB,OAAO,KAAK,KAAK,IAAIN,EAAU,2CAA6CM,EAAG,QAAQ,IAAK,GAAG,CAAC,EAAE,KAChGG,EAAW,KAAK,WAAW,CAAC,CAChC,CAOA,WAAWH,EAAU,CACnB,OAAO,KAAK,KAAK,IAAIN,EAAU,iDAAmDM,EAAG,QAAQ,IAAK,GAAG,CAAC,EAAE,KACtGG,EAAW,KAAK,WAAW,CAAC,CAChC,CAEQ,YAAYC,EAA4B,CAC9C,GAAIA,EAAI,iBAAiB,MACvB,SAAO,cAAWA,CAAG,EAErB,QAAQ,MAAMA,EAAI,QAAUA,EAAI,QAAUA,EAAI,SAAQ,CAAE,CAE5D,KA3CKP,mCAAAA,GAAMD,EAAUS,GAAA,CADtBC,EAAU,GACEV,CAAU,ECJvB,IAAMW,EAAN,MAAMC,CAAmB,CAMvB,YAAYC,EAAmB,CAK7B,KAAK,oBAAsB,EAE3B,KAAK,2BAA6B,GAGlC,KAAK,MAAQ,KACT,CAACA,EAAkB,aAAeA,EAAkB,YAAY,SAAW,GAC7EA,EAAkB,YAAc,CAACA,EAAkB,SAAS,gBAAiBA,EAAkB,SAAS,KAAMA,EAAkB,SAAS,KAAK,UAAU,EACxJ,KAAK,kBAAoB,IAEzB,KAAK,kBAAoB,GAE3B,KAAK,kBAAoBA,CAC3B,CACA,OAAO,2BAA2BA,EAAmBC,EAAqB,CACxE,IAAMC,EAAOF,EAAkB,SAAS,KAClCG,EAAQH,EAAkB,SAAS,gBACnCI,EAAoBJ,EAAkB,SAAS,aAAeA,EAAkB,SAAS,YAAY,aAAe,OACpHK,EAAoBL,EAAkB,SAAS,aAAeA,EAAkB,SAAS,YAAY,aAAe,OACpHM,EAAYF,GAAqBD,EAAM,WAAaD,EAAK,UACzDK,EAAaF,GAAqBF,EAAM,YAAcD,EAAK,WAC3DM,EAAYL,EAAM,WAAaD,EAAK,WAAa,EACjDO,EAAaN,EAAM,YAAcD,EAAK,YAAc,EAC1D,GAAyCD,GAAwB,KAE/D,MAAO,CACL,IAAKK,EACL,KAAMC,CACR,EAEF,IAAMG,EAAMT,EAAoB,sBAAsB,EAChDU,EAAMD,EAAI,IAAMJ,EAAYE,EAC5BI,EAAOF,EAAI,KAAOH,EAAaE,EACrC,MAAO,CACL,IAAK,KAAK,MAAME,CAAG,EACnB,KAAM,KAAK,MAAMC,CAAI,CACvB,CACF,CACA,OAAO,iCAAiCZ,EAAmBC,EAAqB,CAC9E,IAAMY,EAAW,CACf,IAAKZ,EAAoB,UACzB,KAAMA,EAAoB,UAC5B,EACA,GAAID,EAAkB,iCAAmCA,EAAkB,YAAY,SAAW,EAAG,CACnG,IAAMc,EAAwB,CAC5B,IAAK,EACL,KAAM,CACR,EAEMC,EAAYd,EAAoB,cAAc,YAChDe,EAAc,GAEdC,EAAShB,EAAoB,cAEjC,KAAO,CAACe,GAAeC,IAAW,QAAaA,IAAW,MACpDF,EAAU,iBAAiBE,CAAM,EAAE,iBAAiB,UAAU,IAAM,aACtEH,EAAsB,KAAOG,EAAO,UACpCH,EAAsB,MAAQG,EAAO,YAGvCA,EAASA,EAAO,cAChBD,EAAcC,IAAWjB,EAAkB,YAAY,CAAC,EAEtDgB,IAEFH,EAAS,KAAOC,EAAsB,IACtCD,EAAS,MAAQC,EAAsB,KAO3C,CACA,OAAOD,CACT,CACA,uBAAuBK,EAAe,CACpC,OAAK,KAAK,kBAAkB,kBAGrBA,EAAc,UAFZA,EAAc,UAGzB,CACA,6BAA6BA,EAAe,CAC1C,OAAK,KAAK,kBAAkB,kBAGrBA,EAAc,aAFZA,EAAc,WAGzB,CAQA,6BAA8B,CAC5B,IAAMjB,EAAsB,KAAK,uBAAuB,EACxD,OAAIA,GAAwB,KAEnB,CACL,IAAK,IACL,KAAM,GACR,EAEE,KAAK,kBACAF,EAAmB,iCAAiC,KAAK,kBAAmBE,CAAmB,EAEjGF,EAAmB,2BAA2B,KAAK,kBAAmBE,CAAmB,CAClG,CAMA,kBAAmB,CACjB,OAAO,KAAK,kBAAkB,YAChC,CAOA,kBAAkBY,EAAU,CAE1B,OAAO,KAAK,kBAAkB,YAAY,OAAO,CAACM,EAAkBD,IAAkB,CACpF,IAAME,EAA2B,KAAK,uBAAuBF,CAAa,EAC1E,GAAIA,GAAiBE,IAA6B,QAAaA,IAA6B,KAAM,CAChG,IAAMC,EAAiB,KAAK,IAAID,EAA2BP,CAAQ,EAM7DS,EAAkBD,EAAiB,KAAK,kBAAkB,mBAUhE,GATK,KAAK,kBAAkB,kBAG1BH,EAAc,UAAYL,EAF1BK,EAAc,WAAaL,EAQzBS,GAAmBD,EAAiB,KAAK,IAAI,KAAK,uBAAuBH,CAAa,EAAIL,CAAQ,EACpG,MAAO,EAEX,CACA,OAAOM,CACT,EAAG,EAAK,CACV,CAKA,UAAUI,EAAO,CACX,KAAK,kBAAkB,sBACzB,KAAK,kBAAkB,qBAAqB,KAAKA,CAAK,CAE1D,CAOA,yBAAyBC,EAAmB,CACtC,KAAK,4BAEP,KAAK,yBAAyB,EAEhC,KAAK,kBAAoBC,GAAS,CAChCD,EAAkB,OAAOC,EAAO,IAAI,CACtC,EACA,KAAK,kBAAkB,gBAAgB,QAAQA,GAAS,KAAK,kBAAkB,SAAS,KAAK,iBAAiBA,EAAO,KAAK,iBAAiB,CAAC,EAC5I,KAAK,2BAA6B,EACpC,CAKA,0BAA2B,CACzB,KAAK,kBAAkB,gBAAgB,QAAQA,GAAS,KAAK,kBAAkB,SAAS,KAAK,oBAAoBA,EAAO,KAAK,iBAAiB,CAAC,EAC/I,KAAK,2BAA6B,EACpC,CACA,wBAAyB,CACvB,GAAI,OAAO,KAAK,kBAAkB,cAAiB,SAAU,CAC3D,IAAMC,EAAiB,KAAK,kBAAkB,aAC9C,OAAIA,EAAe,MAAM,YAAY,IAAM,KAElC,KAAK,kBAAkB,SAAS,eAAeA,EAAe,OAAO,CAAC,CAAC,EAEzE,KAAK,kBAAkB,SAAS,cAAcA,CAAc,CACrE,CACA,OAAO,KAAK,kBAAkB,YAChC,CACF,EACMC,EAAe,IAAIC,EAAe,cAAc,EAChDC,GAA0B,CAC9B,UAAW,GACX,mBAAoB,EACpB,UAAW,EACX,UAAW,UACX,kBAAmB,GACnB,SAAU,KACV,aAAc,EACd,gCAAiC,GACjC,gBAAiB,CAAC,YAAa,QAAS,iBAAkB,aAAc,QAAS,WAAW,EAC5F,cAAe,CAAC,IAAK,SAAU,MAAO,QAAS,SAAU,WAAY,OAAQ,MAAO,UAAW,aAAc,YAAa,WAAW,EACrI,cAAe,GACf,aAAc,GACd,YAAa,CAACC,EAAGC,EAAGC,EAAGC,IAEdD,EAAIF,EAAIG,EAAIF,CAEvB,EACMG,EAAN,MAAMA,CAAkB,CACtB,aAAaC,EAAaC,EAAoB,CAC5C,IAAMC,EAAQ,KAAK,iBAAiB,QAAQD,CAAkB,EAO9D,OANIC,GAAS,GACX,KAAK,iBAAiB,OAAOA,EAAO,CAAC,EAEnCD,EAAmB,4BACrBA,EAAmB,yBAAyB,EAE1CA,EAAmB,OAErB,cAAcA,EAAmB,KAAK,EAEtCA,EAAmB,MAAQ,OAC3BA,EAAmB,UAAU,CAACD,CAAW,EAClC,IAEF,EACT,CACA,OAAOG,EAAS,CACd,OAAO,IAAIxC,EAAmByC,IAAA,GACzB,KAAK,QACLD,EACJ,CACH,CAOA,MAAMF,EAAoB,CAQxB,GANAA,EAAmB,kBAAoBG,IAAA,GAClC,KAAK,QACLH,EAAmB,mBAGxB,KAAK,QAAQA,EAAmB,kBAAkB,SAAS,EACvDA,EAAmB,kBAAkB,cAAgB,MAAQA,EAAmB,kBAAkB,YAAY,SAAW,EAAG,EAE1H,KAAK,OAAO,WAAa,GAAK,KAAK,OAAO,WAAa,GAAKI,EAAU,IACxE,QAAQ,KAAK,2FAA2F,EAE1G,MACF,CACA,IAAIC,EAA2B,GAC3BC,EAAcN,EAAmB,6BAA6BA,EAAmB,kBAAkB,YAAY,CAAC,CAAC,EAErHA,EAAmB,oBAAsB,EAEzCA,EAAmB,kBAAkB,YAAY,QAAQlB,GAAiB,CACxE,GAAmCA,GAAkB,KACnD,OAIF,IAAMyB,EAAiBP,EAAmB,uBAAuBlB,CAAa,EAC1E,CAACuB,GAA4BE,IAG/BP,EAAmB,oBAAsBO,EACzCF,EAA2B,GAE3BC,EAAcN,EAAmB,6BAA6BlB,CAAa,EAE/E,CAAC,EACD,IAAM0B,EAAmBR,EAAmB,iBAAiB,EAEvDS,EAAuBT,EAAmB,4BAA4B,EAI5E,GAHAA,EAAmB,qBAAuB,KAAK,OAAOA,EAAmB,kBAAkB,kBAAoBS,EAAqB,IAAMA,EAAqB,MAAQD,CAAgB,EAEvLR,EAAmB,iBAAmBA,EAAmB,qBAAuBA,EAAmB,oBAC/F,MAAMA,EAAmB,gBAAgB,EAAG,EAE1C,KAAK,OAAO,WAAa,GAAK,KAAK,OAAO,WAAa,GAAKI,EAAU,IACxE,QAAQ,IAAI,+DAAgE,EAE9EJ,EAAmB,UAAU,EAAK,EAClC,MACF,CAIA,IAAMU,EAAwB,KAAK,IAAIV,EAAmB,gBAAgB,EAAIA,EAAmB,kBAAkB,mBAGnHA,EAAmB,kBAAoBA,EAAmB,kBAAkB,SAExEA,EAAmB,kBAAkB,QAAU,QAAaA,EAAmB,kBAAkB,QAAU,OAASA,EAAmB,kBAAkB,WAAa,QAAaA,EAAmB,kBAAkB,WAAa,QAEvOA,EAAmB,kBAAoB,KAAK,IAAIA,EAAmB,gBAAgB,EAAIA,EAAmB,kBAAkB,MAAQ,KAItI,IAAMW,EAAmBX,EAAmB,mBAAqBA,EAAmB,kBAAkB,UACtG,GAAIU,GAAyBC,EAAkB,EACzC,KAAK,OAAO,WAAa,GAAK,KAAK,OAAO,WAAa,GAAKP,EAAU,IAEtE,QAAQ,IADNM,EACU,wEAEA,iEAFwE,EAKxFV,EAAmB,kBAAkBA,EAAmB,oBAAoB,EAC5EA,EAAmB,UAAU,EAAI,EACjC,MACF,CACA,GAAI,CAACA,EAAmB,kBAAkB,cAClBA,EAAmB,qBAAuBA,EAAmB,qBAAuBA,EAAmB,sBAAwBA,EAAmB,oBAAsBM,EAC3K,EACb,KAAK,OAAO,WAAa,GAAK,KAAK,OAAO,WAAa,GAAKF,EAAU,IACxE,QAAQ,IAAI,0CAA0C,EAExDJ,EAAmB,UAAU,EAAI,EACjC,MACF,CAGEA,EAAmB,kBAAkB,eACvCA,EAAmB,yBAAyB,KAAK,aAAa,EAGhEA,EAAmB,UAAY,IAAI,KAAK,EAAE,QAAQ,EAElDA,EAAmB,QAAUA,EAAmB,UAAYA,EAAmB,kBAC/EA,EAAmB,MAAQ,YAAYY,GAAY,CAEjD,IAAMC,EAAc,IAAI,KAAK,EAAE,QAAQ,EAEnCC,EACAC,EAAU,GACVH,EAAS,SAAWC,GAEtBC,EAAoBF,EAAS,qBAC7BG,EAAU,IAGVD,EAAoB,KAAK,MAAMF,EAAS,kBAAkB,YAAYC,EAAcD,EAAS,UAAWA,EAAS,oBAAqBA,EAAS,iBAAkBA,EAAS,iBAAiB,CAAC,EAE1L,KAAK,OAAO,WAAa,GAAKR,EAAU,GAC1C,QAAQ,KAAK,oBAAsBU,CAAiB,EAGjDF,EAAS,kBAAkBE,CAAiB,IAG/CC,EAAU,IAIRA,GACF,KAAK,aAAa,GAAOH,CAAQ,CAErC,EAAG,KAAK,OAAO,UAAWZ,CAAkB,EAE5C,KAAK,iBAAiB,KAAKA,CAAkB,CAC/C,CACA,OAAOE,EAAS,CACd,KAAK,MAAM,KAAK,OAAOA,CAAO,CAAC,CACjC,CAIA,QAAQc,EAAW,CACjB,GAAI,KAAK,iBAAiB,OAAS,EAAG,CACpC,IAAIC,EAAc,GAClB,QAASC,EAAI,EAAGA,EAAI,KAAK,iBAAiB,OAAQ,EAAEA,EAAG,CACrD,IAAMlB,EAAqB,KAAK,iBAAiBkB,CAAC,GAC9C,CAACF,GAAahB,EAAmB,kBAAkB,YAAcgB,KACnEC,EAAc,GACd,KAAK,aAAa,GAAMjB,CAAkB,EAE1CkB,IAEJ,CACA,OAAOD,CACT,CACA,MAAO,EACT,CACA,KAAKjB,EAAoB,CACvB,OAAO,KAAK,aAAa,GAAMA,CAAkB,CACnD,CACA,YAAYmB,EAAc,CACxB,KAAK,iBAAmB,CAAC,EACzB,KAAK,cAAgB,CACnB,OAAQ,CAAC9B,EAAOW,IAAuB,CACrC,GAAI,CAACA,EAAmB,kBAAkB,cAExC,OAEF,IAAIoB,EAAa,GACb/B,EAAM,OAAS,QAEb,KAAK,OAAO,cAAc,QAAQA,EAAM,GAAG,IAAM,KAEnD+B,EAAa,IAEN/B,EAAM,OAAS,cAGnBW,EAAmB,kBAAkB,YAAY,KAAKlB,GAAiBA,EAAc,SAASO,EAAM,MAAM,CAAC,IAE9G+B,EAAa,KAGbA,GACF,KAAK,QAAQpB,EAAmB,kBAAkB,SAAS,CAE/D,CACF,EACA,KAAK,OAASG,IAAA,GACTV,IACA0B,EAEP,CAsBF,EApBIrB,EAAK,UAAUuB,EAAmB,CAChC,WAAY,SACZ,QAAS,SACT,SAAUC,EACV,KAAMxB,EACN,KAAM,CAAC,CACL,MAAOP,CACT,CAAC,EACD,OAAWgC,EAAgB,UAC7B,CAAC,EAGDzB,EAAK,WAAW0B,EAAsB,CACpC,WAAY,SACZ,QAAS,SACT,SAAUF,EACV,KAAMxB,EACN,WAAY,MACd,CAAC,EA3OL,IAAM2B,EAAN3B,EA8OG4B,EAAyB,CAC1B,WAAY,SACZ,QAAS,SACT,SAAUJ,EACV,KAAMG,EACN,WAAY,CAAC,CACX,KAAME,EACN,KAAM,CAAC,CACL,WAAY,MACd,CAAC,CACH,CAAC,EACD,eAAgB,IAAM,CAAC,CACrB,KAAM,OACN,WAAY,CAAC,CACX,KAAMC,EACN,KAAM,CAACrC,CAAY,CACrB,CAAC,CACH,CAAC,CACH,CAAC,EACD,IAAMsC,EAAN,MAAMA,CAAwB,CAC5B,OAAO,QAAQC,EAAQ,CACrB,MAAO,CACL,SAAUD,EACV,UAAW,CAACJ,EAAmB,CAC7B,QAASlC,EACT,SAAUuC,CACZ,CAAC,CACH,CACF,CA+BF,EA7BID,EAAK,UAAUR,EAAmB,CAChC,WAAY,SACZ,QAAS,SACT,SAAUC,EACV,KAAMO,EACN,KAAM,CAAC,EACP,OAAWN,EAAgB,QAC7B,CAAC,EAGDM,EAAK,UAAUE,EAAoB,CACjC,WAAY,SACZ,QAAS,SACT,SAAUT,EACV,KAAMO,CACR,CAAC,EAGDA,EAAK,UAAUG,EAAoB,CACjC,WAAY,SACZ,QAAS,SACT,SAAUV,EACV,KAAMO,EACN,UAAW,CAACJ,EAAmB,CAC7B,QAASlC,EACT,SAAU,CAAC,CACb,CAAC,CACH,CAAC,EAtCL,IAAM0C,EAANJ,EAyCGH,EAAyB,CAC1B,WAAY,SACZ,QAAS,SACT,SAAUJ,EACV,KAAMW,EACN,WAAY,CAAC,CACX,KAAMC,EACN,KAAM,CAAC,CACL,UAAW,CAACT,EAAmB,CAC7B,QAASlC,EACT,SAAU,CAAC,CACb,CAAC,CACH,CAAC,CACH,CAAC,CACH,CAAC","names":["import_throwError","baseURL","environment","EuroPmcService","_a","http","__publicField","id","catchError","err","__decorate","Injectable","import_throwError","baseURL","environment","ReactomeService","_a","http","__publicField","id","catchError","err","__decorate","Injectable","import_throwError","baseURL","environment","OlsService","_a","http","__publicField","id","map","response","catchError","err","__decorate","Injectable","PageScrollInstance","_PageScrollInstance","pageScrollOptions","scrollTargetElement","body","docEl","windowPageYOffset","windowPageXOffset","scrollTop","scrollLeft","clientTop","clientLeft","box","top","left","position","accumulatedParentsPos","theWindow","parentFound","parent","scrollingView","oneAlreadyWorked","startScrollPropertyValue","scrollDistance","isSmallMovement","value","interruptReporter","event","targetSelector","NGXPS_CONFIG","InjectionToken","defaultPageScrollConfig","t","b","c","d","_PageScrollService","interrupted","pageScrollInstance","index","options","__spreadValues","isDevMode","startScrollPositionFound","scrollRange","scrollPosition","pageScrollOffset","scrollTargetPosition","allReadyAtDestination","tooShortInterval","instance","currentTime","newScrollPosition","stopNow","namespace","stoppedSome","i","customConfig","shouldStop","ɵɵngDeclareFactory","core_exports","FactoryTarget","ɵɵngDeclareInjectable","PageScrollService","ɵɵngDeclareClassMetadata","Injectable","Inject","_NgxPageScrollCoreModule","config","ɵɵngDeclareNgModule","ɵɵngDeclareInjector","NgxPageScrollCoreModule","NgModule"],"x_google_ignoreList":[3]}