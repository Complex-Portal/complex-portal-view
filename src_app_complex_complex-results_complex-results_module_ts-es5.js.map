{"version":3,"mappings":"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","names":["interactorTypeIcon","type","organismIcon","organism","formattedName","formatOrganismName","name","includes","end","indexOf","substring","ComplexFilterComponent","googleAnalyticsService","_classCallCheck","_angular_core__WEBPACK_IMPORTED_MODULE_4__","_createClass","key","value","filter","status","spicesFilter","push","fireAddedFilterEvent","splice","fireRemovedFilterEvent","onSpicesFilterChanged","emit","bioRoleFilter","onBiologicalRoleFilterChanged","interactorTypeFilter","onInteractorTypeFilterChanged","onResetAllFilters","_spicesFilter","length","_bioRoleFilter","_interactorTypeFilter","element","get","_facets","set","facet","_shared_google_analytics_service_analytics_service__WEBPACK_IMPORTED_MODULE_2__","selector","template","ComplexListComponent","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ComplexNavigatorButtonsComponent","updateDisplay","typeOfSorting","interactorsSortingChange","typeOfDisplay","interactorTypeDisplay","organismIconDisplay","IDDisplay","compactDisplay","detailedDisplay","changesEmitter","organismIconDisplayChange","interactorTypeDisplayChange","IDDisplayChange","ComplexNavigatorRatingComponent","analyticsService","rating","selectedRating","rateComplexNavigator","ratingVisibility","visible","ComplexNavigatorComponent","TableHeaderComponent","interactorsSorting","organismName","_angular_core__WEBPACK_IMPORTED_MODULE_3__","ComponentWithStoichiometry","findInteractorInComplex","complex","interactorId","enrichedInteractors","interactor","findInteractorInComplexComponents","interactors","identifier","stochiometryValue","stochiometryText","getStoichiometryText","stochiometryValueFormatted","formatStoichiometryValues","complexComponents","interactorFound","stoichiometry","_step","complexComponent","interactorMatch","findInteractorInComplexComponent","_iterator","componentStoichiometry","parseStoichiometryValues","stochiometry","interactorType","complexComponentInteractor","find","subComponents","subComponentsMatch","fetchValuesFromStoichiometry","pattern","match","matchedStoichiometry","minValue","parseInt","maxValue","isNaN","toString","EnrichedInteractor","EnrichedComplex","TableInteractorColumnComponent","complexPortalService","changes","enrichInteractors","classifyInteractors","calculateAllStartAndEndIndexes","classifyInteractorsByType","classifyInteractorsByOrganism","classifyInteractorsByOccurrence","_step2","isSubComplex","newEnrichedInteractor","hidden","expanded","partOfComplex","timesAppearing","_this","loadSubInteractors","subscribe","_loop","_iterator2","i","j","subInteractorIds","map","component","console","log","foundComplex","complexes","complexAC","getSimplifiedComplex","pipe","enrichedComplexes","_step3","calculateStartAndEndIndexes","_iterator3","valueA","valueB","Math","min","max","enrichedComplex","startInteractorIndex","endInteractorIndex","startSubComponentIndex","endSubComponentIndex","startInteractorIncludedWhenExpanded","getMinValue","getMaxValue","k","sort","a","b","localeCompare","rangeOfInteractorOrganism","rangeOfInteractorType","_step4","oneInteractor","_step5","_iterator5","_iterator4","ranges","start","oneType","_shared_service_complex_portal_service__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","TableInteractorExternalLinkComponent","showExternalLink","isMainInteractor","externalLinkVisible","identifierLink","TableInteractorNameComponent","interactorOrganismIcon","interactorOrganism","isVisible","TableInteractorStoichiometryComponent","TableMainInteractorComponent","interactorComponent","topLineClass","displayTopLineClas2","bottomLineClass","displayBottomLineClass","interactorIndex","doesLineCrossInteractorCell","doesLineEndOnInteractorCell","doesLineStartOnInteractorCell","TableSubcomponentInteractorComponent","el","displayTopLineClass","displayTopLineClassExpanded","displayBottomLineClassExpanded","subComponentIndex","doesLineCrossSubcomponentCell","doesLineEndOnSubcomponentCell","doesLineStartOnSubcomponentCell","some","_this2","TableStructureComponent","classifyComplexesSize","sortedComplexes","classifyComplexesSimilarities","complexSearch","elements","searchResult","complexesAndSizes","_step6","totalLength","_step7","complexInteractorChecked","subComplex","c","_loop2","_iterator7","_iterator6","complex1","complex2","similarities","_step8","complex1Interactor","_this3","complex2MatchingInteractor","_step9","subComplexInteractor","_step10","complex2Interactor","_iterator10","_iterator9","_step11","_step12","_iterator12","_loop4","_iterator11","_loop3","_iterator8","bigComplexes","classifiedList","_step13","similarInteractorFound","_step15","classification","comparedComplex","similarity","calculateSimilarity","_iterator15","_iterator13","unique","_step14","_iterator14","ComplexPaginatorComponent","updatePaginatior","pagination","_lastPageIndex","_currentPageIndex","_pagination","onPageChange","lastPageIndex","pageIndex","currentPageIndex","ComplexResultsComponent","route","router","titleService","notificationService","setTitle","_allInteractorsInComplexSearch","fragment","_this4","COMPLEX_NAVIGATOR_VIEW","DisplayType","LIST_VIEW","queryParams","_query","split","Number","requestComplexResults","document","body","scrollTop","findComplex","query","pageSize","_this5","totalNumberOfResults","ceil","_step16","_shared_model_complex_results_interactor_model__WEBPACK_IMPORTED_MODULE_5__","description","_loop5","_iterator16","_shared_loading_indicators_progress_bar_progress_bar_component__WEBPACK_IMPORTED_MODULE_3__","undefined","prepareFiltersForParams","navigate","filterCount","getFilterCount","fireMultiFilterEvent","replace","reloadPage","_navigatorCurrentPage","_listCurrentPage","_complexSearch","setFirstDisplayType","_navigatorLastPageIndex","_listLastPageIndex","_navigatorPageSize","_listPageSize","toast","complexNavigatorAnnouncement","closeAnnouncement","toastId","complexId","routeReuseStrategy","shouldReuseRoute","setComplexNavigatorView","setListView","_angular_router__WEBPACK_IMPORTED_MODULE_7__","_angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__","_shared_google_analytics_service_analytics_service__WEBPACK_IMPORTED_MODULE_4__","_shared_notification_service_notification_service__WEBPACK_IMPORTED_MODULE_6__","ComplexResultsModule","imports","_angular_router__WEBPACK_IMPORTED_MODULE_17__","path","_complex_results_component__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_18__","_shared_loading_indicators_progress_spinner_progress_spinner_module__WEBPACK_IMPORTED_MODULE_4__","ngx_markdown__WEBPACK_IMPORTED_MODULE_19__","exports","_complex_navigator_table_structure_table_structure_component__WEBPACK_IMPORTED_MODULE_6__","declarations","_complex_list_complex_list_component__WEBPACK_IMPORTED_MODULE_3__","_complex_filter_complex_filter_component__WEBPACK_IMPORTED_MODULE_2__","_complex_paginator_complex_paginator_component__WEBPACK_IMPORTED_MODULE_1__","_complex_navigator_complex_navigator_component__WEBPACK_IMPORTED_MODULE_5__","_complex_navigator_table_structure_table_header_table_header_component__WEBPACK_IMPORTED_MODULE_7__","_complex_navigator_table_structure_table_interactor_column_table_interactor_column_component__WEBPACK_IMPORTED_MODULE_8__","_complex_navigator_table_structure_table_interactor_column_table_interactor_name_table_interactor_name_component__WEBPACK_IMPORTED_MODULE_9__","_complex_navigator_table_structure_table_interactor_column_table_interactor_external_link_table_interactor_external_link_component__WEBPACK_IMPORTED_MODULE_10__","_complex_navigator_table_structure_table_interactor_column_table_interactor_stoichiometry_table_interactor_stoichiometry_component__WEBPACK_IMPORTED_MODULE_11__","_complex_navigator_table_structure_table_interactor_column_table_main_interactor_table_main_interactor_component__WEBPACK_IMPORTED_MODULE_12__","_complex_navigator_table_structure_table_interactor_column_table_subcomponent_interactor_table_subcomponent_interactor_component__WEBPACK_IMPORTED_MODULE_13__","_complex_navigator_buttons_complex_navigator_buttons_component__WEBPACK_IMPORTED_MODULE_14__","_complex_navigator_complex_navigator_rating_complex_navigator_rating_component__WEBPACK_IMPORTED_MODULE_15__","Interactor","_identifier","_identifierLink","_name","_description","_interactorType","_organismName","__webpack_exports__"],"sources":["webpack:///src/app/complex/complex-portal-utils.ts","webpack:///src/app/complex/complex-results/complex-filter/complex-filter.component.ts","webpack:///src/app/complex/complex-results/complex-list/complex-list.component.ts","webpack:///src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator-rating/complex-navigator-rating.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/complex-navigator-utils.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.ts","webpack:///src/app/complex/complex-results/complex-paginator/complex-paginator.component.ts","webpack:///src/app/complex/complex-results/complex-results.component.ts","webpack:///src/app/complex/complex-results/complex-results.module.ts","webpack:///src/app/complex/shared/model/complex-results/interactor.model.ts","webpack:///src/app/complex/complex-results/complex-filter/complex-filter.component.html","webpack:///src/app/complex/complex-results/complex-list/complex-list.component.html","webpack:///src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.html","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator-rating/complex-navigator-rating.component.html","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.html","webpack:///src/app/complex/complex-results/complex-paginator/complex-paginator.component.html","webpack:///src/app/complex/complex-results/complex-results.component.html"],"sourcesContent":["export function interactorTypeIcon(type: string): string {\n  switch (type) {\n    case 'small molecule':\n      return 'icon icon-conceptual icon-chemical';\n    case 'protein':\n    case 'peptide':\n      return 'icon icon-conceptual icon-structures-3d';\n    case 'stable complex':\n      return 'icon icon-conceptual icon-systems';\n    case 'molecule set':\n      return 'icon icon-generic icon-math';\n    case 'single stranded deoxyribonucleic acid':\n    case 'double stranded deoxyribonucleic acid':\n    case 'small nuclear rna':\n    case 'small nucleolar rna':\n    case 'ribosomal rna':\n    case 'messenger rna':\n    case 'transfer rna':\n    case 'signal recognition particle rna':\n    case 'ribonucleic acid':\n    case 'nucleic acid':\n    case 'long non-coding ribonucleic acid':\n      return 'icon icon-conceptual icon-dna';\n  }\n}\n\nexport function organismIcon(organism: string): string {\n  const formattedName = formatOrganismName(organism);\n  switch (formattedName) {\n    case 'Homo sapiens':\n    case 'Homo sapiens; 9606':\n      return 'icon icon-species icon-human';\n    case 'Mus musculus':\n    case 'Mus musculus; 10090':\n      return 'icon icon-species icon-mouse';\n    case 'Saccharomyces cerevisiae (strain ATCC 204508 / S288c)':\n    case 'Schizosaccharomyces pombe (strain 972 / ATCC 24843)':\n    case 'Saccharomyces cerevisiae; 559292':\n      return 'icon icon-species icon-yeast';\n    case 'Escherichia coli (strain K12)':\n    case 'Escherichia coli':\n    case 'Escherichia coli (strain K12); 83333':\n    case 'Escherichia coli; 562':\n    case 'Pseudomonas aeruginosa (strain ATCC 15692 / DSM 22644 / CIP 104116 ' +\n    '/ JCM 14847 / LMG 12228 / 1C / PRS 101 / PAO1)':\n    case 'Pseudomonas aeruginosa (strain ATCC 15692 / PAO1 / 1C / PRS 101 / LMG 12228); 208964':\n      return 'icon icon-species icon-ecoli';\n    case 'Rattus norvegicus':\n    case 'Rattus norvegicus (Rat)':\n    case 'Rattus norvegicus (Rat); 10116':\n      return 'icon icon-species icon-rat';\n    case 'Caenorhabditis elegans':\n    case 'Caenorhabditis elegans; 6239':\n      return 'icon icon-species icon-c-elegans';\n    case 'Gallus gallus':\n    case 'Gallus gallus (Chicken); 9031':\n      return 'icon icon-species icon-chicken';\n    case 'Drosophila melanogaster':\n    case 'Drosophila melanogaster (Fruit fly); 7227':\n      return 'icon icon-species icon-fly';\n    case 'Bos taurus':\n    case 'Bos taurus (Bovine); 9913':\n      return 'icon icon-species icon-cow';\n    case 'Oryctolagus cuniculus':\n    case 'Oryctolagus cuniculus (Rabbit); 9986':\n      return 'icon icon-species icon-rabbit';\n    case 'Ovis aries':\n    case 'Ovis aries (Sheep); 9940':\n      return 'icon icon-species icon-sheep';\n    case 'Xenopus laevis':\n    case 'Xenopus laevis (African clawed frog); 8355':\n      return 'icon icon-species icon-frog';\n    case 'Canis lupus familiaris':\n    case 'Canis familiaris (dog); 9615':\n      return 'icon icon-species icon-dog';\n    case 'Vibrio cholerae serotype O1 (strain ATCC 39315 / El Tor Inaba N16961)':\n    case 'Vibrio cholerae; 243277':\n      return 'assets/images/EMBL_Species_Vibrio_cholerae.svg';\n    case 'Crotalus durissus terrificus':\n    case 'Crotalus durissus terrificus; 8732':\n      return 'assets/images/EMBL_Species_RattleSnake.svg';\n    case 'Sus scrofa':\n    case 'Sus scrofa (Pig); 9823':\n      return 'icon icon-species icon-pig';\n    case 'Torpedo marmorata':\n    case 'Tetronarce californica':\n    case 'Torpedo marmorata; 7788':\n    case 'Torpedo californica (Pacific electric ray); 7787':\n      return 'icon icon-species icon-ray';\n    case 'Lymnaea stagnalis':\n    case 'Lymnaea stagnalis; 6523':\n      return 'icon icon-species icon-snail';\n    case 'Arabidopsis thaliana':\n    case 'Arabidopsis thaliana (Mouse-ear cress); 3702':\n      return 'icon icon-species icon-brassica';\n    case 'Danio rerio':\n    case 'Danio rerio (Zebrafish); 7955':\n      return 'icon icon-species icon-zebrafish';\n    case 'Severe acute respiratory syndrome coronavirus':\n    case 'Human SARS coronavirus; 694009' :\n    case 'SARS-CoV-2; 2697049':\n    case 'Severe acute respiratory syndrome coronavirus 2':\n    case 'Middle East respiratory syndrome-related coronavirus (isolate United Kingdom/H123990006/2012)':\n    case 'Middle East respiratory syndrome-related coronavirus (isolate United Kingdom/H123990006/2012) (Betacoronavirus England 1); 1263720':\n    case 'Human betacoronavirus 2c EMC/2012':\n    case 'Human betacoronavirus 2c EMC/2012; 1235996':\n      return 'icon icon-species icon-virus';\n  }\n  return ' ';\n}\n\nfunction formatOrganismName(name: string): string {\n  if (name.includes(';')) {\n    const end = name.indexOf(';');\n    return name.substring(0, end);\n  }\n  return name;\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Facets} from '../../shared/model/complex-results/facets.model';\nimport {AnalyticsService} from '../../../shared/google-analytics/service/analytics.service';\nimport {interactorTypeIcon} from '../../complex-portal-utils';\nimport {organismIcon} from '../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-complex-filter',\n  templateUrl: './complex-filter.component.html',\n  styleUrls: ['./complex-filter.component.css']\n})\nexport class ComplexFilterComponent implements OnInit {\n\n  private _facets: Facets;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n  @Output() onSpicesFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onBiologicalRoleFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onInteractorTypeFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onResetAllFilters: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private googleAnalyticsService: AnalyticsService) {\n  }\n\n  ngOnInit() {\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeSpeciesFilter(filter: string, status: boolean) {\n    if (status) {\n      this.spicesFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.spicesFilter.splice(this.spicesFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onSpicesFilterChanged.emit(this.spicesFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeBiologicalRoleFilter(filter: string, status: boolean) {\n    if (status) {\n      this.bioRoleFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.bioRoleFilter.splice(this.bioRoleFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onBiologicalRoleFilterChanged.emit(this.bioRoleFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeInteractorTypeFilter(filter: string, status: boolean) {\n    if (status) {\n      this.interactorTypeFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.interactorTypeFilter.splice(this.interactorTypeFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onInteractorTypeFilterChanged.emit(this.interactorTypeFilter);\n  }\n\n  /**\n   * Emit event to parent component to remove all filters\n   */\n  public resetAllFilters() {\n    this.onResetAllFilters.emit(true);\n  }\n\n  /**\n   *\n   * @returns {boolean} true is any filter array contains an filter\n   */\n  public anyFiltersSelected() {\n    return (this._spicesFilter.length !== 0 || this._bioRoleFilter.length !== 0 || this._interactorTypeFilter.length !== 0);\n  }\n\n  /**\n   *\n   * @param element filter to check if already selected\n   * @param filter selected filters\n   * @returns {boolean} true if filter is already in selected filters\n   */\n  public isSelected(element: string, filter: string[]): boolean {\n    return filter.indexOf(element) !== -1;\n  }\n\n  get facets(): Facets {\n    return this._facets;\n  }\n\n  @Input()\n  set facets(value: Facets) {\n    this._facets = value;\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  @Input()\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  @Input()\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  @Input()\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n\n  public facetTypeIcon(facet): string {\n    return interactorTypeIcon(facet.name);\n  }\n\n  public facetOrganismIcon(facet): string {\n    return organismIcon(facet);\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\n\n@Component({\n  selector: 'cp-complex-list',\n  templateUrl: './complex-list.component.html',\n  styleUrls: ['./complex-list.component.css']\n})\nexport class ComplexListComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Component, EventEmitter, Input, Output, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-navigator-buttons',\n  templateUrl: './complex-navigator-buttons.component.html',\n  styleUrls: ['./complex-navigator-buttons.component.css']\n})\nexport class ComplexNavigatorButtonsComponent implements OnInit {\n  @Output() interactorsSortingChange = new EventEmitter<string>();\n  @Output() organismIconDisplayChange = new EventEmitter<boolean>();\n  @Output() interactorTypeDisplayChange = new EventEmitter<boolean>();\n  @Output() IDDisplayChange = new EventEmitter<boolean>();\n\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  typeOfDisplay: string;\n\n  ngOnInit() {\n    this.updateDisplay();\n  }\n\n  InteractorsSortingChanges(typeOfSorting: string) {\n    this.interactorsSortingChange.emit(typeOfSorting);\n    if (this.typeOfDisplay === 'detailed') {\n      if (typeOfSorting === 'Type') {\n        this.interactorTypeDisplay = false;\n        this.organismIconDisplay = true;\n      } else if (typeOfSorting === 'Organism') {\n        this.organismIconDisplay = false;\n        this.interactorTypeDisplay = true;\n      }\n      this.updateDisplay();\n    }\n  }\n\n  DisplayingOrganism() {\n    this.organismIconDisplay = !this.organismIconDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingType() {\n    this.interactorTypeDisplay = !this.interactorTypeDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingID() {\n    this.IDDisplay = !this.IDDisplay;\n    this.updateDisplay();\n  }\n\n  setDisplayType(type: string) {\n    if (type === 'compact') {\n      this.compactDisplay();\n    } else if (type === 'detailed') {\n      this.detailedDisplay();\n    }\n  }\n\n  compactDisplay() {\n    this.organismIconDisplay = false;\n    this.interactorTypeDisplay = false;\n    this.IDDisplay = false;\n    this.typeOfDisplay = 'compact';\n    this.changesEmitter();\n  }\n\n  detailedDisplay() {\n    this.organismIconDisplay = true;\n    this.interactorTypeDisplay = true;\n    this.IDDisplay = true;\n    this.typeOfDisplay = 'detailed';\n    this.changesEmitter();\n  }\n\n  updateDisplay() {\n    if (this.organismIconDisplay || this.interactorTypeDisplay || this.IDDisplay) {\n      this.typeOfDisplay = 'detailed';\n    } else {\n      this.typeOfDisplay = 'compact';\n    }\n    this.changesEmitter();\n  }\n\n  changesEmitter() {\n    this.organismIconDisplayChange.emit(this.organismIconDisplay);\n    this.interactorTypeDisplayChange.emit(this.interactorTypeDisplay);\n    this.IDDisplayChange.emit(this.IDDisplay);\n  }\n\n}\n","import {Component} from '@angular/core';\nimport {AnalyticsService} from '../../../../shared/google-analytics/service/analytics.service';\n\n@Component({\n  selector: 'cp-complex-navigator-rating',\n  templateUrl: './complex-navigator-rating.component.html',\n  styleUrls: ['./complex-navigator-rating.component.css']\n})\nexport class ComplexNavigatorRatingComponent {\n  selectedRating: number;\n  visible = true;\n\n  constructor(private analyticsService: AnalyticsService) {\n  }\n\n  selectRating(rating: number) {\n    this.selectedRating = rating;\n    // console.log(`Selected rating: ${rating}`);\n    this.analyticsService.rateComplexNavigator(this.selectedRating);\n    this.ratingVisibility();\n  }\n\n  ratingVisibility() {\n    this.visible = false;\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-navigator',\n  templateUrl: './complex-navigator.component.html',\n  styleUrls: ['./complex-navigator.component.css']\n})\n\nexport class ComplexNavigatorComponent {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  interactorsSorting = 'Occurrence';\n  organismIconDisplay = true;\n  interactorTypeDisplay = true;\n  IDDisplay = true;\n}\n","import {Component, Input} from '@angular/core';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\nimport {organismIcon} from '../../../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-table-header',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css'],\n})\n\nexport class TableHeaderComponent {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  iconOrganism(organismName: string) {\n    return organismIcon(organismName);\n  }\n}\n","import {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedInteractor} from './table-interactor-column.component';\n\nexport class ComponentWithStoichiometry {\n  identifier: string;\n  stochiometryValue: [number, number];\n  stochiometryText?: string;\n  stochiometryValueFormatted?: string;\n}\n\nexport function findInteractorInComplex(complex: Element,\n                                        interactorId: string,\n                                        enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const interactor = findInteractorInComplexComponents(complex.interactors, interactorId, enrichedInteractors);\n  if (!!interactor) {\n    return {\n      identifier: interactor.identifier,\n      stochiometryValue: interactor.stochiometryValue,\n      stochiometryText: getStoichiometryText(interactor.stochiometryValue),\n      stochiometryValueFormatted: formatStoichiometryValues(interactor.stochiometryValue)\n    };\n  }\n  return null;\n}\n\n// Private functions\n\nfunction findInteractorInComplexComponents(complexComponents: ComplexComponent[],\n                                           interactorId: string,\n                                           enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  // We look for the interactor in the complex, as one of the components, or as part of any subcomplex of the complex, recursively.\n  // Even if we find a match for the interactor as one of the complex components, we keep looking at other components, as the interactor\n  // could also be part of a subcomplex, so the stoichiometry would need to be added for all matches.\n\n  let interactorFound = false;\n  let stoichiometry: [number, number] = null;\n\n  // We iterate through all the components of the complex to find matches\n  for (const complexComponent of complexComponents) {\n    const interactorMatch = findInteractorInComplexComponent(complexComponent, interactorId, enrichedInteractors);\n    if (!!interactorMatch) {\n      // We found a match for the interactor, on this component, or on a subcomponent of it in the case of a subcomplex\n      interactorFound = true;\n      // If we have any stoichiometry for the component, we add it to the total stoichiometry\n      if (!!interactorMatch.stochiometryValue) {\n        if (!!stoichiometry) {\n          stoichiometry = [\n            stoichiometry[0] + interactorMatch.stochiometryValue[0],\n            stoichiometry[1] + interactorMatch.stochiometryValue[1]\n          ];\n        } else {\n          stoichiometry = [\n            interactorMatch.stochiometryValue[0],\n            interactorMatch.stochiometryValue[1]\n          ];\n        }\n      }\n    }\n  }\n\n  // If we have found the interactor as part of one of the complex components, or part of a subcomplex, we return it\n  if (interactorFound) {\n    return {\n      identifier: interactorId,\n      stochiometryValue: stoichiometry\n    };\n  }\n\n  return null;\n}\n\nfunction findInteractorInComplexComponent(complexComponent: ComplexComponent,\n                                          interactorId: string,\n                                          enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const componentStoichiometry = parseStoichiometryValues(complexComponent.stochiometry);\n\n  if (complexComponent.identifier === interactorId) {\n    // The interactor is the complex component we are currently checking\n    return {\n      identifier: interactorId,\n      stochiometryValue: componentStoichiometry\n    };\n  }\n\n  if (complexComponent.interactorType === 'stable complex') {\n    // If the id does not match, and the component is a subcomplex, then we can look for the interactor in the subcomplex components\n    const complexComponentInteractor = enrichedInteractors.find(interactor =>\n      interactor.interactor.identifier === complexComponent.identifier);\n\n    if (!!complexComponentInteractor && !!complexComponentInteractor.subComponents) {\n      const subComponentsMatch = findInteractorInComplexComponents(\n        complexComponentInteractor.subComponents, interactorId, enrichedInteractors);\n\n      if (!!subComponentsMatch) {\n        // We have found the interactor in the subcomplex\n        if (!!subComponentsMatch.stochiometryValue) {\n          if (!!componentStoichiometry) {\n            // If we have stoichiometry for both the component and the subcomponent, we add both\n            return {\n              identifier: interactorId,\n              stochiometryValue: [\n                componentStoichiometry[0] * subComponentsMatch.stochiometryValue[0],\n                componentStoichiometry[1] * subComponentsMatch.stochiometryValue[1]\n              ]\n            };\n          } else {\n            // If we only have stoichiometry for the subcomponent, we use that stoichiometry\n            return {\n              identifier: interactorId,\n              stochiometryValue: subComponentsMatch.stochiometryValue\n            };\n          }\n        } else {\n          // If we only have stoichiometry for the component, we use that stoichiometry\n          return {\n            identifier: interactorId,\n            stochiometryValue: componentStoichiometry\n          };\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction fetchValuesFromStoichiometry(stoichiometry: string) {\n  const pattern = 'minValue: ([0-9+]), maxValue: ([0-9+])';\n  return stoichiometry.match(pattern);\n}\n\nfunction parseStoichiometryValues(stoichiometry: string): [number, number] {\n  if (!!stoichiometry) {\n    const matchedStoichiometry = fetchValuesFromStoichiometry(stoichiometry);\n    if (!!matchedStoichiometry) {\n      const minValue = parseInt(matchedStoichiometry[1], 10);\n      const maxValue = parseInt(matchedStoichiometry[2], 10);\n      if (!isNaN(minValue) && !isNaN(maxValue)) {\n        return [minValue, maxValue];\n      }\n    }\n  }\n  return null;\n}\n\nfunction formatStoichiometryValues(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n    const minValue = stoichiometry[0];\n    const maxValue = stoichiometry[1];\n    if (minValue === maxValue) {\n      return minValue.toString();\n    } else {\n      return `${minValue}-${maxValue}`;\n    }\n  }\n  return ' '; // sometimes we don't have the stoichiometry value\n}\n\nfunction getStoichiometryText(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n      return 'Stoichiometry values: minValue: ' + stoichiometry[0] + ', maxValue: ' + stoichiometry[1];\n  } else {\n    return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n  }\n}\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {Interactor} from '../../../../shared/model/complex-results/interactor.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {Observable} from 'rxjs/Observable';\nimport {of} from 'rxjs';\nimport {ComplexPortalService} from '../../../../shared/service/complex-portal.service';\nimport {map} from 'rxjs/operators';\nimport {findInteractorInComplex} from './complex-navigator-utils';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\nexport class EnrichedInteractor {\n  interactor: Interactor;\n  hidden: boolean;\n  isSubComplex: boolean;\n  expanded: boolean;\n  subComponents: ComplexComponent[];\n  partOfComplex: number[];\n  timesAppearing: number;\n}\n\nexport class EnrichedComplex {\n  complex: Element;\n  startInteractorIndex: number;\n  endInteractorIndex: number;\n  startSubComponentIndex: number;\n  endSubComponentIndex: number;\n  startInteractorIncludedWhenExpanded: boolean;\n}\n\n@Component({\n  selector: 'cp-table-interactor-column',\n  templateUrl: './table-interactor-column.component.html',\n  styleUrls: ['./table-interactor-column.component.css']\n})\nexport class TableInteractorColumnComponent implements OnChanges {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() interactors: Interactor[];\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  enrichedInteractors: EnrichedInteractor[];\n  enrichedComplexes: EnrichedComplex[];\n  ranges: number[];\n\n\n  constructor(private complexPortalService: ComplexPortalService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!!changes['interactors']) {\n      this.enrichInteractors();\n    }\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  private classifyInteractors(): void {\n    if (!!this.interactorsSorting && !!this.enrichedInteractors && this.enrichedInteractors.length > 0) {\n      if (this.interactorsSorting === 'Type') {\n        this.classifyInteractorsByType();\n      } else if (this.interactorsSorting === 'Organism') {\n        this.classifyInteractorsByOrganism();\n      } else {\n        this.classifyInteractorsByOccurrence();\n      }\n    }\n  }\n\n  private enrichInteractors() {\n    this.enrichedInteractors = [];\n    for (const interactor of this.interactors) {\n      const isSubComplex = interactor.interactorType === 'stable complex';\n      const newEnrichedInteractor: EnrichedInteractor = {\n        interactor,\n        hidden: false,\n        isSubComplex,\n        expanded: false,\n        subComponents: null,\n        partOfComplex: [],\n        timesAppearing: 0,\n      };\n      if (isSubComplex) {\n        this.loadSubInteractors(newEnrichedInteractor).subscribe(subComponents => newEnrichedInteractor.subComponents = subComponents);\n      }\n      this.enrichedInteractors.push(newEnrichedInteractor);\n    }\n  }\n\n  toggleSubcomplexExpandable(i: number): void {\n    this.enrichedInteractors[i].expanded = !this.enrichedInteractors[i].expanded;\n\n    if (this.enrichedInteractors[i].expanded) {\n      // EnrichedInteractor has been expanded, we need to:\n\n      // 1. Collapse the other ones, in case there is any other expanded\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        if (i !== j) {\n          this.enrichedInteractors[j].expanded = false;\n        }\n      }\n\n      // 2. Hide any interactor now displayed in the expanded section\n      if (!!this.enrichedInteractors[i].subComponents) {\n        const subInteractorIds: string[] = this.enrichedInteractors[i].subComponents.map(component => component.identifier);\n        for (let j = 0; j < this.enrichedInteractors.length; j++) {\n          if (i !== j) {\n            this.enrichedInteractors[j].hidden = !!subInteractorIds.includes(this.enrichedInteractors[j].interactor.identifier);\n          }\n        }\n      }\n    } else {\n      // EnrichedInteractor has been collapsed, we need to:\n      // 1. Display any interactor previously hidden\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        this.enrichedInteractors[j].hidden = false;\n      }\n    }\n\n    // Something has been expanded or collapsed, we need to recalculate the start and end indexes for the lines\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n    console.log('Done');\n\n  }\n\n  private loadSubInteractors(interactor: EnrichedInteractor): Observable<ComplexComponent[]> {\n    // this function returns the list of subcomponents of an interactor of type stable complex\n    const foundComplex: Element = this.complexes.find(complex => complex.complexAC === interactor.interactor.identifier);\n    if (!!foundComplex) {\n      return of(foundComplex.interactors);\n    } else {\n      // Actually call the back-end to fetch these\n      return this.complexPortalService.getSimplifiedComplex(interactor.interactor.identifier)\n        .pipe(map(complex => complex?.interactors));\n    }\n  }\n\n  private calculateAllStartAndEndIndexes(): void {\n    this.enrichedComplexes = [];\n\n    for (const complex of this.complexes) {\n      this.enrichedComplexes.push(this.calculateStartAndEndIndexes(complex));\n    }\n  }\n\n  private getMinValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.min(valueA, valueB);\n  }\n\n  private getMaxValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.max(valueA, valueB);\n  }\n\n  private calculateStartAndEndIndexes(complex: Element): EnrichedComplex {\n    const enrichedComplex: EnrichedComplex = {\n      complex,\n      startInteractorIndex: null,\n      endInteractorIndex: null,\n      startSubComponentIndex: null,\n      endSubComponentIndex: null,\n      startInteractorIncludedWhenExpanded: true,\n    };\n\n    // We iterate through the interactors to find the first and last one part of the complex\n    // We do this to be able to draw a line connecting all interactors in the complex\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n\n        if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].interactor.identifier, this.enrichedInteractors)) {\n          // The interactor is part of the complex, we update the start and end indices for the interactors\n          // line as it may start in this interactor\n          enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n          if (enrichedComplex.startInteractorIndex === i) {\n            // The line starts in this interactor, so the line always starts in this interactor, even when expanded\n            enrichedComplex.startInteractorIncludedWhenExpanded = true;\n          }\n          enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n\n          // The interactor is a subcomplex\n          if (this.enrichedInteractors[i].isSubComplex && !!this.enrichedInteractors[i].subComponents) {\n            if (this.enrichedInteractors[i].expanded) {\n              // If the subcomplex is expanded, as the subcomplex is part of the complex, all its subcomponents are also part\n              // of it. That means we need a line connecting all the subcomponents.\n              // That line must also connect to the subcomplex, so we start it at -1 to make sure it starts at the interactor cell\n              // and not at the first subcomponent\n              enrichedComplex.startSubComponentIndex = -1;\n              enrichedComplex.endSubComponentIndex = this.enrichedInteractors[i].subComponents.length - 1;\n            }\n          }\n        } else if (this.enrichedInteractors[i].isSubComplex &&\n          !!this.enrichedInteractors[i].subComponents &&\n          this.enrichedInteractors[i].expanded) {\n            // The interactor is not part of the complex, but it is a subcomplex, and it is expanded.\n            // This means the subcomponents of the subcomplex are visible, and any of them could be part of the complex.\n            // In that case, the line could start or end on any of those subcomponents\n            for (let k = 0; k < this.enrichedInteractors[i].subComponents.length; k++) {\n              if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].subComponents[k].identifier, this.enrichedInteractors)) {\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the interactors\n                // line as it may start in this interactor\n                enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n                if (enrichedComplex.startInteractorIndex === i) {\n                  // The line starts in a subcomponent of the interactor, but not on the interactor itself,\n                  // so the line does not start in the interactor when expanded\n                  enrichedComplex.startInteractorIncludedWhenExpanded = false;\n                }\n                enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the subcomponents\n                // line as it may start in this subcomponent\n                enrichedComplex.startSubComponentIndex = this.getMinValue(enrichedComplex.startSubComponentIndex, k);\n                enrichedComplex.endSubComponentIndex = this.getMaxValue(enrichedComplex.endSubComponentIndex, k);\n              }\n            }\n        }\n      }\n    }\n    return enrichedComplex;\n  }\n\n  public classifyInteractorsByOrganism() {\n    this.enrichedInteractors.sort((a, b) => b.interactor.organismName.localeCompare(a.interactor.organismName));\n    this.rangeOfInteractorOrganism();\n  }\n\n  public classifyInteractorsByType() {\n    this.enrichedInteractors.sort((a, b) => b.interactor.interactorType.localeCompare(a.interactor.interactorType));\n    this.rangeOfInteractorType();\n  }\n\n  public classifyInteractorsByOccurrence() {\n    for (const oneInteractor of this.enrichedInteractors) {\n      for (const complex of this.complexes) {\n        const match = findInteractorInComplex(complex, oneInteractor.interactor.identifier, this.enrichedInteractors);\n        if (!!match) {\n          if (!!match.stochiometryValue) {\n            oneInteractor.timesAppearing += match.stochiometryValue[0];\n          } else {\n            oneInteractor.timesAppearing += 1;\n          }\n        }\n      }\n    }\n    this.enrichedInteractors.sort((a, b) =>\n      b.timesAppearing - a.timesAppearing\n    );\n    this.ranges = [];\n  }\n\n  public rangeOfInteractorType() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.interactorType !== this.enrichedInteractors[i + 1].interactor.interactorType) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.interactorType, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  public rangeOfInteractorOrganism() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.organismName !== this.enrichedInteractors[i + 1].interactor.organismName) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.organismName, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-external-link',\n  templateUrl: './table-interactor-external-link.component.html',\n  styleUrls: ['./table-interactor-external-link.component.css']\n})\nexport class TableInteractorExternalLinkComponent implements OnInit {\n\n  @Input() interactorId: string;\n  @Input() identifierLink: string;\n  @Input() interactorType: string;\n  @Input() isMainInteractor: boolean;\n  @Input() IDDisplay: boolean;\n\n  @Output() externalLinkVisible: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  ngOnInit(): void {\n    this.showExternalLink();\n  }\n\n  showExternalLink(): boolean {\n    if (this.isMainInteractor && this.interactorType === 'stable complex') {\n      this.externalLinkVisible.emit(false);\n      return false;\n    }\n    this.externalLinkVisible.emit(!!this.identifierLink);\n    return !!this.identifierLink;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {interactorTypeIcon} from '../../../../../complex-portal-utils';\nimport {organismIcon} from '../../../../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-table-interactor-name',\n  templateUrl: './table-interactor-name.component.html',\n  styleUrls: ['./table-interactor-name.component.css']\n})\nexport class TableInteractorNameComponent implements OnInit {\n\n  @Input() interactorName: string;\n  @Input() interactorType: string;\n  @Input() interactorId: string;\n  @Input() interactorOrganism: string;\n  @Input() identifierLink: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() isMainInteractor: boolean;\n  interactorTypeIcon: string;\n  interactorOrganismIcon: string;\n  externalLinkVisible: boolean;\n\n  ngOnInit(): void {\n    this.interactorTypeIcon = interactorTypeIcon(this.interactorType);\n    this.interactorOrganismIcon = organismIcon(this.interactorOrganism);\n  }\n\n  externalLinkVisibleHandler(isVisible: boolean): void {\n    this.externalLinkVisible = isVisible;\n  }\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-stoichiometry',\n  templateUrl: './table-interactor-stoichiometry.component.html',\n  styleUrls: ['./table-interactor-stoichiometry.component.css']\n})\nexport class TableInteractorStoichiometryComponent {\n  @Input() stoichiometryText: string;\n  @Input() stoichiometryValue: string;\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-main-interactor',\n  templateUrl: './table-main-interactor.component.html',\n  styleUrls: ['./table-main-interactor.component.css']\n})\nexport class TableMainInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  topLineClass: string;\n  bottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(\n      this.complex.complex, this.interactor.interactor.identifier, this.enrichedInteractors);\n    this.topLineClass = this.displayTopLineClas2(this.complex, this.i);\n    this.bottomLineClass = this.displayBottomLineClass(this.complex, this.i);\n  }\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  public displayTopLineClas2(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnInteractorCell(complex, interactorIndex) && !this.doesLineStartOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnInteractorCell(complex, interactorIndex) && !this.doesLineEndOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n\n      // The line starts before this interactor and ends after, so it crosses through the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      // The line starts before this interactor and end at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor, and it must cross through the interactor cell to the subcomponents\n        if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n\n      if (!this.enrichedInteractors[interactorIndex].isSubComplex) {\n        // If the interactor is not a subcomplex, then the interactor has no subcomponents and the line starts in it\n        return true;\n      }\n      // If the interactor is a subcomplex.\n      // If the interactor is actually part of the complex, the line starts in this interactor\n      // Otherwise, the line actually starts on one of the subcomponents of the complex, but not on the interactor itself, as it is\n      // not part of the complex.\n      if (complex.startInteractorIncludedWhenExpanded) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line ends at this interactor or on any of its subcomponents\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n\n      // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n      // the line does not end in this interactor, and it must cross through to the subcomponents\n      if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n        if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-subcomponent-interactor',\n  templateUrl: './table-subcomponent-interactor.component.html',\n  styleUrls: ['./table-subcomponent-interactor.component.css']\n})\n\nexport class TableSubcomponentInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() j: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  displayTopLineClass: string;\n  displayBottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(this.complex.complex, this.el.identifier, this.enrichedInteractors);\n    this.displayTopLineClass = this.displayTopLineClassExpanded(this.complex, this.i, this.j);\n    this.displayBottomLineClass = this.displayBottomLineClassExpanded(this.complex, this.i, this.j);\n  }\n\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  get el(): ComplexComponent {\n    return this.enrichedInteractors[this.i].subComponents[this.j];\n  }\n\n  public displayTopLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n      // The line starts before this interactor and ends after, so it crosses through all the subcomponents of the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n        // The line starts before this subcomponent and ends after, so it crosses through the subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this interactor, and it ends on a later subcomponent, so it crosses through this subcomponent\n        if (complex.startInteractorIndex < interactorIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this subcomponent, and it ends on a later interactor, so it crosses through this subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endInteractorIndex > interactorIndex) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n      if (complex.startSubComponentIndex != null && complex.startSubComponentIndex === subComponentIndex) {\n        // If the subcomplex is a component of the complex, the line starts in the cell of the interactor, meaning it cannot\n        // start on any subcomponent.\n        // Otherwise, it starts on the subcomponent with the index subComponentIndex\n        return !complex.complex.interactors.some(component =>\n          this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier);\n\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n      // The line ends at this interactor and this subcomponent\n      if (complex.endSubComponentIndex != null && complex.endSubComponentIndex === subComponentIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {ComplexSearchResult} from '../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../shared/model/complex-results/interactor.model';\nimport {Element} from '../../../shared/model/complex-results/element.model';\n\n@Component({\n  selector: 'cp-table-structure',\n  templateUrl: './table-structure.component.html',\n  styleUrls: ['./table-structure.component.css']\n})\nexport class TableStructureComponent implements OnChanges {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  sortedComplexes: Element[] = [];\n\n  ngOnChanges(): void {\n    this.classifyComplexesSize(); // ensure to always have the same base of comparison\n    this.sortedComplexes = this.classifyComplexesSimilarities(this.complexSearch.elements);\n  }\n\n  classifyComplexesSize(): void {\n    const searchResult: Element[] = [...this.complexSearch.elements];\n    const complexesAndSizes: [Element, number][] = [];\n    for (const complex of searchResult) {\n      let totalLength = complex.interactors.length;\n      for (const complexInteractorChecked of complex.interactors) {\n        if (complexInteractorChecked.interactorType === 'stable complex') {\n          const subComplex: Element = searchResult.find(c => c.complexAC === complexInteractorChecked.identifier);\n          if (!!subComplex) {\n            totalLength += subComplex.interactors.length;\n          }\n        }\n      }\n      complexesAndSizes.push([complex, totalLength]);\n    }\n    complexesAndSizes.sort((a, b) => b[1] - a[1]);\n    for (let i = 0; i < searchResult.length; i++) {\n      this.complexSearch.elements[i] = complexesAndSizes[i][0];\n    }\n  }\n\n  private calculateSimilarity(complex1, complex2) {\n    let similarities = 0;\n    for (const complex1Interactor of complex1.interactors) {\n      // The interactor of complex 1 is a subcomplex\n      if (complex1Interactor.interactorType === 'stable complex') {\n        // The subcomplex is exactly complex 2, so we add the number of interactors of complex 2 to the similarities\n        if (complex2.complexAC === complex1Interactor.identifier) {\n          similarities += complex2.interactors.length;\n        } else {\n          const subComplex: Element = this.complexSearch.elements.find(\n            complex => complex.complexAC === complex1Interactor.identifier\n          );\n          if (!!subComplex) {\n            const complex2MatchingInteractor: Interactor = complex2.interactors.find(\n              interactor => interactor.identifier === complex1Interactor.identifier\n            );\n            if (!!complex2MatchingInteractor) {\n              // Complex 2 also has the same subcomplex as an interactor, so we add all the interactors in the subcomplex\n              // to the similarities, as the two complexes have all those interactors in common\n              similarities += subComplex.interactors.length;\n            } else {\n              // Complex 2 does not have the same subcomplex as interactor, so we need to compare interactors\n              // of the subcomplex and complex 2 to find any matches\n              for (const subComplexInteractor of subComplex.interactors) {\n                for (const complex2Interactor of complex2.interactors) {\n                  if (subComplexInteractor.identifier === complex2Interactor.identifier) {\n                    similarities++;\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        // The interactor of complex 1 is not a subcomplex\n        for (const complex2Interactor of complex2.interactors) {\n          // The interactor of complex 2 is a subcomplex\n          if (complex2Interactor.interactorType === 'stable complex') {\n            const subComplex: Element = this.complexSearch.elements.find(\n              complex => complex.complexAC === complex2Interactor.identifier\n            );\n            if (!!subComplex) {\n              // Complex 2 interactor is a subcomplex, so we need to compare the complex 1 interactor with interactors of this\n              // subcomplex to find any matches\n              for (const subComplexInteractor of subComplex.interactors) {\n                if (subComplexInteractor.identifier === complex1Interactor.identifier) {\n                  similarities++;\n                }\n              }\n            }\n          } else if (complex1Interactor.identifier === complex2Interactor.identifier) {\n            // The interactors of complex 1 and complex 2 are not subcomplexes, and they have the same id, so we add to the similarities\n            similarities++;\n          }\n        }\n      }\n    }\n    return similarities;\n  }\n\n  private classifyComplexesSimilarities(bigComplexes: Element[]): Element[] {\n    const classifiedList: Element[][] = [];\n    // multidimensional array containing groups of complexes having similar interactors\n    for (const complex of bigComplexes) {\n      let similarInteractorFound = false;\n      for (const classification of classifiedList) {\n        const comparedComplex = classification[0];\n        const similarity = this.calculateSimilarity(complex, comparedComplex);\n        if (similarity >= 1) {\n          classification.push(complex);\n          similarInteractorFound = true; // goes to the next complex\n        }\n      }\n      if (!similarInteractorFound) {\n        classifiedList.push([complex]); // fill classifiedList with arrays of all the complexes in the list\n      }\n    }\n    const unique: Element[] = [];\n    for (const classification of classifiedList) {\n      for (const complex of classification) {\n        if (!unique.includes(complex)) {\n          unique.push(complex);\n        }\n      }\n    }\n    return unique;\n  }\n\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-paginator',\n  templateUrl: './complex-paginator.component.html',\n  styleUrls: ['./complex-paginator.component.css']\n})\nexport class ComplexPaginatorComponent implements OnInit, OnChanges {\n  private _lastPageIndex: number;\n  private _currentPageIndex: number;\n  private _pagination: any;\n\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter<number>();\n\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.updatePaginatior();\n  }\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.updatePaginatior();\n  }\n\n  public updatePaginatior(): void {\n    let start: number;\n    let end: number;\n    this.pagination = [];\n    if (this._lastPageIndex < 5) {\n      start = 1;\n      end = this._lastPageIndex;\n\n    } else {\n      if (this._currentPageIndex === 1 || this._currentPageIndex === 2) {\n        start = 1;\n        end = 5;\n      } else if (this._currentPageIndex === this._lastPageIndex || this._currentPageIndex === this._lastPageIndex - 1) {\n        start = this._lastPageIndex - 4;\n        end = this._lastPageIndex;\n      } else {\n        start = this._currentPageIndex - 2;\n        end = this._currentPageIndex + 2;\n      }\n    }\n    while (start <= end) {\n      if (start === this._currentPageIndex) {\n        this._pagination.push([[this._currentPageIndex], [true]]);\n      } else {\n        this._pagination.push([[start], [false]]);\n      }\n      start++;\n    }\n  }\n\n  public getFirstPage(): void {\n    this.onPageChange.emit(1);\n  }\n\n  public getLastPage(): void {\n    this.onPageChange.emit(this.lastPageIndex);\n  }\n\n  public getPage(pageIndex: number) {\n    this.onPageChange.emit(pageIndex);\n  }\n\n  public getPreviousPage(): void {\n    this.onPageChange.emit(this.currentPageIndex - 1);\n  }\n\n  public getNextPage(): void {\n    this.onPageChange.emit(this.currentPageIndex + 1);\n  }\n\n  get lastPageIndex() {\n    return this._lastPageIndex;\n  }\n\n  @Input()\n  set lastPageIndex(value) {\n    this._lastPageIndex = value;\n  }\n\n  get currentPageIndex() {\n    return this._currentPageIndex;\n  }\n\n  @Input()\n  set currentPageIndex(value) {\n    this._currentPageIndex = value;\n  }\n\n  get pagination() {\n    return this._pagination;\n  }\n\n  set pagination(value) {\n    this._pagination = value;\n  }\n}\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, NavigationExtras, Router} from '@angular/router';\nimport {ComplexSearchResult} from '../shared/model/complex-results/complex-search.model';\nimport {ComplexPortalService} from '../shared/service/complex-portal.service';\nimport {ProgressBarComponent} from '../../shared/loading-indicators/progress-bar/progress-bar.component';\nimport {Title} from '@angular/platform-browser';\nimport {AnalyticsService} from '../../shared/google-analytics/service/analytics.service';\nimport {Interactor} from '../shared/model/complex-results/interactor.model';\nimport {NotificationService} from '../../shared/notification/service/notification.service';\n\n@Component({\n  selector: 'cp-complex-results',\n  templateUrl: './complex-results.component.html',\n  styleUrls: ['./complex-results.component.css'],\n})\nexport class ComplexResultsComponent implements OnInit, AfterViewInit {\n  LIST_VIEW = 'view_list';\n  COMPLEX_NAVIGATOR_VIEW = 'view_complex_navigator';\n  private _query: string;\n  private _complexSearch: ComplexSearchResult;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n  private _allInteractorsInComplexSearch: Interactor[] = [];\n  DisplayType: string;\n  toast;\n\n  private _listPageSize = 15; // This is where we set the size of the pages for list view\n  private _navigatorPageSize = 15; // This is where we set the size of the pages for navigator view\n  private _listCurrentPage: number;\n  private _navigatorCurrentPage: number;\n  private _listLastPageIndex;\n  private _navigatorLastPageIndex;\n\n  constructor(private route: ActivatedRoute, private router: Router,\n              private complexPortalService: ComplexPortalService, private titleService: Title,\n              private googleAnalyticsService: AnalyticsService, private notificationService: NotificationService) {\n  }\n\n  ngOnInit() {\n    this.titleService.setTitle('Complex Portal - Results');\n    this._allInteractorsInComplexSearch = [];\n    this.route.fragment.subscribe(fragment => {\n      if (fragment === this.COMPLEX_NAVIGATOR_VIEW) {\n        this.DisplayType = this.COMPLEX_NAVIGATOR_VIEW;\n      } else if (fragment === this.LIST_VIEW) {\n        this.DisplayType = this.LIST_VIEW;\n      }\n      this.route\n        .queryParams\n        .subscribe(queryParams => {\n          this._query = queryParams['query'];\n          this._spicesFilter = queryParams['species'] ? queryParams['species'].split('+') : [];\n          this._bioRoleFilter = queryParams['bioRole'] ? queryParams['bioRole'].split('+') : [];\n          this._interactorTypeFilter = queryParams['interactorType'] ? queryParams['interactorType'].split('+') : [];\n          this.currentPageIndex = queryParams['page'] ? Number(queryParams['page']) : 1;\n          // TODO This is out for now, but CP-84 (JIRA )should fix that!!\n          // this.pageSize = queryParams['size'] ? Number(queryParams['size']) : 10;\n          this.requestComplexResults();\n          document.body.scrollTop = 0;\n        });\n    });\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  private requestComplexResults() {\n    this.complexPortalService.findComplex(this.query, this.spicesFilter, this.bioRoleFilter,\n      this.interactorTypeFilter, this.currentPageIndex, this.pageSize).subscribe(complexSearch => {\n      this.complexSearch = complexSearch;\n      this._allInteractorsInComplexSearch = [];\n      if (this.complexSearch.totalNumberOfResults !== 0) {\n        this.lastPageIndex = Math.ceil(complexSearch.totalNumberOfResults / this.pageSize);\n        for (let i = 0; i < complexSearch.elements.length; i++) {\n          for (const component of complexSearch.elements[i].interactors) {\n            if (!this._allInteractorsInComplexSearch.some(interactor => interactor.identifier === component.identifier)) {\n              this._allInteractorsInComplexSearch.push(\n                new Interactor(\n                  component.identifier,\n                  component.identifierLink,\n                  component.name,\n                  component.description,\n                  component.interactorType,\n                  component.organismName));\n            }\n          }\n        }\n      }\n      ProgressBarComponent.hide();\n    });\n  }\n\n  /**\n   * Prepare query params to build new URL after filter or pagination has changed\n   */\n  private reloadPage(): void {\n    const queryParams: NavigationExtras = {};\n    queryParams['query'] = this._query;\n    queryParams['page'] = this.currentPageIndex;\n    if (this._spicesFilter !== undefined && this._spicesFilter.length !== 0) {\n      queryParams['species'] = this.prepareFiltersForParams(this.spicesFilter);\n    }\n    if (this._bioRoleFilter !== undefined && this._bioRoleFilter.length !== 0) {\n      queryParams['bioRole'] = this.prepareFiltersForParams(this._bioRoleFilter);\n    }\n    if (this._interactorTypeFilter !== undefined && this._interactorTypeFilter.length !== 0) {\n      queryParams['interactorType'] = this.prepareFiltersForParams(this._interactorTypeFilter);\n    }\n    this.router.navigate([], {\n      queryParams,\n      fragment: this.DisplayType\n    });\n    ProgressBarComponent.hide();\n    // This is a test case event for GA, to monitor if users ever use more then one filter.\n    const filterCount = this.getFilterCount();\n    if (1 < filterCount) {\n      this.googleAnalyticsService.fireMultiFilterEvent(filterCount.toString());\n    }\n  }\n\n  private prepareFiltersForParams(filter: string[]): string {\n    return filter.toString().replace(/,/g, '+');\n  }\n\n  private getFilterCount(): number {\n    return this._spicesFilter.length + this._interactorTypeFilter.length + this._bioRoleFilter.length;\n  }\n\n  /**\n   *\n   * @param pageIndex new page index after hitting the paginator to update the URL and reload content\n   */\n  public onPageChange(pageIndex: number): void {\n    this.currentPageIndex = pageIndex;\n    this.reloadPage();\n  }\n\n  public onResetAllFilters(): void {\n    this.spicesFilter = [];\n    this.bioRoleFilter = [];\n    this.interactorTypeFilter = [];\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onSpicesFilterChanged(filter: string[]): void {\n    this.spicesFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onBiologicalRoleFilterChanged(filter: string[]): void {\n    this.bioRoleFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onInteractorTypeFilterChanged(filter: string[]): void {\n    this.interactorTypeFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  get query(): string {\n    return this._query;\n  }\n\n  set query(value) {\n    this._query = value;\n  }\n\n  get currentPageIndex(): number {\n    if (this.DisplayType === this.COMPLEX_NAVIGATOR_VIEW) {\n      return this._navigatorCurrentPage;\n    } else {\n      return this._listCurrentPage;\n    }\n  }\n\n  set currentPageIndex(value: number) {\n    if (this.DisplayType === this.COMPLEX_NAVIGATOR_VIEW) {\n      this._navigatorCurrentPage = value;\n    } else {\n      this._listCurrentPage = value;\n    }\n  }\n\n  get complexSearch(): ComplexSearchResult {\n    return this._complexSearch;\n  }\n\n  set complexSearch(value: ComplexSearchResult) {\n    this._complexSearch = value;\n    this.setFirstDisplayType(); // if only one complex is in the search result, the display is list\n  }\n\n  get lastPageIndex(): number {\n    if (this.DisplayType === this.COMPLEX_NAVIGATOR_VIEW) {\n      return this._navigatorLastPageIndex;\n    } else {\n      return this._listLastPageIndex;\n    }\n  }\n\n  set lastPageIndex(value: number) {\n    if (this.DisplayType === this.COMPLEX_NAVIGATOR_VIEW) {\n      this._navigatorLastPageIndex = value;\n    } else {\n      this._listLastPageIndex = value;\n    }\n  }\n\n  get pageSize(): number {\n    if (this.DisplayType === this.COMPLEX_NAVIGATOR_VIEW) {\n      return this._navigatorPageSize;\n    } else {\n      return this._listPageSize;\n    }\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n\n  public get allInteractorsInComplexSearch(): Interactor[] {\n    return this._allInteractorsInComplexSearch;\n  }\n\n  setListView() {\n    this.DisplayType = this.LIST_VIEW;\n    this.toast = this.notificationService.complexNavigatorAnnouncement();\n    this.reloadPage();\n  }\n\n  setComplexNavigatorView() {\n    this.DisplayType = this.COMPLEX_NAVIGATOR_VIEW;\n    this.reloadPage();\n    if (!!this.toast) {\n      this.notificationService.closeAnnouncement(this.toast.toastId);\n      this.toast = null;\n    }\n  }\n\n\n  setFirstDisplayType(): void {\n    if (!this.DisplayType) {\n      if (this._complexSearch.totalNumberOfResults === 1) {\n        const complexId = this._complexSearch.elements[0].complexAC;\n        if (!!complexId) {\n          // For some reason this is needed so the navigate call works\n          this.router.routeReuseStrategy.shouldReuseRoute = function () {\n            return false;\n          };\n          this.router.navigate(['/complex', complexId]);\n        }\n      } else {\n        // Currently the list view is the default, as we are just launching the navigator view\n        // Later on we can change the default view to be the list or navigator view based on number of results\n        if (this._complexSearch.totalNumberOfResults <= this._navigatorPageSize) {\n          this.setComplexNavigatorView();\n        } else {\n          this.setListView();\n        }\n      }\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ComplexResultsComponent} from './complex-results.component';\nimport {RouterModule} from '@angular/router';\nimport {ComplexPaginatorComponent} from './complex-paginator/complex-paginator.component';\nimport {ComplexFilterComponent} from './complex-filter/complex-filter.component';\nimport {ComplexListComponent} from './complex-list/complex-list.component';\nimport {ProgressSpinnerModule} from '../../shared/loading-indicators/progress-spinner/progress-spinner.module';\nimport {ComplexNavigatorComponent} from './complex-navigator/complex-navigator.component';\nimport {TableStructureComponent} from './complex-navigator/table-structure/table-structure.component';\nimport {TableHeaderComponent} from './complex-navigator/table-structure/table-header/table-header.component';\nimport {\n  TableInteractorColumnComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-column.component';\nimport {\n  TableInteractorNameComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component';\nimport {\n  TableInteractorExternalLinkComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component';\nimport {\n  TableInteractorStoichiometryComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component';\nimport {\n  TableMainInteractorComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component';\nimport {\n  TableSubcomponentInteractorComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component';\nimport {ComplexNavigatorButtonsComponent} from './complex-navigator-buttons/complex-navigator-buttons.component';\nimport {MarkdownModule} from 'ngx-markdown';\nimport {ComplexNavigatorRatingComponent} from './complex-navigator/complex-navigator-rating/complex-navigator-rating.component';\n\n\n@NgModule({\n  imports: [RouterModule.forChild([\n    {path: '', component: ComplexResultsComponent},\n  ]),\n    CommonModule,\n    ProgressSpinnerModule, MarkdownModule\n  ],\n  exports: [\n    TableStructureComponent\n  ],\n  declarations: [ComplexResultsComponent,\n    ComplexListComponent,\n    ComplexFilterComponent,\n    ComplexPaginatorComponent,\n    ComplexNavigatorComponent,\n    TableStructureComponent,\n    TableHeaderComponent,\n    TableInteractorColumnComponent,\n    TableInteractorNameComponent,\n    TableInteractorExternalLinkComponent,\n    TableInteractorStoichiometryComponent,\n    TableMainInteractorComponent,\n    TableSubcomponentInteractorComponent,\n    ComplexNavigatorButtonsComponent,\n    ComplexNavigatorRatingComponent,\n  ]\n})\nexport class ComplexResultsModule {\n}\n","export class Interactor {\n  private _identifier: string;\n  private _identifierLink: string;\n  private _name: string;\n  private _description: string;\n  private _interactorType: string;\n  private _organismName: string;\n\n  constructor(identifier: string,\n              identifierLink: string,\n              name: string,\n              description: string,\n              interactorType: string, organismName: string) {\n    this._identifier = identifier;\n    this._identifierLink = identifierLink;\n    this._name = name;\n    this._description = description;\n    this._interactorType = interactorType;\n    this._organismName = organismName;\n  }\n\n  get identifier(): string {\n    return this._identifier;\n  }\n\n  get identifierLink(): string {\n    return this._identifierLink;\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  get description(): string {\n    return this._description;\n  }\n\n  get interactorType(): string {\n    return this._interactorType;\n  }\n\n  get organismName(): string {\n    return this._organismName;\n  }\n}\n","export default \"<div class=\\\"filters row\\\">\\n  <div class=\\\"columns medium-6\\\"><h3>Filters</h3></div>\\n  <div class=\\\"columns medium-6\\\">\\n    <div *ngIf=\\\"anyFiltersSelected()\\\">\\n      <a class=\\\"button\\\" (click)=\\\"resetAllFilters()\\\"><i class=\\\"icon icon-functional\\\" data-icon=\\\"d\\\"></i> Reset filters</a>\\n    </div>\\n  </div>\\n  <div class=\\\"columns medium-12\\\">\\n    <div *ngIf=\\\"facets.species_f\\\">\\n      <b>Species</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.species_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, spicesFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\" checked>\\n              {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ facetOrganismIcon(facet.name) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\"> {{ facet.name }} ({{ facet.count }})\\n\\n              <i class=\\\"{{ facetOrganismIcon(facet.name) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div *ngIf=\\\"facets.pbiorole_f\\\">\\n      <b>Biological Role</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.pbiorole_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, bioRoleFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\"> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n\\n    <div *ngIf=\\\"facets.ptype_f\\\">\\n      <b>Interactor Type</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.ptype_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, interactorTypeFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ facetTypeIcon(facet) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\"> {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ facetTypeIcon(facet) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n    <div *ngIf=\\\"!facets.species_f && !facets.pbiorole_f && !facets.ptype_f\\\">\\n      <h6>No filters available</h6>\\n    </div>\\n  </div>\\n</div>\\n\";","export default \"<ul class=\\\"no-bullet\\\">\\n  <li *ngFor=\\\"let complex of complexSearch.elements\\\">\\n    <h3><a [routerLink]=\\\"['/complex', complex.complexAC]\\\">{{ complex.complexName }}</a></h3>\\n    <div class=\\\"description\\\" style=\\\"background-color: white\\\">\\n      <b>Complex AC:</b> {{ complex.complexAC }} / <b>Organism:</b> ({{ complex.organismName }})<br>\\n      <b>Description:</b>\\n      <div *ngIf=\\\"complex.description.length <= 250\\\">\\n        {{ complex.description }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n      <div *ngIf=\\\"complex.description.length > 250\\\">\\n        {{ complex.description.substr(0, 250) }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n    </div>\\n  </li>\\n</ul>\\n\";","export default \"<div class=\\\"filters\\\">\\n  <div class=\\\"sortingInteractors\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Sort interactors\\\" class=\\\"button\\\">\\n    <div class=\\\"typeOfSorting\\\">\\n      <input type=\\\"submit\\\" name=\\\"occurrenceClassification\\\" value=\\\"Occurrence\\\" class=\\\"button\\\"\\n             (click)=\\\"InteractorsSortingChanges('Occurrence')\\\">\\n      <input type=\\\"submit\\\" name=\\\"typeClassification\\\" value=\\\"Type\\\" class=\\\"button\\\"\\n             (click)=\\\"InteractorsSortingChanges('Type')\\\">\\n      <input type=\\\"submit\\\" name=\\\"organismClassification\\\" value=\\\"Organism\\\" class=\\\"button\\\"\\n             (click)=\\\"InteractorsSortingChanges('Organism')\\\">\\n      <!--      <input type=\\\"submit\\\" name=\\\"geneClassification\\\" value=\\\"Orthology (Not available yet)\\\" class=\\\"button\\\"-->\\n      <!--             (click)=\\\"InteractorsSortingChanges('Orthology')\\\">-->\\n    </div>\\n  </div>\\n\\n  <div class=\\\"dropdown\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Display Options\\\" class=\\\"button\\\">\\n    <ul class=\\\"displaySize\\\">\\n      <li>\\n        <input type=\\\"radio\\\" name=\\\"displayType\\\" value=\\\"Compact\\\" class=\\\"checkbox compact\\\"\\n               (click)=\\\"setDisplayType('compact')\\\" [checked]=\\\"typeOfDisplay === 'compact'\\\">\\n        Compact display\\n      </li>\\n      <li class=\\\"detailedDisplay\\\">\\n        <input type=\\\"radio\\\" name=\\\"displayType\\\" value=\\\"Detailed\\\" class=\\\"checkbox detailed\\\"\\n               (click)=\\\"setDisplayType('detailed')\\\" [checked]=\\\"typeOfDisplay === 'detailed'\\\">\\n        Detailed display\\n        <ul class=\\\"detailedDisplayOptions\\\">\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"organism\\\" value=\\\"organism\\\" class=\\\"checkbox\\\" [checked]=\\\"organismIconDisplay\\\"\\n                   (change)=\\\"DisplayingOrganism()\\\">\\n            Organism\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"type\\\" value=\\\"type\\\" class=\\\"checkbox\\\" [checked]=\\\"interactorTypeDisplay\\\"\\n                   (change)=\\\"DisplayingType()\\\">\\n            Type\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"id\\\" value=\\\"id\\\" class=\\\"checkbox\\\" [checked]=\\\"IDDisplay\\\"\\n                   (change)=\\\"DisplayingID()\\\">\\n            Interactor ID\\n          </li>\\n        </ul>\\n      </li>\\n    </ul>\\n  </div>\\n</div>\\n\";","export default \"<div class=\\\"ratingComponent\\\" *ngIf=\\\"visible===true\\\">\\n  <div class=\\\"buttonContainer\\\">\\n    <button class=\\\"close\\\" id=\\\"closePopup\\\" (click)=\\\"ratingVisibility()\\\">&times;</button>\\n  </div>\\n  <div class=\\\"text\\\">\\n    <p>Tell us about your experience with the Complex Navigator!</p>\\n  </div>\\n  <div class=\\\"ratingComponentStars\\\">\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 1}\\\" (click)=\\\"selectRating(1)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 2}\\\" (click)=\\\"selectRating(2)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 3}\\\" (click)=\\\"selectRating(3)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 4}\\\" (click)=\\\"selectRating(4)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 5}\\\" (click)=\\\"selectRating(5)\\\"> &#9733; </span>\\n  </div>\\n</div>\\n\";","export default \"<div class=\\\"ComplexNavigator\\\">\\n  <div class=\\\"Buttons\\\">\\n    <cp-complex-navigator-buttons\\n      [(interactorsSorting)]=\\\"interactorsSorting\\\"\\n      [(organismIconDisplay)]=\\\"organismIconDisplay\\\"\\n      [(interactorTypeDisplay)]=\\\"interactorTypeDisplay\\\"\\n      [(IDDisplay)]=\\\"IDDisplay\\\">\\n    </cp-complex-navigator-buttons>\\n  </div>\\n  <cp-table-structure [complexSearch]=\\\"complexSearch\\\"\\n                      [interactors]=\\\"interactors\\\"\\n                      [interactorsSorting]=\\\"interactorsSorting\\\"\\n                      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                      [IDDisplay]=\\\"IDDisplay\\\">\\n  </cp-table-structure>\\n</div>\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"table CN-table\\\">\\n    <!-- When table is not overflowing -->\\n    <thead class=\\\"tableHead\\\" *ngIf=\\\"complexes.length<=6\\\">\\n    <tr>\\n      <th *ngIf=\\\"isInteractorSortingSet()\\\" class=\\\"spaceHolderSorting\\\"></th>\\n      <th class=\\\"interactorsHeader horizontal\\\">\\n        Interactor\\n      </th>\\n      <th class=\\\"horizontal\\\" *ngFor=\\\"let complex of complexes\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           title=\\\"{{complex.complexAC}}\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n              <div class=\\\"line\\\"></div>\\n                <div class=\\\"horizontal-label\\\">\\n                  <i class=\\\"{{iconOrganism(complex.organismName)}}\\\"></i>\\n                  <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                  {{ complex.complexName }}\\n                </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n    </tr>\\n    </thead>\\n    <!-- When table is overflowing -->\\n    <thead class=\\\"tableHeadOverflow\\\" *ngIf=\\\"complexes.length>6\\\">\\n    <tr [style.--cols]=\\\"complexes.length\\\"\\n        [style.--intHeader]=\\\"isInteractorSortingSet() ? '156px':''\\\"\\n        [style.--sizeSpaceHolder]=\\\"complexes.length>15 ? '185px':''\\\">\\n      <th class=\\\"spaceHolderHeaderOverflow\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\\\">\\n      </th>\\n      <th class=\\\"rotate\\\" *ngFor=\\\"let complex of complexes\\\"\\n          title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\"\\n          [style.--cols]=\\\"complexes.length\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span>\\n              <div class=\\\"tilted-label\\\" title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"\\n                   title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\"></i>\\n                {{ complex.complexName }}\\n              </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n      <div class=\\\"spaceHolder\\\" [style]=\\\"complexes.length<15 ? 'max-width: inherit;min-width: inherit':''\\\"></div>\\n    </tr>\\n    <!-- icons row -->\\n    <tr [style.--cols]=\\\"complexes.length\\\"\\n        [style.--intHeader]=\\\"isInteractorSortingSet() ? '156px':''\\\"\\n        [style.--sizeSpaceHolder]=\\\"complexes.length>15 ? '185px':''\\\">\\n      <th class=\\\"interactorsHeader overflow\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\\\">\\n        Interactors\\n      </th>\\n      <ng-container *ngFor=\\\" let complex of complexes;\\\">\\n        <th class=\\\"iconOrganism\\\"><i class=\\\"{{iconOrganism(complex.organismName)}}\\\" title=\\\"{{complex.organismName}}\\\"></i>\\n        </th>\\n      </ng-container>\\n      <div class=\\\"spaceHolder\\\" [style]=\\\"complexes.length<15 ? 'max-width: inherit;min-width: inherit':''\\\"></div>\\n    </tr>\\n    </thead>\\n  </table>\\n</div>\\n\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"interactors-table\\\"\\n         [style.--cols]=\\\"complexes.length\\\">\\n    <!--         [style]=\\\"complexes.length>8 ? 'width: calc(130px + 70px * var(&#45;&#45;cols) + 183px)':''\\\">-->\\n    <ng-container *ngFor=\\\" let interactor of enrichedInteractors; let i=index\\\">\\n      <tr *ngIf=\\\"!interactor.hidden\\\">\\n        <ng-container *ngFor=\\\"let oneType of ranges\\\" class=\\\"interactorsOrdering\\\">\\n          <td *ngIf=\\\"oneType[2]===i\\\" [attr.rowspan]=\\\"oneType[1]\\\" class=\\\"interactorSeparation\\\"\\n              title=\\\"{{oneType[0]}}\\\">\\n            <div class=\\\"interactorNameContainer\\\" [style.--rowspanSize]=\\\"oneType[1]\\\">\\n              {{ oneType[0] }}\\n            </div>\\n          </td>\\n        </ng-container>\\n        <td class=\\\"interactorsColumn\\\"\\n            [ngClass]=\\\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\\\"\\n            [style]=\\\"ranges.length!=0 ? 'left:3ch':''\\\">\\n          <cp-table-interactor-name\\n            [interactorName]=\\\"interactor.interactor.name\\\"\\n            [interactorType]=\\\"interactor.interactor.interactorType\\\"\\n            [interactorId]=\\\"interactor.interactor.identifier\\\"\\n            [interactorOrganism]=\\\"interactor.interactor.organismName\\\"\\n            [identifierLink]=\\\"interactor.interactor.identifierLink\\\"\\n            [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n            [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n            [IDDisplay]=\\\"IDDisplay\\\"\\n          ></cp-table-interactor-name>\\n          <!-- Icon for the expandable -->\\n          <div class=\\\"container\\\" *ngIf=\\\"interactor.isSubComplex\\\">\\n            <a title=\\\"{{ interactor.interactor.name }} interactors\\\" (click)=\\\"toggleSubcomplexExpandable(i)\\\">\\n              Interactors\\n              <i class=\\\"icon icon-common\\\" data-icon=\\\"&#xf078;\\\"\\n                 style=\\\"font-size:small;\\n                \\\"></i>\\n            </a>\\n          </div>\\n        </td>\\n        <!-- Interactors' stoichiometry -->\\n        <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n          <td class=\\\"intStoich\\\" [ngClass]=\\\"{'intStoichFixedWidth': complexes.length > 6}\\\">\\n            <cp-table-main-interactor\\n              [complex]=\\\"complex\\\"\\n              [i]=\\\"i\\\"\\n              [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n            ></cp-table-main-interactor>\\n          </td>\\n        </ng-container>\\n        <div class=\\\"spaceHolder\\\" *ngIf=\\\"complexes.length>6\\\"\\n             [ngClass]=\\\"isInteractorSortingSet() ? 'spaceHolderWithSorting' : 'spaceHolder'\\\"></div>\\n      </tr>\\n      <!-- Expandable menu for subcomplexes -->\\n      <ng-container *ngIf=\\\"interactor.expanded\\\">\\n        <ng-container *ngIf=\\\"!!interactor.subComponents\\\">\\n          <tr *ngFor=\\\"let el of interactor.subComponents; let j=index\\\"\\n              class=\\\"expandedRows\\\"\\n              [ngClass]=\\\"{'firstExpandedRow': j === 0, 'lastExpandedRow': j === interactor.subComponents.length - 1}\\\">\\n            <td [attr.rowspan]=\\\"interactor.subComponents.length\\\" class=\\\"interactorSeparation\\\"\\n                title=\\\"{{interactor.interactor.name}} interactors\\\"\\n                *ngIf=\\\"j === 0 && (interactorsSorting === 'Type' || interactorsSorting === 'Organism')\\\">\\n              <div class=\\\"interactorSeparationName\\\"\\n                   [style.--rowspanSize]=\\\"interactor.subComponents.length\\\"> {{ interactor.interactor.name }} interactors\\n              </div>\\n            </td>\\n            <td class=\\\"subComponentColumn\\\"\\n                [ngClass]=\\\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\\\">\\n              <div>\\n                <cp-table-interactor-name\\n                  [interactorName]=\\\"el.name\\\"\\n                  [interactorType]=\\\"el.interactorType\\\"\\n                  [interactorId]=\\\"el.identifier\\\"\\n                  [interactorOrganism]=\\\"interactor.interactor.organismName\\\"\\n                  [identifierLink]=\\\"el.identifierLink\\\"\\n                  [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                  [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                  [IDDisplay]=\\\"IDDisplay\\\"\\n                ></cp-table-interactor-name>\\n              </div>\\n            </td>\\n            <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n              <td class=\\\"intStoich\\\" [ngClass]=\\\"{'intStoichFixedWidth': complexes.length > 6}\\\">\\n                <cp-table-subcomponent-interactor\\n                  [complex]=\\\"complex\\\"\\n                  [i]=\\\"i\\\"\\n                  [j]=\\\"j\\\"\\n                  [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n                ></cp-table-subcomponent-interactor>\\n              </td>\\n            </ng-container>\\n            <div class=\\\"spaceHolder\\\" *ngIf=\\\"enrichedComplexes.length > 6\\\"></div>\\n          </tr>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n  </table>\\n</div>\\n\";","export default \"<div class=\\\"externalLinkContainer\\\" title=\\\"More information about {{interactorId}}\\\">\\n  <a *ngIf=\\\"externalLinkVisible\\\" href=\\\"{{identifierLink}}\\\" target=\\\"_blank\\\" class=\\\"externalLinkContainer\\\">\\n    <span *ngIf=\\\"IDDisplay\\\">{{ interactorId }}</span>\\n    <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\" title=\\\"More information about {{ interactorId }}\\\"></i>\\n  </a>\\n</div>\\n\";","export default \"<div class=\\\"container\\\">\\n  <div class=\\\"nameAndIcons\\\" [ngClass]=\\\"{inlineDisplay: interactorType==='stable complex'}\\\">\\n    <i *ngIf=\\\"organismIconDisplay\\\"\\n       class=\\\"{{interactorOrganismIcon}}\\\"\\n       title=\\\"{{interactorOrganism}}\\\"></i>\\n\\n    <i *ngIf=\\\"interactorTypeDisplay\\\"\\n       class=\\\"{{interactorTypeIcon}}\\\"\\n       title=\\\"{{interactorType}}\\\"></i>\\n\\n    <div class=\\\"name\\\" title=\\\"{{interactorId}}\\\" *ngIf=\\\"IDDisplay\\\"> {{ interactorName }}\\n    </div>\\n    <a *ngIf=\\\"IDDisplay\\\"\\n       [routerLink]=\\\"['/complex/search']\\\"\\n       [queryParams]=\\\"{query: interactorId, page: 1}\\\"\\n       target=\\\"_blank\\\">\\n      <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n         title=\\\"More complexes containing {{interactorName}}\\\"></i>\\n    </a>\\n\\n    <div class=\\\"nameCompact\\\" *ngIf=\\\"!IDDisplay\\\">\\n      <div class=\\\"name\\\" title=\\\"More complexes containing {{interactorName}}\\\" *ngIf=\\\"!IDDisplay\\\">\\n        <a *ngIf=\\\"!IDDisplay\\\"\\n           [routerLink]=\\\"['/complex/search']\\\"\\n           [queryParams]=\\\"{query: interactorId, page: 1}\\\"\\n           target=\\\"_blank\\\">\\n          {{ interactorName }}\\n        </a>\\n      </div>\\n      <cp-table-interactor-external-link\\n        *ngIf=\\\"!IDDisplay\\\"\\n        [interactorId]=\\\"interactorId\\\"\\n        [identifierLink]=\\\"identifierLink\\\"\\n        [interactorType]=\\\"interactorType\\\"\\n        [isMainInteractor]=\\\"isMainInteractor\\\"\\n        [IDDisplay]=\\\"IDDisplay\\\"\\n        (externalLinkVisible)=\\\"externalLinkVisibleHandler($event)\\\">\\n      </cp-table-interactor-external-link>\\n    </div>\\n  </div>\\n\\n  <cp-table-interactor-external-link\\n    *ngIf=\\\"IDDisplay\\\"\\n    [interactorId]=\\\"interactorId\\\"\\n    [identifierLink]=\\\"identifierLink\\\"\\n    [interactorType]=\\\"interactorType\\\"\\n    [isMainInteractor]=\\\"isMainInteractor\\\"\\n    [IDDisplay]=\\\"IDDisplay\\\"\\n    (externalLinkVisible)=\\\"externalLinkVisibleHandler($event)\\\">\\n  </cp-table-interactor-external-link>\\n</div>\\n\";","export default \"<ng-container>\\n  <div class=\\\"stoichNum\\\" title=\\\"{{ stoichiometryText }}\\\">\\n    {{ stoichiometryValue }}\\n  </div>\\n</ng-container>\\n\";","export default \"<div [ngClass]=\\\"topLineClass\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!interactorComponent\\\"\\n  [stoichiometryText]=\\\"interactorComponent.stochiometryText\\\"\\n  [stoichiometryValue]=\\\"interactorComponent.stochiometryValueFormatted\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"bottomLineClass\\\"></div>\\n\";","export default \"<div [ngClass]=\\\"displayTopLineClass\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!interactorComponent\\\"\\n  [stoichiometryText]=\\\"interactorComponent.stochiometryText\\\"\\n  [stoichiometryValue]=\\\"interactorComponent.stochiometryValueFormatted\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"displayBottomLineClass\\\"></div>\\n\";","export default \"<div class=\\\"complexNavigatorTable\\\">\\n  <div class=\\\"header\\\"\\n       (scroll)=\\\"body.scrollLeft = header.scrollLeft\\\" #header>\\n\\n    <cp-table-header [complexes]=\\\"sortedComplexes\\\"\\n                     [interactorsSorting]=\\\"interactorsSorting\\\">\\n    </cp-table-header>\\n  </div>\\n  <div class=\\\"interactors\\\"\\n       (scroll)=\\\"header.scrollLeft = body.scrollLeft\\\" #body>\\n    <cp-table-interactor-column\\n      [complexes]=\\\"sortedComplexes\\\"\\n      [interactors]=\\\"interactors\\\"\\n      [interactorsSorting]=\\\"interactorsSorting\\\"\\n      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n      [IDDisplay]=\\\"IDDisplay\\\">\\n    </cp-table-interactor-column>\\n  </div>\\n  <div class=\\\"spaceHolder\\\"></div>\\n</div>\\n\\n\";","export default \"<div>\\n  <h5 class=\\\"text-center\\\">{{ currentPageIndex }} of {{ lastPageIndex }}</h5>\\n  <ul class=\\\"pagination text-center\\\" role=\\\"navigation\\\" aria-label=\\\"Pagination\\\">\\n    <li class=\\\"arrow unavailable\\\" *ngIf=\\\"currentPageIndex != 1\\\" aria-disabled=\\\"true\\\"><a\\n      (click)=\\\"getFirstPage()\\\">&Lang; First</a></li>\\n    <li class=\\\"arrow unavailable\\\" *ngIf=\\\"currentPageIndex != 1\\\" aria-disabled=\\\"true\\\"><a\\n      (click)=\\\"getPreviousPage()\\\">&lang; Previous</a></li>\\n    <ng-container *ngFor=\\\"let index of pagination\\\">\\n      <li *ngIf=\\\"index[1] == 'true'\\\" class=\\\"current\\\"><span class=\\\"show-for-sr\\\">You're on page</span>{{ index[0] }}</li>\\n      <li *ngIf=\\\"index[1] == 'false'\\\"><a (click)=\\\"getPage(index[0])\\\">{{ index[0] }}</a></li>\\n    </ng-container>\\n    <li class=\\\"arrow\\\" *ngIf=\\\"currentPageIndex != lastPageIndex\\\"><a (click)=\\\"getNextPage()\\\">Next &rang;</a></li>\\n    <li class=\\\"arrow\\\" *ngIf=\\\"currentPageIndex != lastPageIndex\\\"><a (click)=\\\"getLastPage()\\\">Last &Rang;</a></li>\\n  </ul>\\n</div>\\n\";","export default \"<div class=\\\"margin-top-large margin-bottom-large row\\\">\\n  <ng-container *ngIf=\\\"complexSearch;else loadingSpinner\\\">\\n    <div class=\\\"columns medium-12\\\" *ngIf=\\\"complexSearch.totalNumberOfResults !== 0\\\">\\n      <h2 class=\\\"padding-left-large leftAligned\\\">Total number of\\n        results: {{ complexSearch.totalNumberOfResults }} </h2>\\n      <div class=\\\"row\\\">\\n        <cp-complex-navigator-rating *ngIf=\\\"DisplayType=== COMPLEX_NAVIGATOR_VIEW\\\">\\n        </cp-complex-navigator-rating>\\n        <div class=\\\"displayButton columns medium-8\\\" style=\\\"text-align: center; padding-left: 10px\\\">\\n          <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button\\\"\\n                  (click)=\\\"setListView()\\\" [ngClass]=\\\"{'selected': DisplayType === LIST_VIEW}\\\">\\n            View list\\n          </button>\\n          <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button cnButton\\\"\\n                  (click)=\\\"setComplexNavigatorView()\\\" [ngClass]=\\\"{'selected': DisplayType === COMPLEX_NAVIGATOR_VIEW}\\\">\\n            View Complex Navigator\\n            <span class=\\\"new-tag\\\" [ngClass]=\\\"{'new-tag-selected': DisplayType === COMPLEX_NAVIGATOR_VIEW}\\\">NEW!</span>\\n          </button>\\n        </div>\\n      </div>\\n      <div class=\\\"columns medium-4 filterColumn leftAligned\\\">\\n        <cp-complex-filter *ngIf=\\\"spicesFilter && bioRoleFilter && interactorTypeFilter\\\"\\n                           [spicesFilter]=\\\"spicesFilter\\\"\\n                           [bioRoleFilter]=\\\"bioRoleFilter\\\"\\n                           [interactorTypeFilter]=\\\"interactorTypeFilter\\\" [facets]=\\\"complexSearch.facets\\\"\\n                           (onResetAllFilters)=\\\"onResetAllFilters()\\\"\\n                           (onSpicesFilterChanged)=\\\"onSpicesFilterChanged($event)\\\"\\n                           (onBiologicalRoleFilterChanged)=\\\"onBiologicalRoleFilterChanged($event)\\\"\\n                           (onInteractorTypeFilterChanged)=\\\"onInteractorTypeFilterChanged($event)\\\">\\n        </cp-complex-filter>\\n      </div>\\n      <div class=\\\"columns medium-8\\\">\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\">\\n        </cp-complex-paginator>\\n        <cp-complex-list class=\\\"listOfResults\\\" *ngIf=\\\"DisplayType===LIST_VIEW\\\"\\n                         [complexSearch]=\\\"complexSearch\\\">\\n        </cp-complex-list>\\n        <cp-complex-navigator class=\\\"Complex-navigator\\\" *ngIf=\\\"DisplayType===COMPLEX_NAVIGATOR_VIEW\\\"\\n                              [complexSearch]=\\\"complexSearch\\\"\\n                              [interactors]=\\\"allInteractorsInComplexSearch\\\">\\n        </cp-complex-navigator>\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"columns medium-12 callout alert\\\" *ngIf=\\\"complexSearch.totalNumberOfResults === 0\\\">\\n      <h2>No Complex Portal results found</h2>\\n      <h3>We're sorry but we couldn't find anything that matched your search for: <b>{{ query }}</b></h3>\\n      <h4>Please consider refining your terms:</h4>\\n      <ul>\\n        <li>Make sure all words are spelled correctly</li>\\n        <li>Try different keywords</li>\\n        <li>Be more precise: use gene or protein IDs, e.g. Ndc80 or Q04571</li>\\n        <li>Remove quotes around phrases to search for each word individually. bike shed will often show more results\\n          than\\n          \\\"bike shed\\\"\\n        </li>\\n      </ul>\\n    </div>\\n  </ng-container>\\n  <ng-template #loadingSpinner>\\n    <cp-progress-spinner [query]=\\\"query\\\"></cp-progress-spinner>\\n  </ng-template>\\n</div>\\n\";"]}