{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MAAO,SAASA,mBAAkBA,CAACC,IAAY;QAC7C,QAAQA,IAAI;UACV,KAAK,gBAAgB;YACnB,OAAO,oCAAoC;UAC7C,KAAK,SAAS;UACd,KAAK,SAAS;YACZ,OAAO,yCAAyC;UAClD,KAAK,gBAAgB;YACnB,OAAO,mCAAmC;UAC5C,KAAK,cAAc;YACjB,OAAO,6BAA6B;UACtC,KAAK,uCAAuC;UAC5C,KAAK,uCAAuC;UAC5C,KAAK,mBAAmB;UACxB,KAAK,qBAAqB;UAC1B,KAAK,eAAe;UACpB,KAAK,eAAe;UACpB,KAAK,cAAc;UACnB,KAAK,iCAAiC;UACtC,KAAK,kBAAkB;UACvB,KAAK,cAAc;UACnB,KAAK,kCAAkC;YACrC,OAAO,+BAA+B;;MAE5C;MAEO,SAASC,aAAYA,CAACC,QAAgB;QAC3C,IAAMC,aAAa,GAAGC,kBAAkB,CAACF,QAAQ,CAAC;QAClD,QAAQC,aAAa;UACnB,KAAK,cAAc;UACnB,KAAK,oBAAoB;YACvB,OAAO,8BAA8B;UACvC,KAAK,cAAc;UACnB,KAAK,qBAAqB;YACxB,OAAO,8BAA8B;UACvC,KAAK,uDAAuD;UAC5D,KAAK,qDAAqD;UAC1D,KAAK,kCAAkC;YACrC,OAAO,8BAA8B;UACvC,KAAK,+BAA+B;UACpC,KAAK,kBAAkB;UACvB,KAAK,sCAAsC;UAC3C,KAAK,uBAAuB;UAC5B,KAAK,qEAAqE,GAC1E,gDAAgD;UAChD,KAAK,sFAAsF;YACzF,OAAO,8BAA8B;UACvC,KAAK,mBAAmB;UACxB,KAAK,yBAAyB;UAC9B,KAAK,gCAAgC;YACnC,OAAO,4BAA4B;UACrC,KAAK,wBAAwB;UAC7B,KAAK,8BAA8B;YACjC,OAAO,kCAAkC;UAC3C,KAAK,eAAe;UACpB,KAAK,+BAA+B;YAClC,OAAO,gCAAgC;UACzC,KAAK,yBAAyB;UAC9B,KAAK,2CAA2C;YAC9C,OAAO,4BAA4B;UACrC,KAAK,YAAY;UACjB,KAAK,2BAA2B;YAC9B,OAAO,4BAA4B;UACrC,KAAK,uBAAuB;UAC5B,KAAK,sCAAsC;YACzC,OAAO,+BAA+B;UACxC,KAAK,YAAY;UACjB,KAAK,0BAA0B;YAC7B,OAAO,8BAA8B;UACvC,KAAK,gBAAgB;UACrB,KAAK,4CAA4C;YAC/C,OAAO,6BAA6B;UACtC,KAAK,wBAAwB;UAC7B,KAAK,8BAA8B;YACjC,OAAO,4BAA4B;UACrC,KAAK,uEAAuE;UAC5E,KAAK,yBAAyB;YAC5B,OAAO,gDAAgD;UACzD,KAAK,8BAA8B;UACnC,KAAK,oCAAoC;YACvC,OAAO,4CAA4C;UACrD,KAAK,YAAY;UACjB,KAAK,wBAAwB;YAC3B,OAAO,4BAA4B;UACrC,KAAK,mBAAmB;UACxB,KAAK,wBAAwB;UAC7B,KAAK,yBAAyB;UAC9B,KAAK,kDAAkD;YACrD,OAAO,4BAA4B;UACrC,KAAK,mBAAmB;UACxB,KAAK,yBAAyB;YAC5B,OAAO,8BAA8B;UACvC,KAAK,sBAAsB;UAC3B,KAAK,8CAA8C;YACjD,OAAO,iCAAiC;UAC1C,KAAK,aAAa;UAClB,KAAK,+BAA+B;YAClC,OAAO,kCAAkC;UAC3C,KAAK,+CAA+C;UACpD,KAAK,gCAAgC;UACrC,KAAK,qBAAqB;UAC1B,KAAK,iDAAiD;UACtD,KAAK,+FAA+F;UACpG,KAAK,oIAAoI;UACzI,KAAK,mCAAmC;UACxC,KAAK,4CAA4C;YAC/C,OAAO,8BAA8B;;QAEzC,OAAO,GAAG;MACZ;MAEA,SAASC,kBAAkBA,CAACC,IAAY;QACtC,IAAIA,IAAI,CAACC,QAAQ,CAAC,GAAG,CAAC,EAAE;UACtB,IAAMC,GAAG,GAAGF,IAAI,CAACG,OAAO,CAAC,GAAG,CAAC;UAC7B,OAAOH,IAAI,CAACI,SAAS,CAAC,CAAC,EAAEF,GAAG,CAAC;;QAE/B,OAAOF,IAAI;MACb;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC1GaK,uBAAsB;QAWjC,gCAAoBC,sBAAwC;UAAAC;UAAxC,2BAAsB,GAAtBD,sBAAsB;UALhC,0BAAqB,GAA2B,IAAIE,uDAAY,EAAY;UAC5E,kCAA6B,GAA2B,IAAIA,uDAAY,EAAY;UACpF,kCAA6B,GAA2B,IAAIA,uDAAY,EAAY;UACpF,sBAAiB,GAA0B,IAAIA,uDAAY,EAAW;QAGhF;QAACC;UAAAC;UAAAC,OAED,oBAAQ,CACR;UAEA;;;;;QAAA;UAAAD;UAAAC,OAKO,6BAAoBC,MAAc,EAAEC,MAAe;YACxD,IAAIA,MAAM,EAAE;cACV,IAAI,CAACC,YAAY,CAACC,IAAI,CAACH,MAAM,CAAC;cAC9B,IAAI,CAACN,sBAAsB,CAACU,oBAAoB,CAACJ,MAAM,CAAC;aACzD,MAAM;cACL,IAAI,CAACE,YAAY,CAACG,MAAM,CAAC,IAAI,CAACH,YAAY,CAACX,OAAO,CAACS,MAAM,CAAC,EAAE,CAAC,CAAC;cAC9D,IAAI,CAACN,sBAAsB,CAACY,sBAAsB,CAACN,MAAM,CAAC;;YAE5D,IAAI,CAACO,qBAAqB,CAACC,IAAI,CAAC,IAAI,CAACN,YAAY,CAAC;UACpD;UAEA;;;;;QAAA;UAAAJ;UAAAC,OAKO,oCAA2BC,MAAc,EAAEC,MAAe;YAC/D,IAAIA,MAAM,EAAE;cACV,IAAI,CAACQ,aAAa,CAACN,IAAI,CAACH,MAAM,CAAC;cAC/B,IAAI,CAACN,sBAAsB,CAACU,oBAAoB,CAACJ,MAAM,CAAC;aACzD,MAAM;cACL,IAAI,CAACS,aAAa,CAACJ,MAAM,CAAC,IAAI,CAACI,aAAa,CAAClB,OAAO,CAACS,MAAM,CAAC,EAAE,CAAC,CAAC;cAChE,IAAI,CAACN,sBAAsB,CAACY,sBAAsB,CAACN,MAAM,CAAC;;YAE5D,IAAI,CAACU,6BAA6B,CAACF,IAAI,CAAC,IAAI,CAACC,aAAa,CAAC;UAC7D;UAEA;;;;;QAAA;UAAAX;UAAAC,OAKO,oCAA2BC,MAAc,EAAEC,MAAe;YAC/D,IAAIA,MAAM,EAAE;cACV,IAAI,CAACU,oBAAoB,CAACR,IAAI,CAACH,MAAM,CAAC;cACtC,IAAI,CAACN,sBAAsB,CAACU,oBAAoB,CAACJ,MAAM,CAAC;aACzD,MAAM;cACL,IAAI,CAACW,oBAAoB,CAACN,MAAM,CAAC,IAAI,CAACM,oBAAoB,CAACpB,OAAO,CAACS,MAAM,CAAC,EAAE,CAAC,CAAC;cAC9E,IAAI,CAACN,sBAAsB,CAACY,sBAAsB,CAACN,MAAM,CAAC;;YAE5D,IAAI,CAACY,6BAA6B,CAACJ,IAAI,CAAC,IAAI,CAACG,oBAAoB,CAAC;UACpE;UAEA;;;QAAA;UAAAb;UAAAC,OAGO,2BAAe;YACpB,IAAI,CAACc,iBAAiB,CAACL,IAAI,CAAC,IAAI,CAAC;UACnC;UAEA;;;;QAAA;UAAAV;UAAAC,OAIO,8BAAkB;YACvB,OAAQ,IAAI,CAACe,aAAa,CAACC,MAAM,KAAK,CAAC,IAAI,IAAI,CAACC,cAAc,CAACD,MAAM,KAAK,CAAC,IAAI,IAAI,CAACE,qBAAqB,CAACF,MAAM,KAAK,CAAC;UACxH;UAEA;;;;;;QAAA;UAAAjB;UAAAC,OAMO,oBAAWmB,OAAe,EAAElB,MAAgB;YACjD,OAAOA,MAAM,CAACT,OAAO,CAAC2B,OAAO,CAAC,KAAK,CAAC,CAAC;UACvC;QAAC;UAAApB;UAAAqB,KAED,eAAU;YACR,OAAO,IAAI,CAACC,OAAO;UACrB,CAAC;UAAAC,KAED,aACWtB,KAAa;YACtB,IAAI,CAACqB,OAAO,GAAGrB,KAAK;UACtB;QAAC;UAAAD;UAAAqB,KAED,eAAgB;YACd,OAAO,IAAI,CAACL,aAAa;UAC3B,CAAC;UAAAO,KAED,aACiBtB,KAAe;YAC9B,IAAI,CAACe,aAAa,GAAGf,KAAK;UAC5B;QAAC;UAAAD;UAAAqB,KAED,eAAiB;YACf,OAAO,IAAI,CAACH,cAAc;UAC5B,CAAC;UAAAK,KAED,aACkBtB,KAAe;YAC/B,IAAI,CAACiB,cAAc,GAAGjB,KAAK;UAC7B;QAAC;UAAAD;UAAAqB,KAED,eAAwB;YACtB,OAAO,IAAI,CAACF,qBAAqB;UACnC,CAAC;UAAAI,KAED,aACyBtB,KAAe;YACtC,IAAI,CAACkB,qBAAqB,GAAGlB,KAAK;UACpC;QAAC;UAAAD;UAAAC,OAEM,uBAAcuB,KAAK;YACxB,OAAO,2EAAmBA,KAAK,CAAClC,IAAI,CAAC;UACvC;QAAC;UAAAU;UAAAC,OAEM,2BAAkBuB,KAAK;YAC5B,OAAO,qEAAaA,KAAK,CAAC;UAC5B;QAAC;QAAA;MAAA,GACF;;;gBA9IOC;QAAgB;;;;gBAerB3B;QAAM;;gBACNA;QAAM;;gBACNA;QAAM;;gBACNA;QAAM;;gBAqFNA;QAAK;;gBASLA;QAAK;;gBASLA;QAAK;;gBASLA;QAAK;;MAzHKH,uBAAsB,eALlC,0DAAU;QACT+B,QAAQ,EAAE,mBAAmB;QAC7BC,kMAA8C;;OAE/C,CAAC,GACWhC,uBAAsB,CAqIlC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCxIYiC,qBAAoB;QAG/B;UAAA/B;QACA;QAACE;UAAAC;UAAAC,OAED,oBAAQ,CACR;QAAC;QAAA;MAAA,GAEF;;;;;;gBARE4B;QAAK;;MADKD,qBAAoB,eALhC,0DAAU;QACTF,QAAQ,EAAE,iBAAiB;QAC3BC,gMAA4C;;OAE7C,CAAC,GACWC,qBAAoB,CAShC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCVYE,iCAAgC;;;UACjC,6BAAwB,GAAG,IAAID,uDAAY,EAAU;UACrD,8BAAyB,GAAG,IAAIA,uDAAY,EAAW;UACvD,gCAA2B,GAAG,IAAIA,uDAAY,EAAW;UACzD,oBAAe,GAAG,IAAIA,uDAAY,EAAW;QA8DzD;QAAC9B;UAAAC;UAAAC,OArDC,4BAAmB8B,aAAqB;YACtC,IAAI,CAACC,wBAAwB,CAACtB,IAAI,CAACqB,aAAa,CAAC;YACjD,QAAQ,IAAI,CAACE,aAAa;cACxB,KAAK,SAAS;gBACZ,IAAI,CAACC,cAAc,EAAE;gBACrB;cACF;gBACE,IAAI,CAACC,eAAe,EAAE;gBACtB,IAAIJ,aAAa,KAAK,MAAM,EAAE;kBAC5B,IAAI,CAACK,qBAAqB,GAAG,KAAK;iBACnC,MAAM,IAAIL,aAAa,KAAK,UAAU,EAAE;kBACvC,IAAI,CAACM,mBAAmB,GAAG,KAAK;;;YAGtC,IAAI,CAACC,cAAc,EAAE;UACvB;QAAC;UAAAtC;UAAAC,OAED,8BAAkB;YAChB,IAAI,CAACoC,mBAAmB,GAAG,CAAC,IAAI,CAACA,mBAAmB;YACpD,IAAI,CAACC,cAAc,EAAE;UACvB;QAAC;UAAAtC;UAAAC,OAED,0BAAc;YACZ,IAAI,CAACmC,qBAAqB,GAAG,CAAC,IAAI,CAACA,qBAAqB;YACxD,IAAI,CAACE,cAAc,EAAE;UACvB;QAAC;UAAAtC;UAAAC,OAED,wBAAY;YACV,IAAI,CAACsC,SAAS,GAAG,CAAC,IAAI,CAACA,SAAS;YAChC,IAAI,CAACD,cAAc,EAAE;UACvB;QAAC;UAAAtC;UAAAC,OAED,0BAAc;YACZ,IAAI,CAACoC,mBAAmB,GAAG,KAAK;YAChC,IAAI,CAACD,qBAAqB,GAAG,KAAK;YAClC,IAAI,CAACG,SAAS,GAAG,KAAK;YACtB,IAAI,CAACD,cAAc,EAAE;YACrB,IAAI,CAACL,aAAa,GAAG,SAAS;UAChC;QAAC;UAAAjC;UAAAC,OAED,2BAAe;YACb,IAAI,CAACoC,mBAAmB,GAAG,IAAI;YAC/B,IAAI,CAACD,qBAAqB,GAAG,IAAI;YACjC,IAAI,CAACG,SAAS,GAAG,IAAI;YACrB,IAAI,CAACD,cAAc,EAAE;YACrB,IAAI,CAACL,aAAa,GAAG,UAAU;UACjC;QAAC;UAAAjC;UAAAC,OAED,0BAAc;YACZ,IAAI,CAACuC,yBAAyB,CAAC9B,IAAI,CAAC,IAAI,CAAC2B,mBAAmB,CAAC;YAC7D,IAAI,CAACI,2BAA2B,CAAC/B,IAAI,CAAC,IAAI,CAAC0B,qBAAqB,CAAC;YACjE,IAAI,CAACM,eAAe,CAAChC,IAAI,CAAC,IAAI,CAAC6B,SAAS,CAAC;UAC3C;QAAC;QAAA;MAAA,GACF;;;gBAjEEV;QAAM;;gBACNA;QAAM;;gBACNA;QAAM;;gBACNA;QAAM;;gBAENA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;MATKC,iCAAgC,eAL5C,0DAAU;QACTJ,QAAQ,EAAE,8BAA8B;QACxCC,6MAAyD;;OAE1D,CAAC,GACWG,iCAAgC,CAkE5C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCjEYa,gCAA+B;QAI1C,yCAAoBC,gBAAkC;UAAA/C;UAAlC,qBAAgB,GAAhB+C,gBAAgB;UAFpC,YAAO,GAAG,IAAI;QAGd;QAAC7C;UAAAC;UAAAC,OAED,sBAAa4C,MAAc;YACzB,IAAI,CAACC,cAAc,GAAGD,MAAM;YAC5BE,OAAO,CAACC,GAAG,4BAAqBH,MAAM,CAAE,CAAC;UAC3C;QAAC;UAAA7C;UAAAC,OAED,wBAAY;YACV,IAAI,IAAI,CAAC6C,cAAc,KAAK,IAAI,EAAE;cAChC,IAAI,CAACF,gBAAgB,CAACK,oBAAoB,CAAC,IAAI,CAACH,cAAc,CAACI,QAAQ,EAAE,CAAC;cAC1EH,OAAO,CAACC,GAAG,8BAAuB,IAAI,CAACF,cAAc,CAAE,CAAC;aACzD,MAAM;cACLC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;;UAErC;QAAC;UAAAhD;UAAAC,OAED,4BAAgB;YACd,IAAI,CAACkD,OAAO,GAAG,KAAK;UACtB;QAAC;QAAA;MAAA,GACF;;;gBA/BO1B;QAAgB;;MAOXkB,gCAA+B,eAL3C,0DAAU;QACTjB,QAAQ,EAAE,6BAA6B;QACvCC,4MAAwD;;OAEzD,CAAC,GACWgB,gCAA+B,CAwB3C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCtBYS,0BAAyB;;QAGpC,uBAAkB,GAAG,YAAY;QACjC,wBAAmB,GAAG,IAAI;QAC1B,0BAAqB,GAAG,IAAI;QAC5B,cAAS,GAAG,IAAI;MAClB,CAAC;;;gBANEvB;QAAK;;gBACLA;QAAK;;MAFKuB,0BAAyB,eANrC,0DAAU;QACT1B,QAAQ,EAAE,sBAAsB;QAChCC,qMAAiD;;OAElD,CAAC,GAEWyB,0BAAyB,CAOrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCPYC,qBAAoB;QAAA;UAAAxD;QAAA;QAAAE;UAAAC;UAAAC,OAI/B,kCAAsB;YACpB,OAAO,IAAI,CAACqD,kBAAkB,KAAK,MAAM,IAAI,IAAI,CAACA,kBAAkB,KAAK,UAAU;UACrF;QAAC;UAAAtD;UAAAC,OAED,sBAAasD,YAAoB;YAC/B,OAAO,qEAAaA,YAAY,CAAC;UACnC;QAAC;QAAA;MAAA,GACF;;;gBAVEC;QAAK;;gBACLA;QAAK;;MAFKH,qBAAoB,eANhC,0DAAU;QACT3B,QAAQ,EAAE,iBAAiB;QAC3BC,gMAA4C;;OAE7C,CAAC,GAEW0B,qBAAoB,CAWhC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MClBM,SAASI,6BAA4BA,CAACC,aAAqB;QAChE,IAAMC,OAAO,GAAG,wCAAwC;QACxD,OAAOD,aAAa,CAACE,KAAK,CAACD,OAAO,CAAC;MACrC;MAEO,SAASE,wBAAuBA,CAACC,OAAgB,EAAEC,WAAmB;QAC3E,OAAOD,OAAO,CAACE,WAAW,CAACC,IAAI,CAAC,mBAAS;UAAA,OAAIC,SAAS,CAACC,UAAU,KAAKJ,WAAW;QAAA,EAAC;MACpF;MAEO,SAASK,iBAAgBA,CAACN,OAAgB,EAAEC,WAAmB;QACpE,IAAMH,KAAK,GAAGC,wBAAuB,CAACC,OAAO,EAAEC,WAAW,CAAC;QAC3D,IAAI,CAAC,CAACH,KAAK,EAAE;UACX,IAAI,CAAC,CAACA,KAAK,CAACS,YAAY,EAAE;YACxB,OAAO,wBAAwB,GAAIT,KAAK,CAACS,YAAa;WACvD,MAAM;YACL,OAAO,iCAAiC,CAAC,CAAC;;;QAG9C,OAAO,IAAI;MACb;MAEO,SAASC,2BAA0BA,CAACR,OAAgB,EAAES,YAAoB;QAC/E,IAAMX,KAAK,GAAGC,wBAAuB,CAACC,OAAO,EAAES,YAAY,CAAC;QAC5D,IAAI,CAAC,CAACX,KAAK,EAAE;UACX,OAAOY,0BAAyB,CAACZ,KAAK,CAACS,YAAY,CAAC;;QAEtD,OAAO,IAAI;MACb;MAEO,SAASI,yBAAwBA,CAACf,aAAqB;QAC5D,IAAI,CAAC,CAACA,aAAa,EAAE;UACnB,IAAMgB,oBAAoB,GAAGjB,6BAA4B,CAACC,aAAa,CAAC;UACxE,IAAI,CAAC,CAACgB,oBAAoB,EAAE;YAC1B,IAAMC,QAAQ,GAAGC,QAAQ,CAACF,oBAAoB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YACtD,IAAMG,QAAQ,GAAGD,QAAQ,CAACF,oBAAoB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;YACtD,IAAI,CAACI,KAAK,CAACH,QAAQ,CAAC,IAAI,CAACG,KAAK,CAACD,QAAQ,CAAC,EAAE;cACxC,OAAO,CAACF,QAAQ,EAAEE,QAAQ,CAAC;;;;QAIjC,OAAO,IAAI;MACb;MAEO,SAASL,0BAAyBA,CAACd,aAAqB;QAC7D,IAAMqB,mBAAmB,GAAGN,yBAAwB,CAACf,aAAa,CAAC;QACnE,IAAI,CAAC,CAACqB,mBAAmB,EAAE;UACzB,IAAMJ,QAAQ,GAAGI,mBAAmB,CAAC,CAAC,CAAC;UACvC,IAAMF,QAAQ,GAAGE,mBAAmB,CAAC,CAAC,CAAC;UACvC,IAAIJ,QAAQ,KAAKE,QAAQ,EAAE;YACzB,OAAOF,QAAQ,CAACzB,QAAQ,EAAE;WAC3B,MAAM;YACL,iBAAUyB,QAAQ,eAAKE,QAAQ;;;QAGnC,OAAO,GAAG,CAAC,CAAC;MACd;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UChDaG,mBAAkB;QAAAnF;MAAA;MAAA,IAUlBoF,gBAAe;QAAApF;MAAA;UAafqF,+BAA8B;QAazC,wCAAoBC,oBAA0C;UAAAtF;UAA1C,yBAAoB,GAApBsF,oBAAoB;QACxC;QAACpF;UAAAC;UAAAC,OAED,qBAAYmF,OAAsB;YAChC,IAAI,CAAC,CAACA,OAAO,CAAC,aAAa,CAAC,EAAE;cAC5B,IAAI,CAACC,iBAAiB,EAAE;;YAE1B,IAAI,CAACC,mBAAmB,EAAE;YAC1B,IAAI,CAACC,8BAA8B,EAAE;UACvC;QAAC;UAAAvF;UAAAC,OAEO,+BAAmB;YACzB,IAAI,CAAC,CAAC,IAAI,CAACqD,kBAAkB,IAAI,CAAC,CAAC,IAAI,CAACkC,mBAAmB,IAAI,IAAI,CAACA,mBAAmB,CAACvE,MAAM,GAAG,CAAC,EAAE;cAClG,IAAI,IAAI,CAACqC,kBAAkB,KAAK,MAAM,EAAE;gBACtC,IAAI,CAACmC,yBAAyB,EAAE;eACjC,MAAM,IAAI,IAAI,CAACnC,kBAAkB,KAAK,UAAU,EAAE;gBACjD,IAAI,CAACoC,6BAA6B,EAAE;eACrC,MAAM;gBACL,IAAI,CAACC,+BAA+B,EAAE;;;UAG5C;QAAC;UAAA3F;UAAAC,OAEO,6BAAiB;YAAA;YACvB,IAAI,CAACuF,mBAAmB,GAAG,EAAE;YAAC,2CACL,IAAI,CAACxB,WAAW;cAAA4B;YAAA;cAAA,6BAAE;gBAAA,IAAhCC,UAAU;gBACnB,IAAMC,YAAY,GAAGD,UAAU,CAACE,cAAc,KAAK,gBAAgB;gBACnE,IAAMC,qBAAqB,GAAuB;kBAChDH,UAAU,EAAVA,UAAU;kBACVI,MAAM,EAAE,KAAK;kBACbH,YAAY,EAAZA,YAAY;kBACZI,QAAQ,EAAE,KAAK;kBACfC,aAAa,EAAE,IAAI;kBACnBC,aAAa,EAAE,EAAE;kBACjBC,cAAc,EAAE;iBACjB;gBACD,IAAIP,YAAY,EAAE;kBAChBQ,KAAI,CAACC,kBAAkB,CAACP,qBAAqB,CAAC,CAACQ,SAAS,CAAC,uBAAa;oBAAA,OAAIR,qBAAqB,CAACG,aAAa,GAAGA,aAAa;kBAAA,EAAC;;gBAEhIG,KAAI,CAACd,mBAAmB,CAACnF,IAAI,CAAC2F,qBAAqB,CAAC;eACrD;cAfD;gBAAAS;cAAA;YAeC;cAAAC;YAAA;cAAAA;YAAA;UACH;QAAC;UAAA1G;UAAAC,OAED,oCAA2B0G,CAAS;YAClC,IAAI,CAACnB,mBAAmB,CAACmB,CAAC,CAAC,CAACT,QAAQ,GAAG,CAAC,IAAI,CAACV,mBAAmB,CAACmB,CAAC,CAAC,CAACT,QAAQ;YAE5E,IAAI,IAAI,CAACV,mBAAmB,CAACmB,CAAC,CAAC,CAACT,QAAQ,EAAE;cACxC;cAEA;cACA,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACpB,mBAAmB,CAACvE,MAAM,EAAE2F,CAAC,EAAE,EAAE;gBACxD,IAAID,CAAC,KAAKC,CAAC,EAAE;kBACX,IAAI,CAACpB,mBAAmB,CAACoB,CAAC,CAAC,CAACV,QAAQ,GAAG,KAAK;;;cAIhD;cACA,IAAI,CAAC,CAAC,IAAI,CAACV,mBAAmB,CAACmB,CAAC,CAAC,CAACR,aAAa,EAAE;gBAC/C,IAAMU,gBAAgB,GAAa,IAAI,CAACrB,mBAAmB,CAACmB,CAAC,CAAC,CAACR,aAAa,CAACW,GAAG,CAAC,mBAAS;kBAAA,OAAI5C,SAAS,CAACC,UAAU;gBAAA,EAAC;gBACnH,KAAK,IAAIyC,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,IAAI,CAACpB,mBAAmB,CAACvE,MAAM,EAAE2F,EAAC,EAAE,EAAE;kBACxD,IAAID,CAAC,KAAKC,EAAC,EAAE;oBACX,IAAI,CAACpB,mBAAmB,CAACoB,EAAC,CAAC,CAACX,MAAM,GAAG,CAAC,CAACY,gBAAgB,CAACtH,QAAQ,CAAC,IAAI,CAACiG,mBAAmB,CAACoB,EAAC,CAAC,CAACf,UAAU,CAAC1B,UAAU,CAAC;;;;aAI1H,MAAM;cACL;cACA;cACA,KAAK,IAAIyC,GAAC,GAAG,CAAC,EAAEA,GAAC,GAAG,IAAI,CAACpB,mBAAmB,CAACvE,MAAM,EAAE2F,GAAC,EAAE,EAAE;gBACxD,IAAI,CAACpB,mBAAmB,CAACoB,GAAC,CAAC,CAACX,MAAM,GAAG,KAAK;;;YAI9C;YACA,IAAI,CAACX,mBAAmB,EAAE;YAC1B,IAAI,CAACC,8BAA8B,EAAE;UAEvC;QAAC;UAAAvF;UAAAC,OAEO,4BAAmB4F,UAA8B;YACvD;YACA,IAAMkB,YAAY,GAAY,IAAI,CAACC,SAAS,CAAC/C,IAAI,CAAC,iBAAO;cAAA,OAAIH,OAAO,CAACmD,SAAS,KAAKpB,UAAU,CAACA,UAAU,CAAC1B,UAAU;YAAA,EAAC;YACpH,IAAI,CAAC,CAAC4C,YAAY,EAAE;cAClB,OAAO,0CAAGA,YAAY,CAAC/C,WAAW,CAAC;aACpC,MAAM;cACL;cACA,OAAO,IAAI,CAACmB,oBAAoB,CAAC+B,oBAAoB,CAACrB,UAAU,CAACA,UAAU,CAAC1B,UAAU,CAAC,CACpFgD,IAAI,CAAC,qDAAI,iBAAO;gBAAA,OAAIrD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,WAAW;cAAA,EAAC,CAAC;;UAEjD;QAAC;UAAAhE;UAAAC,OAEO,0CAA8B;YACpC,IAAI,CAACmH,iBAAiB,GAAG,EAAE;YAAC,4CAEN,IAAI,CAACJ,SAAS;cAAAK;YAAA;cAApC,uDAAsC;gBAAA,IAA3BvD,OAAO;gBAChB,IAAI,CAACsD,iBAAiB,CAAC/G,IAAI,CAAC,IAAI,CAACiH,2BAA2B,CAACxD,OAAO,CAAC,CAAC;;YACvE;cAAAyD;YAAA;cAAAA;YAAA;UACH;QAAC;UAAAvH;UAAAC,OAEO,qBAAYuH,MAAc,EAAEC,MAAc;YAChD,IAAIA,MAAM,KAAK,IAAI,EAAE;cACnB,OAAOD,MAAM;;YAEf,IAAIA,MAAM,KAAK,IAAI,EAAE;cACnB,OAAOC,MAAM;;YAEf,OAAOC,IAAI,CAACC,GAAG,CAACH,MAAM,EAAEC,MAAM,CAAC;UACjC;QAAC;UAAAzH;UAAAC,OAEO,qBAAYuH,MAAc,EAAEC,MAAc;YAChD,IAAIA,MAAM,KAAK,IAAI,EAAE;cACnB,OAAOD,MAAM;;YAEf,IAAIA,MAAM,KAAK,IAAI,EAAE;cACnB,OAAOC,MAAM;;YAEf,OAAOC,IAAI,CAACE,GAAG,CAACJ,MAAM,EAAEC,MAAM,CAAC;UACjC;QAAC;UAAAzH;UAAAC,OAEO,qCAA4B6D,OAAgB;YAClD,IAAM+D,oBAAoB,GAAa,EAAE;YAEzC,IAAMC,eAAe,GAAoB;cACvChE,OAAO,EAAPA,OAAO;cACPiE,oBAAoB,EAAE,IAAI;cAC1BC,kBAAkB,EAAE,IAAI;cACxBC,sBAAsB,EAAE,IAAI;cAC5BC,oBAAoB,EAAE;aACvB;YAED;YACA;YACA,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACnB,mBAAmB,CAACvE,MAAM,EAAE0F,CAAC,EAAE,EAAE;cACxD,IAAI,CAAC,IAAI,CAACnB,mBAAmB,CAACmB,CAAC,CAAC,CAACV,MAAM,EAAE;gBACvC,KAAK,IAAIW,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG9C,OAAO,CAACE,WAAW,CAAC/C,MAAM,EAAE2F,CAAC,EAAE,EAAE;kBACnD,IAAI9C,OAAO,CAACE,WAAW,CAAC4C,CAAC,CAAC,CAACzC,UAAU,KAAK,IAAI,CAACqB,mBAAmB,CAACmB,CAAC,CAAC,CAACd,UAAU,CAAC1B,UAAU,EAAE;oBAC3F;oBACA;oBACA2D,eAAe,CAACC,oBAAoB,GAAG,IAAI,CAACI,WAAW,CAACL,eAAe,CAACC,oBAAoB,EAAEpB,CAAC,CAAC;oBAChGmB,eAAe,CAACE,kBAAkB,GAAG,IAAI,CAACI,WAAW,CAACN,eAAe,CAACE,kBAAkB,EAAErB,CAAC,CAAC;oBAE5F;oBACA,IAAI,IAAI,CAACnB,mBAAmB,CAACmB,CAAC,CAAC,CAACb,YAAY,IAAI,CAAC,CAAC,IAAI,CAACN,mBAAmB,CAACmB,CAAC,CAAC,CAACR,aAAa,EAAE;sBAC3F;sBACA;sBACA;sBACA,IAAI,CAACX,mBAAmB,CAACmB,CAAC,CAAC,CAACR,aAAa,CAACkC,OAAO,CAAC,sBAAY;wBAAA,OAAIR,oBAAoB,CAACxH,IAAI,CAACiI,YAAY,CAACnE,UAAU,CAAC;sBAAA,EAAC;sBACrH,IAAI,IAAI,CAACqB,mBAAmB,CAACmB,CAAC,CAAC,CAACT,QAAQ,EAAE;wBACxC;wBACA;wBACA;wBACA;wBACA4B,eAAe,CAACG,sBAAsB,GAAG,CAAC,CAAC;wBAC3CH,eAAe,CAACI,oBAAoB,GAAG,IAAI,CAAC1C,mBAAmB,CAACmB,CAAC,CAAC,CAACR,aAAa,CAAClF,MAAM,GAAG,CAAC;;;mBAGhG,MAAM,IAAI,IAAI,CAACuE,mBAAmB,CAACmB,CAAC,CAAC,CAACb,YAAY,IACjD,CAAC,CAAC,IAAI,CAACN,mBAAmB,CAACmB,CAAC,CAAC,CAACR,aAAa,IAC3C,IAAI,CAACX,mBAAmB,CAACmB,CAAC,CAAC,CAACT,QAAQ,EAAE;oBACtC;oBACA;oBACA;oBACA,KAAK,IAAIqC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC/C,mBAAmB,CAACmB,CAAC,CAAC,CAACR,aAAa,CAAClF,MAAM,EAAEsH,CAAC,EAAE,EAAE;sBACzE,IAAIzE,OAAO,CAACE,WAAW,CAAC4C,CAAC,CAAC,CAACzC,UAAU,KAAK,IAAI,CAACqB,mBAAmB,CAACmB,CAAC,CAAC,CAACR,aAAa,CAACoC,CAAC,CAAC,CAACpE,UAAU,EAAE;wBACjG;wBACA;wBACA2D,eAAe,CAACC,oBAAoB,GAAG,IAAI,CAACI,WAAW,CAACL,eAAe,CAACC,oBAAoB,EAAEpB,CAAC,CAAC;wBAChGmB,eAAe,CAACE,kBAAkB,GAAG,IAAI,CAACI,WAAW,CAACN,eAAe,CAACE,kBAAkB,EAAErB,CAAC,CAAC;wBAC5F;wBACA;wBACAmB,eAAe,CAACG,sBAAsB,GAAG,IAAI,CAACE,WAAW,CAACL,eAAe,CAACG,sBAAsB,EAAEM,CAAC,CAAC;wBACpGT,eAAe,CAACI,oBAAoB,GAAG,IAAI,CAACE,WAAW,CAACN,eAAe,CAACI,oBAAoB,EAAEK,CAAC,CAAC;;;;;;;YAQ5G;YACA;YACA;YACA,KAAK,IAAI5B,EAAC,GAAG,CAAC,EAAEA,EAAC,GAAG,IAAI,CAACnB,mBAAmB,CAACvE,MAAM,EAAE0F,EAAC,EAAE,EAAE;cACxD,IAAI,CAAC,IAAI,CAACnB,mBAAmB,CAACmB,EAAC,CAAC,CAACV,MAAM,EAAE;gBACvC,IAAI4B,oBAAoB,CAACtI,QAAQ,CAAC,IAAI,CAACiG,mBAAmB,CAACmB,EAAC,CAAC,CAACd,UAAU,CAAC1B,UAAU,CAAC,EAAE;kBACpF;kBACA;kBACA2D,eAAe,CAACC,oBAAoB,GAAG,IAAI,CAACI,WAAW,CAACL,eAAe,CAACC,oBAAoB,EAAEpB,EAAC,CAAC;kBAChGmB,eAAe,CAACE,kBAAkB,GAAG,IAAI,CAACI,WAAW,CAACN,eAAe,CAACE,kBAAkB,EAAErB,EAAC,CAAC;;;;YAIlG,OAAOmB,eAAe;UACxB;QAAC;UAAA9H;UAAAC,OAEM,yCAA6B;YAClC,IAAI,CAACuF,mBAAmB,CAACgD,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;cAAA,OAAKA,CAAC,CAAC7C,UAAU,CAACtC,YAAY,CAACoF,aAAa,CAACF,CAAC,CAAC5C,UAAU,CAACtC,YAAY,CAAC;YAAA,EAAC;YAC3G;YACA,IAAI,CAACqF,yBAAyB,EAAE;UAClC;QAAC;UAAA5I;UAAAC,OAEM,qCAAyB;YAC9B,IAAI,CAACuF,mBAAmB,CAACgD,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;cAAA,OAAKA,CAAC,CAAC7C,UAAU,CAACE,cAAc,CAAC4C,aAAa,CAACF,CAAC,CAAC5C,UAAU,CAACE,cAAc,CAAC;YAAA,EAAC;YAC/G,IAAI,CAAC8C,qBAAqB,EAAE;UAC9B;QAAC;UAAA7I;UAAAC,OAEM,2CAA+B;YAAA;YAAA,4CACR,IAAI,CAACuF,mBAAmB;cAAAsD;YAAA;cAApD,uDAAsD;gBAAA,IAA3CC,aAAa;gBAAA,4CACA,IAAI,CAAC/B,SAAS;kBAAAgC;gBAAA;kBAApC,uDAAsC;oBAAA,IAA3BlF,OAAO;oBAAA,4CACmBA,OAAO,CAACE,WAAW;sBAAAiF;oBAAA;sBAAtD,uDAAwD;wBAAA,IAA7CC,oBAAoB;wBAC7B,IAAIH,aAAa,CAAClD,UAAU,CAAC1B,UAAU,KAAK+E,oBAAoB,CAAC/E,UAAU,EAAE;0BAC3E,IAAMgF,kBAAkB,GAAGvE,QAAQ,CAAC,sFAA2Bd,OAAO,EAAEiF,aAAa,CAAClD,UAAU,CAAC1B,UAAU,CAAC,EAAE,EAAE,CAAC;0BACjH,IAAI,CAACW,KAAK,CAACqE,kBAAkB,CAAC,EAAE;4BAC9BJ,aAAa,CAAC1C,cAAc,IAAI8C,kBAAkB;;;;oBAGvD;sBAAAC;oBAAA;sBAAAA;oBAAA;oBACD,IAAIL,aAAa,CAACjD,YAAY,IAAI,CAAC,CAACiD,aAAa,CAAC5C,aAAa,EAAE;sBAAA,4CAChC4C,aAAa,CAAC5C,aAAa;wBAAAkD;sBAAA;wBAAA,+BAAE;0BAAA,IAAjDC,gBAAgB;0BACzB,IAAMC,qBAAqB,GAAGC,MAAI,CAAChE,mBAAmB,CAACvB,IAAI,CACzD,4BAAkB;4BAAA,OAAIwF,kBAAkB,CAAC5D,UAAU,CAAC1B,UAAU,KAAKmF,gBAAgB,CAACnF,UAAU;0BAAA,EAC/F;0BACD,IAAI,CAAC,CAACoF,qBAAqB,EAAE;4BAC3B,IAAMJ,kBAAkB,GAAGvE,QAAQ,CAAC,qFAA0B0E,gBAAgB,CAACjF,YAAY,CAAC,EAAE,EAAE,CAAC;4BACjG,IAAI,CAACS,KAAK,CAACqE,kBAAkB,CAAC,EAAE;8BAC9BI,qBAAqB,CAAClD,cAAc,IAAI8C,kBAAkB;;;yBAG/D;wBAVD;0BAAAO;wBAAA;sBAUC;wBAAAC;sBAAA;wBAAAA;sBAAA;;;gBAEJ;kBAAAC;gBAAA;kBAAAA;gBAAA;;YACF;cAAAC;YAAA;cAAAA;YAAA;YACD,IAAI,CAACrE,mBAAmB,CAACgD,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;cAAA,OACjCA,CAAC,CAACrC,cAAc,GAAGoC,CAAC,CAACpC,cAAc;YAAA,EACpC;YACD,IAAI,CAACyD,MAAM,GAAG,EAAE;UAClB;QAAC;UAAA9J;UAAAC,OAEM,iCAAqB;YAC1B,IAAM6J,MAAM,GAAG,EAAE,CAAC,CAAE;YACpB,IAAI7I,MAAM,GAAG,CAAC;YACd,IAAI8I,KAAK,GAAG,IAAI;YAChB,KAAK,IAAIpD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACnB,mBAAmB,CAACvE,MAAM,EAAE0F,CAAC,EAAE,EAAE;cACxD,IAAMqD,OAAO,GAAG,EAAE;cAClB,IAAI,CAAC,IAAI,CAACxE,mBAAmB,CAACmB,CAAC,CAAC,CAACV,MAAM,EAAE;gBACvChF,MAAM,IAAI,CAAC;gBACX,IAAI8I,KAAK,KAAK,IAAI,EAAE;kBAClBA,KAAK,GAAGpD,CAAC;;;cAGb,IAAI,CAAC,IAAI,CAACnB,mBAAmB,CAACmB,CAAC,GAAG,CAAC,CAAC,IAC9B,IAAI,CAACnB,mBAAmB,CAACmB,CAAC,CAAC,CAACb,YAAY,IAAI,IAAI,CAACN,mBAAmB,CAACmB,CAAC,CAAC,CAACT,QAAS,IAClF,IAAI,CAACV,mBAAmB,CAACmB,CAAC,CAAC,CAACd,UAAU,CAACE,cAAc,KAAK,IAAI,CAACP,mBAAmB,CAACmB,CAAC,GAAG,CAAC,CAAC,CAACd,UAAU,CAACE,cAAc,EAAE;gBACxH,IAAIgE,KAAK,KAAK,IAAI,EAAE;kBAClBC,OAAO,CAAC3J,IAAI,CAAC,IAAI,CAACmF,mBAAmB,CAACmB,CAAC,CAAC,CAACd,UAAU,CAACE,cAAc,EAAE9E,MAAM,EAAE8I,KAAK,CAAC;kBAClFD,MAAM,CAACzJ,IAAI,CAAC2J,OAAO,CAAC;kBACpBD,KAAK,GAAG,IAAI;;gBAEd9I,MAAM,GAAG,CAAC;;;YAGd,IAAI,CAAC6I,MAAM,GAAGA,MAAM;UACtB;QAAC;UAAA9J;UAAAC,OAEM,qCAAyB;YAC9B,IAAM6J,MAAM,GAAG,EAAE,CAAC,CAAE;YACpB,IAAI7I,MAAM,GAAG,CAAC;YACd,IAAI8I,KAAK,GAAG,IAAI;YAChB,KAAK,IAAIpD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACnB,mBAAmB,CAACvE,MAAM,EAAE0F,CAAC,EAAE,EAAE;cACxD,IAAMqD,OAAO,GAAG,EAAE;cAClB,IAAI,CAAC,IAAI,CAACxE,mBAAmB,CAACmB,CAAC,CAAC,CAACV,MAAM,EAAE;gBACvChF,MAAM,IAAI,CAAC;gBACX,IAAI8I,KAAK,KAAK,IAAI,EAAE;kBAClBA,KAAK,GAAGpD,CAAC;;;cAGb,IAAI,CAAC,IAAI,CAACnB,mBAAmB,CAACmB,CAAC,GAAG,CAAC,CAAC,IAC9B,IAAI,CAACnB,mBAAmB,CAACmB,CAAC,CAAC,CAACb,YAAY,IAAI,IAAI,CAACN,mBAAmB,CAACmB,CAAC,CAAC,CAACT,QAAS,IAClF,IAAI,CAACV,mBAAmB,CAACmB,CAAC,CAAC,CAACd,UAAU,CAACtC,YAAY,KAAK,IAAI,CAACiC,mBAAmB,CAACmB,CAAC,GAAG,CAAC,CAAC,CAACd,UAAU,CAACtC,YAAY,EAAE;gBACpH,IAAIwG,KAAK,KAAK,IAAI,EAAE;kBAClBC,OAAO,CAAC3J,IAAI,CAAC,IAAI,CAACmF,mBAAmB,CAACmB,CAAC,CAAC,CAACd,UAAU,CAACtC,YAAY,EAAEtC,MAAM,EAAE8I,KAAK,CAAC;kBAChFD,MAAM,CAACzJ,IAAI,CAAC2J,OAAO,CAAC;kBACpBD,KAAK,GAAG,IAAI;;gBAEd9I,MAAM,GAAG,CAAC;;;YAGd,IAAI,CAAC6I,MAAM,GAAGA,MAAM;UACtB;QAAC;QAAA;MAAA,GACF;;;gBA1UOG;QAAoB;;;;gBA6BzBC;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;MANKhF,+BAA8B,eAL1C,0DAAU;QACTxD,QAAQ,EAAE,4BAA4B;QACtCC,2MAAuD;;OAExD,CAAC,GACWuD,+BAA8B,CA8S1C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCxUYiF,qCAAoC;;;UAQrC,wBAAmB,GAA0B,IAAItI,uDAAY,EAAW;QAcpF;QAAC9B;UAAAC;UAAAC,OAZC,oBAAQ;YACN,IAAI,CAACmK,gBAAgB,EAAE;UACzB;QAAC;UAAApK;UAAAC,OAED,4BAAgB;YACd,IAAI,IAAI,CAACoK,gBAAgB,IAAI,IAAI,CAACtE,cAAc,KAAK,gBAAgB,EAAE;cACrE,IAAI,CAACuE,mBAAmB,CAAC5J,IAAI,CAAC,KAAK,CAAC;cACpC,OAAO,KAAK;;YAEd,IAAI,CAAC4J,mBAAmB,CAAC5J,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC6J,cAAc,CAAC;YACpD,OAAO,CAAC,CAAC,IAAI,CAACA,cAAc;UAC9B;QAAC;QAAA;MAAA,GACF;;;gBApBE1I;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBAELA;QAAM;;MARIsI,qCAAoC,eALhD,0DAAU;QACTzI,QAAQ,EAAE,mCAAmC;QAC7CC,kNAA8D;;OAE/D,CAAC,GACWwI,qCAAoC,CAsBhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCpBYK,6BAA4B;QAAA;UAAA3K;QAAA;QAAAE;UAAAC;UAAAC,OAevC,oBAAQ;YACN,IAAI,CAACjB,kBAAkB,GAAG,2EAAmB,IAAI,CAAC+G,cAAc,CAAC;YACjE,IAAI,CAAC0E,sBAAsB,GAAG,qEAAa,IAAI,CAACC,kBAAkB,CAAC;UACrE;QAAC;UAAA1K;UAAAC,OAED,oCAA2B0K,SAAkB;YAC3C,IAAI,CAACL,mBAAmB,GAAGK,SAAS;UACtC;QAAC;QAAA;MAAA,GACF;;;gBArBEnH;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;MAVKgH,6BAA4B,eALxC,0DAAU;QACT9I,QAAQ,EAAE,0BAA0B;QACpCC,yMAAqD;;OAEtD,CAAC,GACW6I,6BAA4B,CAuBxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCzBYI,sCAAqC;QAAA/K;MAAA,EAGjD;;;gBAFEgC;QAAK;;gBACLA;QAAK;;MAFK+I,sCAAqC,eALjD,0DAAU;QACTlJ,QAAQ,EAAE,mCAAmC;QAC7CC,kNAA8D;;OAE/D,CAAC,GACWiJ,sCAAqC,CAGjD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCMYC,6BAA4B;;;UAKvC,4BAAuB,GAAGC,6EAAuB;UACjD,qBAAgB,GAAGA,sEAAgB;UACnC,+BAA0B,GAAGA,gFAA0B;QAyJzD;QAAC/K;UAAAC;UAAAqB,KAvJC,eAAc;YACZ,OAAO,IAAI,CAACmE,mBAAmB,CAAC,IAAI,CAACmB,CAAC,CAAC;UACzC;QAAC;UAAA3G;UAAAC,OAED,qCAA4B6D,OAAgB,EAAES,YAAoB;YAChE,OAAO,IAAI,CAACiB;YACV;YAAA,CACCtF,MAAM,CAAC,oBAAU;cAAA,OAAI2F,UAAU,CAACC,YAAY;YAAA;YAC7C;YAAA,CACC5F,MAAM,CAAC,oBAAU;cAAA,OAChB4D,OAAO,CAACE,WAAW,CAAC+G,IAAI,CAAC,mBAAS;gBAAA,OAAI7G,SAAS,CAACC,UAAU,KAAK0B,UAAU,CAACA,UAAU,CAAC1B,UAAU;cAAA,EAAC;YAAA;YAClG;YAAA,CACCjE,MAAM,CAAC,oBAAU;cAAA,OAAI,CAAC,CAAC2F,UAAU,CAACM,aAAa;YAAA,EAAC,CAChDW,GAAG,CAAC,oBAAU;cAAA,OAAIjB,UAAU,CAACM,aAAa,CAAClC,IAAI,CAAC,sBAAY;gBAAA,OAAIqE,YAAY,CAACnE,UAAU,KAAKI,YAAY;cAAA,EAAC;YAAA,EAAC,CAC1GrE,MAAM,CAAC,mBAAS;cAAA,OAAI,CAAC,CAACgE,SAAS;YAAA,EAAC;UACrC;QAAC;UAAAlE;UAAAC,OAEM,6BAAoB6D,OAAwB,EAAEkH,eAAuB;YAC1E,IAAI,IAAI,CAACC,2BAA2B,CAACnH,OAAO,EAAEkH,eAAe,CAAC,EAAE;cAC9D,OAAO,cAAc;;YAEvB,IAAI,IAAI,CAACE,2BAA2B,CAACpH,OAAO,EAAEkH,eAAe,CAAC,IAAI,CAAC,IAAI,CAACG,6BAA6B,CAACrH,OAAO,EAAEkH,eAAe,CAAC,EAAE;cAC/H,OAAO,cAAc;;YAGvB,OAAO,yBAAyB;UAClC;QAAC;UAAAhL;UAAAC,OAEM,gCAAuB6D,OAAwB,EAAEkH,eAAuB;YAC7E,IAAI,IAAI,CAACC,2BAA2B,CAACnH,OAAO,EAAEkH,eAAe,CAAC,EAAE;cAC9D,OAAO,cAAc;;YAEvB,IAAI,IAAI,CAACG,6BAA6B,CAACrH,OAAO,EAAEkH,eAAe,CAAC,IAAI,CAAC,IAAI,CAACE,2BAA2B,CAACpH,OAAO,EAAEkH,eAAe,CAAC,EAAE;cAC/H,OAAO,cAAc;;YAGvB,OAAO,yBAAyB;UAClC;QAAC;UAAAhL;UAAAC,OAED,oCAA2B6D,OAAgB,EAAES,YAAoB;YAC/D,IAAM6G,OAAO,GAAG,IAAI,CAACC,2BAA2B,CAACvH,OAAO,EAAES,YAAY,CAAC;YACvE,IAAI6G,OAAO,CAACnK,MAAM,GAAG,CAAC,EAAE;cACtB,IAAMqK,mBAAmB,GAAG,IAAI,CAACC,wBAAwB,CAACH,OAAO,CAAC;cAClE,IAAI,CAAC,CAACE,mBAAmB,EAAE;gBACzB,iDAA0CA,mBAAmB,CAAC,CAAC,CAAC,yBAAeA,mBAAmB,CAAC,CAAC,CAAC;eACtG,MAAM;gBACL,OAAO,iCAAiC,CAAC,CAAC;;;YAG9C,OAAO,IAAI;UACb;QAAC;UAAAtL;UAAAC,OAED,6CAAoC6D,OAAgB,EAAES,YAAoB;YACxE,IAAM6G,OAAO,GAAG,IAAI,CAACC,2BAA2B,CAACvH,OAAO,EAAES,YAAY,CAAC;YACvE,IAAI6G,OAAO,CAACnK,MAAM,GAAG,CAAC,EAAE;cACtB,IAAMqK,mBAAmB,GAAG,IAAI,CAACC,wBAAwB,CAACH,OAAO,CAAC;cAClE,IAAI,CAAC,CAACE,mBAAmB,EAAE;gBACzB,IAAIA,mBAAmB,CAAC,CAAC,CAAC,KAAKA,mBAAmB,CAAC,CAAC,CAAC,EAAE;kBACrD,OAAOA,mBAAmB,CAAC,CAAC,CAAC,CAACpI,QAAQ,EAAE;iBACzC,MAAM;kBACL,iBAAUoI,mBAAmB,CAAC,CAAC,CAAC,eAAKA,mBAAmB,CAAC,CAAC,CAAC;;eAE9D,MAAM;gBACL,OAAO,GAAG;;;YAGd,OAAO,IAAI;UACb;QAAC;UAAAtL;UAAAC,OAEO,qCAA4B6D,OAAwB,EAAEkH,eAAuB;YACnF,IAAIlH,OAAO,CAACiE,oBAAoB,IAAI,IAAI,IAAIjE,OAAO,CAACkE,kBAAkB,IAAI,IAAI,EAAE;cAE9E;cACA,IAAIlE,OAAO,CAACiE,oBAAoB,GAAGiD,eAAe,IAAIlH,OAAO,CAACkE,kBAAkB,GAAGgD,eAAe,EAAE;gBAClG,OAAO,IAAI;;cAGb;cACA,IAAIlH,OAAO,CAACiE,oBAAoB,GAAGiD,eAAe,IAAIlH,OAAO,CAACkE,kBAAkB,KAAKgD,eAAe,EAAE;gBACpG;gBACA;gBACA,IAAI,IAAI,CAACxF,mBAAmB,CAACwF,eAAe,CAAC,CAAClF,YAAY,IAAI,IAAI,CAACN,mBAAmB,CAACwF,eAAe,CAAC,CAAC9E,QAAQ,EAAE;kBAChH,IAAIpC,OAAO,CAACmE,sBAAsB,IAAI,IAAI,IAAInE,OAAO,CAACoE,oBAAoB,IAAI,IAAI,EAAE;oBAClF,OAAO,IAAI;;;;;YAMnB,OAAO,KAAK;UACd;QAAC;UAAAlI;UAAAC,OAEO,uCAA8B6D,OAAwB,EAAEkH,eAAuB;YAAA;YACrF;YACA,IAAIlH,OAAO,CAACiE,oBAAoB,IAAI,IAAI,IAAIjE,OAAO,CAACiE,oBAAoB,KAAKiD,eAAe,EAAE;cAE5F,IAAI,CAAC,IAAI,CAACxF,mBAAmB,CAACwF,eAAe,CAAC,CAAClF,YAAY,EAAE;gBAC3D;gBACA,OAAO,IAAI;;cAEb;cACA;cACA;cACA;cACA,IAAIhC,OAAO,CAACA,OAAO,CAACE,WAAW,CAAC+G,IAAI,CAAC,mBAAS;gBAAA,OAC5CS,MAAI,CAAChG,mBAAmB,CAACwF,eAAe,CAAC,CAACnF,UAAU,CAAC1B,UAAU,KAAKD,SAAS,CAACC,UAAU;cAAA,EAAC,EAAE;gBAC3F,OAAO,IAAI;;;YAIf,OAAO,KAAK;UACd;QAAC;UAAAnE;UAAAC,OAEO,qCAA4B6D,OAAwB,EAAEkH,eAAuB;YACnF;YACA,IAAIlH,OAAO,CAACkE,kBAAkB,IAAI,IAAI,IAAIlE,OAAO,CAACkE,kBAAkB,KAAKgD,eAAe,EAAE;cAExF;cACA;cACA,IAAI,IAAI,CAACxF,mBAAmB,CAACwF,eAAe,CAAC,CAAClF,YAAY,IAAI,IAAI,CAACN,mBAAmB,CAACwF,eAAe,CAAC,CAAC9E,QAAQ,EAAE;gBAChH,IAAIpC,OAAO,CAACmE,sBAAsB,IAAI,IAAI,IAAInE,OAAO,CAACoE,oBAAoB,IAAI,IAAI,EAAE;kBAClF,OAAO,KAAK;;;cAGhB,OAAO,IAAI;;YAEb,OAAO,KAAK;UACd;QAAC;UAAAlI;UAAAC,OAEO,kCAAyBwL,UAA8B;YAC7D,IAAI9G,QAAQ,GAAW,IAAI;YAC3B,IAAIE,QAAQ,GAAW,IAAI;YAAC,4CACJ4G,UAAU;cAAAC;YAAA;cAAlC,uDAAoC;gBAAA,IAAzBxH,SAAS;gBAClB,IAAMa,mBAAmB,GAAG,oFAAyBb,SAAS,CAACG,YAAY,CAAC;gBAC5E,IAAI,CAAC,CAACU,mBAAmB,EAAE;kBACzB,IAAIJ,QAAQ,KAAK,IAAI,EAAE;oBACrBA,QAAQ,GAAG,CAAC;;kBAEd,IAAIE,QAAQ,KAAK,IAAI,EAAE;oBACrBA,QAAQ,GAAG,CAAC;;kBAEdF,QAAQ,IAAII,mBAAmB,CAAC,CAAC,CAAC;kBAClCF,QAAQ,IAAIE,mBAAmB,CAAC,CAAC,CAAC;;;YAErC;cAAA4G;YAAA;cAAAA;YAAA;YACD,IAAIhH,QAAQ,KAAK,IAAI,IAAIE,QAAQ,KAAK,IAAI,EAAE;cAC1C,OAAO,CAACF,QAAQ,EAAEE,QAAQ,CAAC;;YAE7B,OAAO,IAAI;UACb;QAAC;QAAA;MAAA,GAEF;;;gBA/JErB;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;MAHKqH,6BAA4B,eALxC,0DAAU;QACTnJ,QAAQ,EAAE,0BAA0B;QACpCC,yMAAqD;;OAEtD,CAAC,GACWkJ,6BAA4B,CAgKxC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCpKYe,qCAAoC;;;UAQ/C,wBAAmB,GAAG,KAAK;UAG3B,2BAAsB,GAAG,KAAK;QAqIhC;QAAC7L;UAAAC;UAAAC,OAjIC,uBAAW;YACT,IAAI,CAAC4L,mBAAmB,GAAG,IAAI,CAACC,2BAA2B,CAAC,IAAI,CAAChI,OAAO,EAAE,IAAI,CAAC6C,CAAC,EAAE,IAAI,CAACC,CAAC,CAAC;YACzF,IAAI,CAACmF,mBAAmB,GAAG,CAAC,CAAC,mFAAwB,IAAI,CAACjI,OAAO,CAACA,OAAO,EAAE,IAAI,CAACkI,EAAE,CAAC7H,UAAU,CAAC;YAC9F,IAAI,CAAC8H,2BAA2B,GAAG,4EAAiB,IAAI,CAACnI,OAAO,CAACA,OAAO,EAAE,IAAI,CAACkI,EAAE,CAAC7H,UAAU,CAAC;YAC7F,IAAI,CAAC+H,4BAA4B,GAAG,sFAA2B,IAAI,CAACpI,OAAO,CAACA,OAAO,EAAE,IAAI,CAACkI,EAAE,CAAC7H,UAAU,CAAC;YACxG,IAAI,CAACgI,sBAAsB,GAAG,CAAC,CAAC,IAAI,CAACC,kCAAkC,CAAC,IAAI,CAACvG,UAAU,EAAE,IAAI,CAAC/B,OAAO,CAACA,OAAO,EAAE,IAAI,CAACkI,EAAE,CAAC7H,UAAU,CAAC;YAClI,IAAI,CAACkI,qCAAqC,GAAG,IAAI,CAACC,oCAAoC,CAAC,IAAI,CAACzG,UAAU,EAAE,IAAI,CAACmG,EAAE,CAAC7H,UAAU,CAAC;YAC3H,IAAI,CAACoI,sCAAsC,GAAG,IAAI,CAACC,oCAAoC,CAAC,IAAI,CAAC3G,UAAU,EAAE,IAAI,CAACmG,EAAE,CAAC7H,UAAU,CAAC;YAC5H,IAAI,CAACsI,sBAAsB,GAAG,IAAI,CAACC,8BAA8B,CAAC,IAAI,CAAC5I,OAAO,EAAE,IAAI,CAAC6C,CAAC,EAAE,IAAI,CAACC,CAAC,CAAC;UACjG;QAAC;UAAA5G;UAAAqB,KAGD,eAAc;YACZ,OAAO,IAAI,CAACmE,mBAAmB,CAAC,IAAI,CAACmB,CAAC,CAAC;UACzC;QAAC;UAAA3G;UAAAqB,KAED,eAAM;YACJ,OAAO,IAAI,CAACmE,mBAAmB,CAAC,IAAI,CAACmB,CAAC,CAAC,CAACR,aAAa,CAAC,IAAI,CAACS,CAAC,CAAC;UAC/D;QAAC;UAAA5G;UAAAC,OAEM,qCAA4B6D,OAAwB,EAAEkH,eAAuB,EAAE2B,iBAAyB;YAC7G,IAAI,IAAI,CAACC,6BAA6B,CAAC9I,OAAO,EAAEkH,eAAe,EAAE2B,iBAAiB,CAAC,EAAE;cACnF,OAAO,cAAc;;YAEvB,IAAI,IAAI,CAACE,6BAA6B,CAAC/I,OAAO,EAAEkH,eAAe,EAAE2B,iBAAiB,CAAC,IACjF,CAAC,IAAI,CAACG,+BAA+B,CAAChJ,OAAO,EAAEkH,eAAe,EAAE2B,iBAAiB,CAAC,EAAE;cACpF,OAAO,cAAc;;YAGvB,OAAO,yBAAyB;UAClC;QAAC;UAAA3M;UAAAC,OAEM,wCAA+B6D,OAAwB,EAAEkH,eAAuB,EAAE2B,iBAAyB;YAChH,IAAI,IAAI,CAACC,6BAA6B,CAAC9I,OAAO,EAAEkH,eAAe,EAAE2B,iBAAiB,CAAC,EAAE;cACnF,OAAO,cAAc;;YAEvB,IAAI,IAAI,CAACG,+BAA+B,CAAChJ,OAAO,EAAEkH,eAAe,EAAE2B,iBAAiB,CAAC,IACnF,CAAC,IAAI,CAACE,6BAA6B,CAAC/I,OAAO,EAAEkH,eAAe,EAAE2B,iBAAiB,CAAC,EAAE;cAClF,OAAO,cAAc;;YAGvB,OAAO,yBAAyB;UAClC;QAAC;UAAA3M;UAAAC,OAEM,4CAAmC4F,UAA8B,EAAE/B,OAAgB,EAAES,YAAoB;YAC9G,IAAIT,OAAO,CAACE,WAAW,CAAC+G,IAAI,CAAC,mBAAS;cAAA,OAAI7G,SAAS,CAACC,UAAU,KAAK0B,UAAU,CAACA,UAAU,CAAC1B,UAAU;YAAA,EAAC,EAAE;cACpG,OAAO0B,UAAU,CAACM,aAAa,CAAClC,IAAI,CAAC,mBAAS;gBAAA,OAAIC,SAAS,CAACC,UAAU,KAAKI,YAAY;cAAA,EAAC;;YAE1F,OAAO,IAAI;UACb;QAAC;UAAAvE;UAAAC,OAED,8CAAqC4F,UAA8B,EAAEtB,YAAoB;YACvF,IAAMX,KAAK,GAAG,IAAI,CAACmJ,0BAA0B,CAAClH,UAAU,EAAEtB,YAAY,CAAC;YACvE,IAAI,CAAC,CAACX,KAAK,EAAE;cACX,IAAI,CAAC,CAACA,KAAK,CAACS,YAAY,EAAE;gBACxB,OAAO,wBAAwB,GAAIT,KAAK,CAACS,YAAa;eACvD,MAAM;gBACL,OAAO,iCAAiC,CAAC,CAAC;;;YAG9C,OAAO,IAAI;UACb;QAAC;UAAArE;UAAAC,OAED,8CAAqC4F,UAA8B,EAAEtB,YAAoB;YACvF,IAAMX,KAAK,GAAG,IAAI,CAACmJ,0BAA0B,CAAClH,UAAU,EAAEtB,YAAY,CAAC;YACvE,IAAI,CAAC,CAACX,KAAK,EAAE;cACX,OAAO,qFAA0BA,KAAK,CAACS,YAAY,CAAC;;YAEtD,OAAO,IAAI;UACb;QAAC;UAAArE;UAAAC,OAEO,uCAA8B6D,OAAwB,EAAEkH,eAAuB,EAAE2B,iBAAyB;YAChH,IAAI7I,OAAO,CAACiE,oBAAoB,IAAI,IAAI,IAAIjE,OAAO,CAACkE,kBAAkB,IAAI,IAAI,EAAE;cAC9E;cACA,IAAIlE,OAAO,CAACiE,oBAAoB,GAAGiD,eAAe,IAAIlH,OAAO,CAACkE,kBAAkB,GAAGgD,eAAe,EAAE;gBAClG,OAAO,IAAI;;cAGb,IAAIlH,OAAO,CAACmE,sBAAsB,IAAI,IAAI,IAAInE,OAAO,CAACoE,oBAAoB,IAAI,IAAI,EAAE;gBAClF;gBACA,IAAIpE,OAAO,CAACmE,sBAAsB,GAAG0E,iBAAiB,IAAI7I,OAAO,CAACoE,oBAAoB,GAAGyE,iBAAiB,EAAE;kBAC1G,OAAO,IAAI;;gBAGb;gBACA,IAAI7I,OAAO,CAACiE,oBAAoB,GAAGiD,eAAe,IAAIlH,OAAO,CAACoE,oBAAoB,GAAGyE,iBAAiB,EAAE;kBACtG,OAAO,IAAI;;gBAGb;gBACA,IAAI7I,OAAO,CAACmE,sBAAsB,GAAG0E,iBAAiB,IAAI7I,OAAO,CAACkE,kBAAkB,GAAGgD,eAAe,EAAE;kBACtG,OAAO,IAAI;;;;YAKjB,OAAO,KAAK;UACd;QAAC;UAAAhL;UAAAC,OAEO,yCAAgC6D,OAAwB,EAAEkH,eAAuB,EAAE2B,iBAAyB;YAAA;YAClH;YACA,IAAI7I,OAAO,CAACiE,oBAAoB,IAAI,IAAI,IAAIjE,OAAO,CAACiE,oBAAoB,KAAKiD,eAAe,EAAE;cAC5F,IAAIlH,OAAO,CAACmE,sBAAsB,IAAI,IAAI,IAAInE,OAAO,CAACmE,sBAAsB,KAAK0E,iBAAiB,EAAE;gBAClG;gBACA;gBACA;gBACA,OAAO,CAAC7I,OAAO,CAACA,OAAO,CAACE,WAAW,CAAC+G,IAAI,CAAC,mBAAS;kBAAA,OAChDiC,MAAI,CAACxH,mBAAmB,CAACwF,eAAe,CAAC,CAACnF,UAAU,CAAC1B,UAAU,KAAKD,SAAS,CAACC,UAAU;gBAAA,EAAC;;;YAK/F,OAAO,KAAK;UACd;QAAC;UAAAnE;UAAAC,OAEO,uCAA8B6D,OAAwB,EAAEkH,eAAuB,EAAE2B,iBAAyB;YAChH,IAAI7I,OAAO,CAACkE,kBAAkB,IAAI,IAAI,IAAIlE,OAAO,CAACkE,kBAAkB,KAAKgD,eAAe,EAAE;cACxF;cACA,IAAIlH,OAAO,CAACoE,oBAAoB,IAAI,IAAI,IAAIpE,OAAO,CAACoE,oBAAoB,KAAKyE,iBAAiB,EAAE;gBAC9F,OAAO,IAAI;;;YAGf,OAAO,KAAK;UACd;QAAC;UAAA3M;UAAAC,OAEO,oCAA2B4F,UAA8B,EAAEtB,YAAoB;YACrF,OAAOsB,UAAU,CAACM,aAAa,CAAClC,IAAI,CAAC,mBAAS;cAAA,OAAIC,SAAS,CAACC,UAAU,KAAKI,YAAY;YAAA,EAAC;UAC1F;QAAC;QAAA;MAAA,GAEF;;;gBA/IEf;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;MAJKoI,qCAAoC,eANhD,0DAAU;QACTlK,QAAQ,EAAE,kCAAkC;QAC5CC,iNAA6D;;OAE9D,CAAC,GAEWiK,qCAAoC,CAgJhD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UClJYqB,wBAAuB;;;UAQlC,oBAAe,GAAc,EAAE;QAoHjC;QAAClN;UAAAC;UAAAC,OAlHC,uBAAW;YACT,IAAI,CAACiN,qBAAqB,EAAE,CAAC,CAAC;YAC9B,IAAI,CAACC,eAAe,GAAG,IAAI,CAACC,6BAA6B,CAAC,IAAI,CAACC,aAAa,CAACC,QAAQ,CAAC;UACxF;QAAC;UAAAtN;UAAAC,OAED,iCAAqB;YACnB,IAAMsN,YAAY,sBAAkB,IAAI,CAACF,aAAa,CAACC,QAAQ,CAAC;YAChE,IAAME,iBAAiB,GAAwB,EAAE;YAAC,4CAC5BD,YAAY;cAAAE;YAAA;cAAlC,uDAAoC;gBAAA,IAAzB3J,OAAO;gBAChB,IAAI4J,WAAW,GAAG5J,OAAO,CAACE,WAAW,CAAC/C,MAAM;gBAAC,4CACN6C,OAAO,CAACE,WAAW;kBAAA2J;gBAAA;kBAAA,+BAAE;oBAAA,IAAjDC,wBAAwB;oBACjC,IAAIA,wBAAwB,CAAC7H,cAAc,KAAK,gBAAgB,EAAE;sBAChE,IAAM8H,UAAU,GAAYN,YAAY,CAACtJ,IAAI,CAAC,WAAC;wBAAA,OAAI6J,CAAC,CAAC7G,SAAS,KAAK2G,wBAAwB,CAACzJ,UAAU;sBAAA,EAAC;sBACvG,IAAI,CAAC,CAAC0J,UAAU,EAAE;wBAChBH,WAAW,IAAIG,UAAU,CAAC7J,WAAW,CAAC/C,MAAM;;;mBAGjD;kBAPD;oBAAA8M;kBAAA;gBAOC;kBAAAC;gBAAA;kBAAAA;gBAAA;gBACDR,iBAAiB,CAACnN,IAAI,CAAC,CAACyD,OAAO,EAAE4J,WAAW,CAAC,CAAC;;YAC/C;cAAAO;YAAA;cAAAA;YAAA;YACDT,iBAAiB,CAAChF,IAAI,CAAC,UAACC,CAAC,EAAEC,CAAC;cAAA,OAAKA,CAAC,CAAC,CAAC,CAAC,GAAGD,CAAC,CAAC,CAAC,CAAC;YAAA,EAAC;YAC7C,KAAK,IAAI9B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4G,YAAY,CAACtM,MAAM,EAAE0F,CAAC,EAAE,EAAE;cAC5C,IAAI,CAAC0G,aAAa,CAACC,QAAQ,CAAC3G,CAAC,CAAC,GAAG6G,iBAAiB,CAAC7G,CAAC,CAAC,CAAC,CAAC,CAAC;;UAE5D;QAAC;UAAA3G;UAAAC,OAEO,6BAAoBiO,QAAQ,EAAEC,QAAQ;YAAA;YAC5C,IAAIC,YAAY,GAAG,CAAC;YAAC,6CACYF,QAAQ,CAAClK,WAAW;cAAAqK;YAAA;cAAA,+BAAE;gBAAA,IAA5CC,kBAAkB;gBAC3B;gBACA,IAAIA,kBAAkB,CAACvI,cAAc,KAAK,gBAAgB,EAAE;kBAC1D;kBACA,IAAIoI,QAAQ,CAAClH,SAAS,KAAKqH,kBAAkB,CAACnK,UAAU,EAAE;oBACxDiK,YAAY,IAAID,QAAQ,CAACnK,WAAW,CAAC/C,MAAM;mBAC5C,MAAM;oBACL,IAAM4M,UAAU,GAAYU,MAAI,CAAClB,aAAa,CAACC,QAAQ,CAACrJ,IAAI,CAC1D,iBAAO;sBAAA,OAAIH,OAAO,CAACmD,SAAS,KAAKqH,kBAAkB,CAACnK,UAAU;oBAAA,EAC/D;oBACD,IAAI,CAAC,CAAC0J,UAAU,EAAE;sBAChB,IAAMW,0BAA0B,GAAeL,QAAQ,CAACnK,WAAW,CAACC,IAAI,CACtE,oBAAU;wBAAA,OAAI4B,UAAU,CAAC1B,UAAU,KAAKmK,kBAAkB,CAACnK,UAAU;sBAAA,EACtE;sBACD,IAAI,CAAC,CAACqK,0BAA0B,EAAE;wBAChC;wBACA;wBACAJ,YAAY,IAAIP,UAAU,CAAC7J,WAAW,CAAC/C,MAAM;uBAC9C,MAAM;wBACL;wBACA;wBAAA,6CACmC4M,UAAU,CAAC7J,WAAW;0BAAAyK;wBAAA;0BAAzD,0DAA2D;4BAAA,IAAhDC,oBAAoB;4BAAA,6CACIP,QAAQ,CAACnK,WAAW;8BAAA2K;4BAAA;8BAArD,0DAAuD;gCAAA,IAA5CC,kBAAkB;gCAC3B,IAAIF,oBAAoB,CAACvK,UAAU,KAAKyK,kBAAkB,CAACzK,UAAU,EAAE;kCACrEiK,YAAY,EAAE;;;4BAEjB;8BAAAS;4BAAA;8BAAAA;4BAAA;;wBACF;0BAAAC;wBAAA;0BAAAA;wBAAA;;;;iBAIR,MAAM;kBACL;kBAAA,6CACiCX,QAAQ,CAACnK,WAAW;oBAAA+K;kBAAA;oBAAA,+BAAE;sBAAA,IAA5CH,kBAAkB;sBAC3B;sBACA,IAAIA,kBAAkB,CAAC7I,cAAc,KAAK,gBAAgB,EAAE;wBAC1D,IAAM8H,WAAU,GAAYU,MAAI,CAAClB,aAAa,CAACC,QAAQ,CAACrJ,IAAI,CAC1D,iBAAO;0BAAA,OAAIH,OAAO,CAACmD,SAAS,KAAK2H,kBAAkB,CAACzK,UAAU;wBAAA,EAC/D;wBACD,IAAI,CAAC,CAAC0J,WAAU,EAAE;0BAChB;0BACA;0BAAA,6CACmCA,WAAU,CAAC7J,WAAW;4BAAAgL;0BAAA;4BAAzD,0DAA2D;8BAAA,IAAhDN,qBAAoB;8BAC7B,IAAIA,qBAAoB,CAACvK,UAAU,KAAKmK,kBAAkB,CAACnK,UAAU,EAAE;gCACrEiK,YAAY,EAAE;;;0BAEjB;4BAAAa;0BAAA;4BAAAA;0BAAA;;uBAEJ,MAAM,IAAIX,kBAAkB,CAACnK,UAAU,KAAKyK,kBAAkB,CAACzK,UAAU,EAAE;wBAC1E;wBACAiK,YAAY,EAAE;;qBAEjB;oBAnBD;sBAAAc;oBAAA;kBAmBC;oBAAAC;kBAAA;oBAAAA;kBAAA;;eAEJ;cAtDD;gBAAAC;cAAA;YAsDC;cAAAC;YAAA;cAAAA;YAAA;YACD,OAAOjB,YAAY;UACrB;QAAC;UAAApO;UAAAC,OAEO,uCAA8BqP,YAAuB;YAC3D,IAAMC,cAAc,GAAgB,EAAE;YACtC;YAAA,6CACsBD,YAAY;cAAAE;YAAA;cAAlC,0DAAoC;gBAAA,IAAzB1L,QAAO;gBAChB,IAAI2L,sBAAsB,GAAG,KAAK;gBAAC,6CACNF,cAAc;kBAAAG;gBAAA;kBAA3C,0DAA6C;oBAAA,IAAlCC,eAAc;oBACvB,IAAMC,eAAe,GAAGD,eAAc,CAAC,CAAC,CAAC;oBACzC,IAAME,UAAU,GAAG,IAAI,CAACC,mBAAmB,CAAChM,QAAO,EAAE8L,eAAe,CAAC;oBACrE,IAAIC,UAAU,IAAI,CAAC,EAAE;sBACnBF,eAAc,CAACtP,IAAI,CAACyD,QAAO,CAAC;sBAC5B2L,sBAAsB,GAAG,IAAI,CAAC,CAAC;;;gBAElC;kBAAAM;gBAAA;kBAAAA;gBAAA;gBACD,IAAI,CAACN,sBAAsB,EAAE;kBAC3BF,cAAc,CAAClP,IAAI,CAAC,CAACyD,QAAO,CAAC,CAAC,CAAC,CAAC;;;YAEnC;cAAAkM;YAAA;cAAAA;YAAA;YACD,IAAMC,MAAM,GAAc,EAAE;YAC5B,oCAA6BV,cAAc,uCAAE;cAAxC,IAAMI,cAAc;cAAA,6CACDA,cAAc;gBAAAO;cAAA;gBAApC,0DAAsC;kBAAA,IAA3BpM,OAAO;kBAChB,IAAI,CAACmM,MAAM,CAAC1Q,QAAQ,CAACuE,OAAO,CAAC,EAAE;oBAC7BmM,MAAM,CAAC5P,IAAI,CAACyD,OAAO,CAAC;;;cAEvB;gBAAAqM;cAAA;gBAAAA;cAAA;;YAEH,OAAOF,MAAM;UACf;QAAC;QAAA;MAAA,GAEF;;;gBA3HEpO;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;gBACLA;QAAK;;MANKoL,wBAAuB,eALnC,0DAAU;QACTvL,QAAQ,EAAE,oBAAoB;QAC9BC,mMAA+C;;OAEhD,CAAC,GACWsL,wBAAuB,CA4HnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UC/HYmD,0BAAyB;QAQpC;UAAAvQ;UAHU,iBAAY,GAAyB,IAAIgC,uDAAY,EAAU;QAIzE;QAAC9B;UAAAC;UAAAC,OAED,oBAAQ;YACN,IAAI,CAACoQ,gBAAgB,EAAE;UACzB;QAAC;UAAArQ;UAAAC,OAGD,qBAAYmF,OAAsB;YAChC,IAAI,CAACiL,gBAAgB,EAAE;UACzB;QAAC;UAAArQ;UAAAC,OAEM,4BAAgB;YACrB,IAAI8J,KAAa;YACjB,IAAIvK,GAAW;YACf,IAAI,CAAC8Q,UAAU,GAAG,EAAE;YACpB,IAAI,IAAI,CAACC,cAAc,GAAG,CAAC,EAAE;cAC3BxG,KAAK,GAAG,CAAC;cACTvK,GAAG,GAAG,IAAI,CAAC+Q,cAAc;aAE1B,MAAM;cACL,IAAI,IAAI,CAACC,iBAAiB,KAAK,CAAC,IAAI,IAAI,CAACA,iBAAiB,KAAK,CAAC,EAAE;gBAChEzG,KAAK,GAAG,CAAC;gBACTvK,GAAG,GAAG,CAAC;eACR,MAAM,IAAI,IAAI,CAACgR,iBAAiB,KAAK,IAAI,CAACD,cAAc,IAAI,IAAI,CAACC,iBAAiB,KAAK,IAAI,CAACD,cAAc,GAAG,CAAC,EAAE;gBAC/GxG,KAAK,GAAG,IAAI,CAACwG,cAAc,GAAG,CAAC;gBAC/B/Q,GAAG,GAAG,IAAI,CAAC+Q,cAAc;eAC1B,MAAM;gBACLxG,KAAK,GAAG,IAAI,CAACyG,iBAAiB,GAAG,CAAC;gBAClChR,GAAG,GAAG,IAAI,CAACgR,iBAAiB,GAAG,CAAC;;;YAGpC,OAAOzG,KAAK,IAAIvK,GAAG,EAAE;cACnB,IAAIuK,KAAK,KAAK,IAAI,CAACyG,iBAAiB,EAAE;gBACpC,IAAI,CAACC,WAAW,CAACpQ,IAAI,CAAC,CAAC,CAAC,IAAI,CAACmQ,iBAAiB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;eAC1D,MAAM;gBACL,IAAI,CAACC,WAAW,CAACpQ,IAAI,CAAC,CAAC,CAAC0J,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;;cAE3CA,KAAK,EAAE;;UAEX;QAAC;UAAA/J;UAAAC,OAEM,wBAAY;YACjB,IAAI,CAACyQ,YAAY,CAAChQ,IAAI,CAAC,CAAC,CAAC;UAC3B;QAAC;UAAAV;UAAAC,OAEM,uBAAW;YAChB,IAAI,CAACyQ,YAAY,CAAChQ,IAAI,CAAC,IAAI,CAACiQ,aAAa,CAAC;UAC5C;QAAC;UAAA3Q;UAAAC,OAEM,iBAAQ2Q,SAAiB;YAC9B,IAAI,CAACF,YAAY,CAAChQ,IAAI,CAACkQ,SAAS,CAAC;UACnC;QAAC;UAAA5Q;UAAAC,OAEM,2BAAe;YACpB,IAAI,CAACyQ,YAAY,CAAChQ,IAAI,CAAC,IAAI,CAACmQ,gBAAgB,GAAG,CAAC,CAAC;UACnD;QAAC;UAAA7Q;UAAAC,OAEM,uBAAW;YAChB,IAAI,CAACyQ,YAAY,CAAChQ,IAAI,CAAC,IAAI,CAACmQ,gBAAgB,GAAG,CAAC,CAAC;UACnD;QAAC;UAAA7Q;UAAAqB,KAED,eAAiB;YACf,OAAO,IAAI,CAACkP,cAAc;UAC5B,CAAC;UAAAhP,KAED,aACkBtB,KAAK;YACrB,IAAI,CAACsQ,cAAc,GAAGtQ,KAAK;UAC7B;QAAC;UAAAD;UAAAqB,KAED,eAAoB;YAClB,OAAO,IAAI,CAACmP,iBAAiB;UAC/B,CAAC;UAAAjP,KAED,aACqBtB,KAAK;YACxB,IAAI,CAACuQ,iBAAiB,GAAGvQ,KAAK;UAChC;QAAC;UAAAD;UAAAqB,KAED,eAAc;YACZ,OAAO,IAAI,CAACoP,WAAW;UACzB,CAAC;UAAAlP,KAED,aAAetB,KAAK;YAClB,IAAI,CAACwQ,WAAW,GAAGxQ,KAAK;UAC1B;QAAC;QAAA;MAAA,GACF;;;;;;gBA1FE4B;QAAM;;gBAqENA;QAAK;;gBASLA;QAAK;;MAnFKuO,0BAAyB,eALrC,0DAAU;QACT1O,QAAQ,EAAE,sBAAsB;QAChCC,qMAAiD;;OAElD,CAAC,GACWyO,0BAAyB,CA+FrC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCvFYU,wBAAuB;QAclC,iCAAoBC,KAAqB,EAAUC,MAAc,EAC7C7L,oBAA0C,EAAU8L,YAAmB,EACvErR,sBAAwC,EAAUsR,mBAAwC;UAAArR;UAF1F,UAAK,GAALkR,KAAK;UAA0B,WAAM,GAANC,MAAM;UACrC,yBAAoB,GAApB7L,oBAAoB;UAAgC,iBAAY,GAAZ8L,YAAY;UAChE,2BAAsB,GAAtBrR,sBAAsB;UAA4B,wBAAmB,GAAnBsR,mBAAmB;UAfzF,cAAS,GAAG,WAAW;UACvB,2BAAsB,GAAG,wBAAwB;UAKzC,cAAS,GAAG,EAAE;UAId,mCAA8B,GAAiB,EAAE;QAMzD;QAACnR;UAAAC;UAAAC,OAED,oBAAQ;YAAA;YACN,IAAI,CAACgR,YAAY,CAACE,QAAQ,CAAC,0BAA0B,CAAC;YACtD,IAAI,CAACC,8BAA8B,GAAG,EAAE;YACxC,IAAI,CAACL,KAAK,CACPM,WAAW,CACX7K,SAAS,CAAC,qBAAW,EAAG;cACvB8K,MAAI,CAACC,MAAM,GAAGF,WAAW,CAAC,OAAO,CAAC;cAClCC,MAAI,CAACtQ,aAAa,GAAGqQ,WAAW,CAAC,SAAS,CAAC,GAAGA,WAAW,CAAC,SAAS,CAAC,CAACG,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;cACpFF,MAAI,CAACpQ,cAAc,GAAGmQ,WAAW,CAAC,SAAS,CAAC,GAAGA,WAAW,CAAC,SAAS,CAAC,CAACG,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;cACrFF,MAAI,CAACnQ,qBAAqB,GAAGkQ,WAAW,CAAC,gBAAgB,CAAC,GAAGA,WAAW,CAAC,gBAAgB,CAAC,CAACG,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE;cAC1GF,MAAI,CAACd,iBAAiB,GAAGa,WAAW,CAAC,MAAM,CAAC,GAAGI,MAAM,CAACJ,WAAW,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC;cAC9E;cACA;cACAC,MAAI,CAACI,qBAAqB,EAAE;cAC5BC,QAAQ,CAACC,IAAI,CAACC,SAAS,GAAG,CAAC;YAC7B,CAAC,CAAC;YACJ,IAAI,CAACd,KAAK,CAACe,QAAQ,CAACtL,SAAS,CAAC,kBAAQ,EAAG;cACvC,IAAIsL,QAAQ,KAAKR,MAAI,CAACS,sBAAsB,EAAE;gBAC5CT,MAAI,CAACU,WAAW,GAAGV,MAAI,CAACS,sBAAsB;eAC/C,MAAM,IAAID,QAAQ,KAAKR,MAAI,CAACW,SAAS,EAAE;gBACtCX,MAAI,CAACU,WAAW,GAAGV,MAAI,CAACW,SAAS;;YAErC,CAAC,CAAC;UACJ;QAAC;UAAAjS;UAAAC,OAED,2BAAe,CACf;QAAC;UAAAD;UAAAC,OAEO,iCAAqB;YAAA;YAC3B,IAAI,CAACkF,oBAAoB,CAAC+M,WAAW,CAAC,IAAI,CAACC,KAAK,EAAE,IAAI,CAAC/R,YAAY,EAAE,IAAI,CAACO,aAAa,EACrF,IAAI,CAACE,oBAAoB,EAAE,IAAI,CAACgQ,gBAAgB,EAAE,IAAI,CAACuB,QAAQ,CAAC,CAAC5L,SAAS,CAAC,uBAAa,EAAG;cAC3F6L,MAAI,CAAChF,aAAa,GAAGA,aAAa;cAClCgF,MAAI,CAACjB,8BAA8B,GAAG,EAAE;cACxC,IAAIiB,MAAI,CAAChF,aAAa,CAACiF,oBAAoB,KAAK,CAAC,EAAE;gBACjDD,MAAI,CAAC1B,aAAa,GAAGjJ,IAAI,CAAC6K,IAAI,CAAClF,aAAa,CAACiF,oBAAoB,GAAGD,MAAI,CAACD,QAAQ,CAAC;gBAClF,KAAK,IAAIzL,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG0G,aAAa,CAACC,QAAQ,CAACrM,MAAM,EAAE0F,CAAC,EAAE,EAAE;kBAAA,6CAC9B0G,aAAa,CAACC,QAAQ,CAAC3G,CAAC,CAAC,CAAC3C,WAAW;oBAAAwO;kBAAA;oBAAA,+BAAE;sBAAA,IAApDtO,SAAS;sBAClB,IAAI,CAACmO,MAAI,CAACjB,8BAA8B,CAACrG,IAAI,CAAC,oBAAU;wBAAA,OAAIlF,UAAU,CAAC1B,UAAU,KAAKD,SAAS,CAACC,UAAU;sBAAA,EAAC,EAAE;wBAC3GkO,MAAI,CAACjB,8BAA8B,CAAC/Q,IAAI,CACtC,IAAIoS,sFAAU,CACZvO,SAAS,CAACC,UAAU,EACpBD,SAAS,CAACqG,cAAc,EACxBrG,SAAS,CAAC5E,IAAI,EACd4E,SAAS,CAACwO,WAAW,EACrBxO,SAAS,CAAC6B,cAAc,EACxB7B,SAAS,CAACX,YAAY,CAAC,CAAC;;qBAE/B;oBAXD;sBAAAoP;oBAAA;kBAWC;oBAAAC;kBAAA;oBAAAA;kBAAA;;;cAGLC,qHAAyB,EAAE;YAC7B,CAAC,CAAC;UACJ;UAEA;;;QAAA;UAAA7S;UAAAC,OAGQ,sBAAU;YAChB,IAAMoR,WAAW,GAAqB,EAAE;YACxCA,WAAW,CAAC,OAAO,CAAC,GAAG,IAAI,CAACE,MAAM;YAClCF,WAAW,CAAC,MAAM,CAAC,GAAG,IAAI,CAACb,iBAAiB;YAC5C,IAAI,IAAI,CAACxP,aAAa,KAAK8R,SAAS,IAAI,IAAI,CAAC9R,aAAa,CAACC,MAAM,KAAK,CAAC,EAAE;cACvEoQ,WAAW,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC0B,uBAAuB,CAAC,IAAI,CAAC3S,YAAY,CAAC;;YAE1E,IAAI,IAAI,CAACc,cAAc,KAAK4R,SAAS,IAAI,IAAI,CAAC5R,cAAc,CAACD,MAAM,KAAK,CAAC,EAAE;cACzEoQ,WAAW,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC0B,uBAAuB,CAAC,IAAI,CAAC7R,cAAc,CAAC;;YAE5E,IAAI,IAAI,CAACC,qBAAqB,KAAK2R,SAAS,IAAI,IAAI,CAAC3R,qBAAqB,CAACF,MAAM,KAAK,CAAC,EAAE;cACvFoQ,WAAW,CAAC,gBAAgB,CAAC,GAAG,IAAI,CAAC0B,uBAAuB,CAAC,IAAI,CAAC5R,qBAAqB,CAAC;;YAE1F,IAAI,CAAC6P,MAAM,CAACgC,QAAQ,CAAC,EAAE,EAAE;cACvB3B,WAAW,EAAXA,WAAW;cACXS,QAAQ,EAAE,IAAI,CAACE;aAChB,CAAC;YACFa,qHAAyB,EAAE;YAC3B;YACA,IAAMI,WAAW,GAAG,IAAI,CAACC,cAAc,EAAE;YACzC,IAAI,CAAC,GAAGD,WAAW,EAAE;cACnB,IAAI,CAACrT,sBAAsB,CAACuT,oBAAoB,CAACF,WAAW,CAAC/P,QAAQ,EAAE,CAAC;;UAE5E;QAAC;UAAAlD;UAAAC,OAEO,iCAAwBC,MAAgB;YAC9C,OAAOA,MAAM,CAACgD,QAAQ,EAAE,CAACkQ,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC;UAC7C;QAAC;UAAApT;UAAAC,OAEO,0BAAc;YACpB,OAAO,IAAI,CAACe,aAAa,CAACC,MAAM,GAAG,IAAI,CAACE,qBAAqB,CAACF,MAAM,GAAG,IAAI,CAACC,cAAc,CAACD,MAAM;UACnG;UAEA;;;;QAAA;UAAAjB;UAAAC,OAIO,sBAAa2Q,SAAiB;YACnC,IAAI,CAACC,gBAAgB,GAAGD,SAAS;YACjC,IAAI,CAACyC,UAAU,EAAE;UACnB;QAAC;UAAArT;UAAAC,OAEM,6BAAiB;YACtB,IAAI,CAACG,YAAY,GAAG,EAAE;YACtB,IAAI,CAACO,aAAa,GAAG,EAAE;YACvB,IAAI,CAACE,oBAAoB,GAAG,EAAE;YAC9B,IAAI,CAACgQ,gBAAgB,GAAG,CAAC;YACzB,IAAI,CAACwC,UAAU,EAAE;UACnB;QAAC;UAAArT;UAAAC,OAEM,+BAAsBC,MAAgB;YAC3C,IAAI,CAACE,YAAY,GAAGF,MAAM;YAC1B,IAAI,CAAC2Q,gBAAgB,GAAG,CAAC;YACzB,IAAI,CAACwC,UAAU,EAAE;UACnB;QAAC;UAAArT;UAAAC,OAEM,uCAA8BC,MAAgB;YACnD,IAAI,CAACS,aAAa,GAAGT,MAAM;YAC3B,IAAI,CAAC2Q,gBAAgB,GAAG,CAAC;YACzB,IAAI,CAACwC,UAAU,EAAE;UACnB;QAAC;UAAArT;UAAAC,OAEM,uCAA8BC,MAAgB;YACnD,IAAI,CAACW,oBAAoB,GAAGX,MAAM;YAClC,IAAI,CAAC2Q,gBAAgB,GAAG,CAAC;YACzB,IAAI,CAACwC,UAAU,EAAE;UACnB;QAAC;UAAArT;UAAAqB,KAED,eAAS;YACP,OAAO,IAAI,CAACkQ,MAAM;UACpB,CAAC;UAAAhQ,KAED,aAAUtB,KAAK;YACb,IAAI,CAACsR,MAAM,GAAGtR,KAAK;UACrB;QAAC;UAAAD;UAAAqB,KAED,eAAoB;YAClB,OAAO,IAAI,CAACmP,iBAAiB;UAC/B,CAAC;UAAAjP,KAED,aAAqBtB,KAAa;YAChC,IAAI,CAACuQ,iBAAiB,GAAGvQ,KAAK;UAChC;QAAC;UAAAD;UAAAqB,KAED,eAAiB;YACf,OAAO,IAAI,CAACiS,cAAc;UAC5B,CAAC;UAAA/R,KAED,aAAkBtB,KAA0B;YAC1C,IAAI,CAACqT,cAAc,GAAGrT,KAAK;YAC3B,IAAI,CAACsT,mBAAmB,EAAE,CAAC,CAAC;UAC9B;QAAC;UAAAvT;UAAAqB,KAED,eAAiB;YACf,OAAO,IAAI,CAACkP,cAAc;UAC5B,CAAC;UAAAhP,KAED,aAAkBtB,KAAa;YAC7B,IAAI,CAACsQ,cAAc,GAAGtQ,KAAK;UAC7B;QAAC;UAAAD;UAAAqB,KAED,eAAY;YACV,OAAO,IAAI,CAACmS,SAAS;UACvB;QAAC;UAAAxT;UAAAqB,KAED,eAAgB;YACd,OAAO,IAAI,CAACL,aAAa;UAC3B,CAAC;UAAAO,KAED,aAAiBtB,KAAe;YAC9B,IAAI,CAACe,aAAa,GAAGf,KAAK;UAC5B;QAAC;UAAAD;UAAAqB,KAED,eAAiB;YACf,OAAO,IAAI,CAACH,cAAc;UAC5B,CAAC;UAAAK,KAED,aAAkBtB,KAAe;YAC/B,IAAI,CAACiB,cAAc,GAAGjB,KAAK;UAC7B;QAAC;UAAAD;UAAAqB,KAED,eAAwB;YACtB,OAAO,IAAI,CAACF,qBAAqB;UACnC,CAAC;UAAAI,KAED,aAAyBtB,KAAe;YACtC,IAAI,CAACkB,qBAAqB,GAAGlB,KAAK;UACpC;QAAC;UAAAD;UAAAqB,KAED,eAAwC;YACtC,OAAO,IAAI,CAAC+P,8BAA8B;UAC5C;QAAC;UAAApR;UAAAC,OAED,uBAAW;YACT,IAAI,CAAC+R,WAAW,GAAG,IAAI,CAACC,SAAS;YACjC,IAAI,CAACf,mBAAmB,CAACuC,4BAA4B,EAAE;YACvD,IAAI,CAACJ,UAAU,EAAE;UACnB;QAAC;UAAArT;UAAAC,OAED,mCAAuB;YACrB,IAAI,CAAC+R,WAAW,GAAG,IAAI,CAACD,sBAAsB;YAC9C,IAAI,CAACsB,UAAU,EAAE;YACjB,IAAI,CAACnC,mBAAmB,CAACwC,iBAAiB,EAAE;UAC9C;QAAC;UAAA1T;UAAAC,OAED,+BAAmB;YACjB,IAAI,IAAI,CAACqT,cAAc,CAAChG,QAAQ,CAACrM,MAAM,KAAK,CAAC,EAAE;cAC7C,IAAM0S,SAAS,GAAG,IAAI,CAACL,cAAc,CAAChG,QAAQ,CAAC,CAAC,CAAC,CAACrG,SAAS;cAC3D,IAAI,CAAC,CAAC0M,SAAS,EAAE;gBACf;gBACA,IAAI,CAAC3C,MAAM,CAAC4C,kBAAkB,CAACC,gBAAgB,GAAG;kBAChD,OAAO,KAAK;gBACd,CAAC;gBACD,IAAI,CAAC7C,MAAM,CAACgC,QAAQ,CAAC,CAAC,UAAU,EAAEW,SAAS,CAAC,CAAC;;;YAIjD,IAAI,CAAC,IAAI,CAAC3B,WAAW,EAAE;cACrB;cACA;cACA,IAAI,CAAC8B,WAAW,EAAE;;UAEtB;QAAC;QAAA;MAAA,GACF;;;gBA7POC;QAAc;gBAAoBA;QAAM;gBAExC9J;QAAoB;gBAEpB+J;QAAK;gBACLC;QAAgB;gBAEhBC;QAAmB;;MAOdpD,wBAAuB,eALnC,0DAAU;QACTpP,QAAQ,EAAE,oBAAoB;QAC9BC,mMAA+C;;OAEhD,CAAC,GACWmP,wBAAuB,CA+OnC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;UCjMYqD,qBAAoB;QAAAtU;MAAA,EAChC;MADYsU,qBAAoB,eA3BhC,0DAAS;QACRC,OAAO,EAAE,CAACC,mEAAqB,CAAC,CAC9B;UAACC,IAAI,EAAE,EAAE;UAAEpQ,SAAS,EAAEqQ;QAAuB,CAAC,CAC/C,CAAC,EACAC,0DAAY,EACZC,sHAAqB,EAAEC,yDAAc,CACtC;QACDC,OAAO,EAAE,CACPC,iHAAuB,CACxB;QACDC,YAAY,EAAE,CAACN,+EAAuB,EACpCO,sFAAoB,EACpBC,4FAAsB,EACtBC,qGAAyB,EACzBC,qGAAyB,EACzBL,iHAAuB,EACvBM,wHAAoB,EACpBC,wJAA8B,EAC9BC,0KAA4B,EAC5BC,qMAAoC,EACpCC,sMAAqC,EACrCC,2KAA4B,EAC5BC,mMAAoC,EACpCC,6HAAgC,EAChCC,4IAA+B;OAElC,CAAC,GACWvB,qBAAoB,CAChC;;;;;;;;;;;;;;;;;;UC9DYwB,WAAU;QAQrB,qBAAYxR,UAAkB,EAClBoG,cAAsB,EACtBjL,IAAY,EACZoT,WAAmB,EACnB3M,cAAsB,EAAExC,YAAoB;UAAA1D;UACtD,IAAI,CAAC+V,WAAW,GAAGzR,UAAU;UAC7B,IAAI,CAAC0R,eAAe,GAAGtL,cAAc;UACrC,IAAI,CAACuL,KAAK,GAAGxW,IAAI;UACjB,IAAI,CAACyW,YAAY,GAAGrD,WAAW;UAC/B,IAAI,CAACsD,eAAe,GAAGjQ,cAAc;UACrC,IAAI,CAACkQ,aAAa,GAAG1S,YAAY;QACnC;QAACxD;UAAAC;UAAAqB,KAED,eAAc;YACZ,OAAO,IAAI,CAACuU,WAAW;UACzB;QAAC;UAAA5V;UAAAqB,KAED,eAAkB;YAChB,OAAO,IAAI,CAACwU,eAAe;UAC7B;QAAC;UAAA7V;UAAAqB,KAED,eAAQ;YACN,OAAO,IAAI,CAACyU,KAAK;UACnB;QAAC;UAAA9V;UAAAqB,KAED,eAAe;YACb,OAAO,IAAI,CAAC0U,YAAY;UAC1B;QAAC;UAAA/V;UAAAqB,KAED,eAAkB;YAChB,OAAO,IAAI,CAAC2U,eAAe;UAC7B;QAAC;UAAAhW;UAAAqB,KAED,eAAgB;YACd,OAAO,IAAI,CAAC4U,aAAa;UAC3B;QAAC;QAAA;MAAA;;;;;;;;;;MC3CH;MAAAC,iCAAe,84GAA84G;;;;;;;;;;;MCA75G;MAAAA,iCAAe,6uBAA6uB;;;;;;;;;;;MCA5vB;MAAAA,iCAAe,sqEAAsqE;;;;;;;;;;;MCArrE;MAAAA,iCAAe,4hCAA4hC;;;;;;;;;;;MCA3iC;MAAAA,iCAAe,kvBAAkvB;;;;;;;;;;;MCAjwB;MAAAA,iCAAe,0xFAA0xF;;;;;;;;;;;MCAzyF;MAAAA,iCAAe,oyJAAoyJ;;;;;;;;;;;MCAnzJ;MAAAA,iCAAe,kUAAkU;;;;;;;;;;;MCAjV;MAAAA,iCAAe,64CAA64C;;;;;;;;;;;MCA55C;MAAAA,iCAAe,0IAA0I;;;;;;;;;;;MCAzJ;MAAAA,iCAAe,s8BAAs8B;;;;;;;;;;;MCAr9B;MAAAA,iCAAe,kjBAAkjB;;;;;;;;;;;MCAjkB;MAAAA,iCAAe,2wBAA2wB;;;;;;;;;;;MCA1xB;MAAAA,iCAAe,ghCAAghC;;;;;;;;;;;MCA/hC;MAAAA,iCAAe,+yHAA+yH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["interactorTypeIcon","type","organismIcon","organism","formattedName","formatOrganismName","name","includes","end","indexOf","substring","ComplexFilterComponent","googleAnalyticsService","_classCallCheck","_angular_core__WEBPACK_IMPORTED_MODULE_4__","_createClass","key","value","filter","status","spicesFilter","push","fireAddedFilterEvent","splice","fireRemovedFilterEvent","onSpicesFilterChanged","emit","bioRoleFilter","onBiologicalRoleFilterChanged","interactorTypeFilter","onInteractorTypeFilterChanged","onResetAllFilters","_spicesFilter","length","_bioRoleFilter","_interactorTypeFilter","element","get","_facets","set","facet","_shared_google_analytics_service_analytics_service__WEBPACK_IMPORTED_MODULE_2__","selector","template","ComplexListComponent","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ComplexNavigatorButtonsComponent","typeOfSorting","interactorsSortingChange","typeOfDisplay","compactDisplay","detailedDisplay","interactorTypeDisplay","organismIconDisplay","changesEmitter","IDDisplay","organismIconDisplayChange","interactorTypeDisplayChange","IDDisplayChange","ComplexNavigatorRatingComponent","analyticsService","rating","selectedRating","console","log","rateComplexNavigator","toString","visible","ComplexNavigatorComponent","TableHeaderComponent","interactorsSorting","organismName","_angular_core__WEBPACK_IMPORTED_MODULE_3__","fetchValuesFromStoichiometry","stoichiometry","pattern","match","findInteractorInComplex","complex","componentId","interactors","find","component","identifier","getStoichiometry","stochiometry","stoichiometryOfInteractors","interactorId","formatStoichiometryValues","parseStoichiometryValues","matchedStoichiometry","minValue","parseInt","maxValue","isNaN","parsedStoichiometry","EnrichedInteractor","EnrichedComplex","TableInteractorColumnComponent","complexPortalService","changes","enrichInteractors","classifyInteractors","calculateAllStartAndEndIndexes","enrichedInteractors","classifyInteractorsByType","classifyInteractorsByOrganism","classifyInteractorsByOccurrence","_step","interactor","isSubComplex","interactorType","newEnrichedInteractor","hidden","expanded","subComponents","partOfComplex","timesAppearing","_this","loadSubInteractors","subscribe","_loop","_iterator","i","j","subInteractorIds","map","foundComplex","complexes","complexAC","getSimplifiedComplex","pipe","enrichedComplexes","_step2","calculateStartAndEndIndexes","_iterator2","valueA","valueB","Math","min","max","subComponentsToCheck","enrichedComplex","startInteractorIndex","endInteractorIndex","startSubComponentIndex","endSubComponentIndex","getMinValue","getMaxValue","forEach","subComponent","k","sort","a","b","localeCompare","rangeOfInteractorOrganism","rangeOfInteractorType","_step3","oneInteractor","_step4","_step5","complexesInteractors","stoichiometryValue","_iterator5","_step6","oneSubInteractor","oneEnrichedInteractor","_this2","enrichedInteractor","_loop2","_iterator6","_iterator4","_iterator3","ranges","start","oneType","_shared_service_complex_portal_service__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","TableInteractorExternalLinkComponent","showExternalLink","isMainInteractor","externalLinkVisible","identifierLink","TableInteractorNameComponent","interactorOrganismIcon","interactorOrganism","isVisible","TableInteractorStoichiometryComponent","TableMainInteractorComponent","_complex_navigator_utils__WEBPACK_IMPORTED_MODULE_2__","some","interactorIndex","doesLineCrossInteractorCell","doesLineEndOnInteractorCell","doesLineStartOnInteractorCell","matches","findInteractorsInSubComplex","stoichiometryValues","addedStoichiometryValues","_this3","components","_step7","_iterator7","TableSubcomponentInteractorComponent","displayTopLineClass","displayTopLineClassExpanded","interactorInComplex","el","interactorStoichiometryText","interactorStoichiometryValue","interactorInSubComplex","findInteractorInExpandedSubComplex","subComplexInteractorStoichiometryText","getStoichiometryInExpandedSubComplex","subComplexInteractorStoichiometryValue","stoichiometryOfInteractorsExpandable","displayBottomLineClass","displayBottomLineClassExpanded","subComponentIndex","doesLineCrossSubcomponentCell","doesLineEndOnSubcomponentCell","doesLineStartOnSubcomponentCell","findInteractorInSubcomplex","_this4","TableStructureComponent","classifyComplexesSize","sortedComplexes","classifyComplexesSimilarities","complexSearch","elements","searchResult","complexesAndSizes","_step8","totalLength","_step9","complexInteractorChecked","subComplex","c","_loop3","_iterator9","_iterator8","complex1","complex2","similarities","_step10","complex1Interactor","_this5","complex2MatchingInteractor","_step11","subComplexInteractor","_step12","complex2Interactor","_iterator12","_iterator11","_step13","_step14","_iterator14","_loop5","_iterator13","_loop4","_iterator10","bigComplexes","classifiedList","_step15","similarInteractorFound","_step17","classification","comparedComplex","similarity","calculateSimilarity","_iterator17","_iterator15","unique","_step16","_iterator16","ComplexPaginatorComponent","updatePaginatior","pagination","_lastPageIndex","_currentPageIndex","_pagination","onPageChange","lastPageIndex","pageIndex","currentPageIndex","ComplexResultsComponent","route","router","titleService","notificationService","setTitle","_allInteractorsInComplexSearch","queryParams","_this6","_query","split","Number","requestComplexResults","document","body","scrollTop","fragment","COMPLEX_NAVIGATOR_VIEW","DisplayType","LIST_VIEW","findComplex","query","pageSize","_this7","totalNumberOfResults","ceil","_step18","_shared_model_complex_results_interactor_model__WEBPACK_IMPORTED_MODULE_5__","description","_loop6","_iterator18","_shared_loading_indicators_progress_bar_progress_bar_component__WEBPACK_IMPORTED_MODULE_3__","undefined","prepareFiltersForParams","navigate","filterCount","getFilterCount","fireMultiFilterEvent","replace","reloadPage","_complexSearch","setFirstDisplayType","_pageSize","complexNavigatorAnnouncement","closeAnnouncement","complexId","routeReuseStrategy","shouldReuseRoute","setListView","_angular_router__WEBPACK_IMPORTED_MODULE_7__","_angular_platform_browser__WEBPACK_IMPORTED_MODULE_8__","_shared_google_analytics_service_analytics_service__WEBPACK_IMPORTED_MODULE_4__","_shared_notification_service_notification_service__WEBPACK_IMPORTED_MODULE_6__","ComplexResultsModule","imports","_angular_router__WEBPACK_IMPORTED_MODULE_17__","path","_complex_results_component__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_18__","_shared_loading_indicators_progress_spinner_progress_spinner_module__WEBPACK_IMPORTED_MODULE_4__","ngx_markdown__WEBPACK_IMPORTED_MODULE_19__","exports","_complex_navigator_table_structure_table_structure_component__WEBPACK_IMPORTED_MODULE_6__","declarations","_complex_list_complex_list_component__WEBPACK_IMPORTED_MODULE_3__","_complex_filter_complex_filter_component__WEBPACK_IMPORTED_MODULE_2__","_complex_paginator_complex_paginator_component__WEBPACK_IMPORTED_MODULE_1__","_complex_navigator_complex_navigator_component__WEBPACK_IMPORTED_MODULE_5__","_complex_navigator_table_structure_table_header_table_header_component__WEBPACK_IMPORTED_MODULE_7__","_complex_navigator_table_structure_table_interactor_column_table_interactor_column_component__WEBPACK_IMPORTED_MODULE_8__","_complex_navigator_table_structure_table_interactor_column_table_interactor_name_table_interactor_name_component__WEBPACK_IMPORTED_MODULE_9__","_complex_navigator_table_structure_table_interactor_column_table_interactor_external_link_table_interactor_external_link_component__WEBPACK_IMPORTED_MODULE_10__","_complex_navigator_table_structure_table_interactor_column_table_interactor_stoichiometry_table_interactor_stoichiometry_component__WEBPACK_IMPORTED_MODULE_11__","_complex_navigator_table_structure_table_interactor_column_table_main_interactor_table_main_interactor_component__WEBPACK_IMPORTED_MODULE_12__","_complex_navigator_table_structure_table_interactor_column_table_subcomponent_interactor_table_subcomponent_interactor_component__WEBPACK_IMPORTED_MODULE_13__","_complex_navigator_buttons_complex_navigator_buttons_component__WEBPACK_IMPORTED_MODULE_14__","_complex_navigator_complex_navigator_rating_complex_navigator_rating_component__WEBPACK_IMPORTED_MODULE_15__","Interactor","_identifier","_identifierLink","_name","_description","_interactorType","_organismName","__webpack_exports__"],"sources":["webpack:///src/app/complex/complex-portal-utils.ts","webpack:///src/app/complex/complex-results/complex-filter/complex-filter.component.ts","webpack:///src/app/complex/complex-results/complex-list/complex-list.component.ts","webpack:///src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator-rating/complex-navigator-rating.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/complex-navigator-utils.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.ts","webpack:///src/app/complex/complex-results/complex-paginator/complex-paginator.component.ts","webpack:///src/app/complex/complex-results/complex-results.component.ts","webpack:///src/app/complex/complex-results/complex-results.module.ts","webpack:///src/app/complex/shared/model/complex-results/interactor.model.ts","webpack:///src/app/complex/complex-results/complex-filter/complex-filter.component.html","webpack:///src/app/complex/complex-results/complex-list/complex-list.component.html","webpack:///src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.html","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator-rating/complex-navigator-rating.component.html","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.html","webpack:///src/app/complex/complex-results/complex-paginator/complex-paginator.component.html","webpack:///src/app/complex/complex-results/complex-results.component.html"],"sourcesContent":["export function interactorTypeIcon(type: string): string {\n  switch (type) {\n    case 'small molecule':\n      return 'icon icon-conceptual icon-chemical';\n    case 'protein':\n    case 'peptide':\n      return 'icon icon-conceptual icon-structures-3d';\n    case 'stable complex':\n      return 'icon icon-conceptual icon-systems';\n    case 'molecule set':\n      return 'icon icon-generic icon-math';\n    case 'single stranded deoxyribonucleic acid':\n    case 'double stranded deoxyribonucleic acid':\n    case 'small nuclear rna':\n    case 'small nucleolar rna':\n    case 'ribosomal rna':\n    case 'messenger rna':\n    case 'transfer rna':\n    case 'signal recognition particle rna':\n    case 'ribonucleic acid':\n    case 'nucleic acid':\n    case 'long non-coding ribonucleic acid':\n      return 'icon icon-conceptual icon-dna';\n  }\n}\n\nexport function organismIcon(organism: string): string {\n  const formattedName = formatOrganismName(organism);\n  switch (formattedName) {\n    case 'Homo sapiens':\n    case 'Homo sapiens; 9606':\n      return 'icon icon-species icon-human';\n    case 'Mus musculus':\n    case 'Mus musculus; 10090':\n      return 'icon icon-species icon-mouse';\n    case 'Saccharomyces cerevisiae (strain ATCC 204508 / S288c)':\n    case 'Schizosaccharomyces pombe (strain 972 / ATCC 24843)':\n    case 'Saccharomyces cerevisiae; 559292':\n      return 'icon icon-species icon-yeast';\n    case 'Escherichia coli (strain K12)':\n    case 'Escherichia coli':\n    case 'Escherichia coli (strain K12); 83333':\n    case 'Escherichia coli; 562':\n    case 'Pseudomonas aeruginosa (strain ATCC 15692 / DSM 22644 / CIP 104116 ' +\n    '/ JCM 14847 / LMG 12228 / 1C / PRS 101 / PAO1)':\n    case 'Pseudomonas aeruginosa (strain ATCC 15692 / PAO1 / 1C / PRS 101 / LMG 12228); 208964':\n      return 'icon icon-species icon-ecoli';\n    case 'Rattus norvegicus':\n    case 'Rattus norvegicus (Rat)':\n    case 'Rattus norvegicus (Rat); 10116':\n      return 'icon icon-species icon-rat';\n    case 'Caenorhabditis elegans':\n    case 'Caenorhabditis elegans; 6239':\n      return 'icon icon-species icon-c-elegans';\n    case 'Gallus gallus':\n    case 'Gallus gallus (Chicken); 9031':\n      return 'icon icon-species icon-chicken';\n    case 'Drosophila melanogaster':\n    case 'Drosophila melanogaster (Fruit fly); 7227':\n      return 'icon icon-species icon-fly';\n    case 'Bos taurus':\n    case 'Bos taurus (Bovine); 9913':\n      return 'icon icon-species icon-cow';\n    case 'Oryctolagus cuniculus':\n    case 'Oryctolagus cuniculus (Rabbit); 9986':\n      return 'icon icon-species icon-rabbit';\n    case 'Ovis aries':\n    case 'Ovis aries (Sheep); 9940':\n      return 'icon icon-species icon-sheep';\n    case 'Xenopus laevis':\n    case 'Xenopus laevis (African clawed frog); 8355':\n      return 'icon icon-species icon-frog';\n    case 'Canis lupus familiaris':\n    case 'Canis familiaris (dog); 9615':\n      return 'icon icon-species icon-dog';\n    case 'Vibrio cholerae serotype O1 (strain ATCC 39315 / El Tor Inaba N16961)':\n    case 'Vibrio cholerae; 243277':\n      return 'assets/images/EMBL_Species_Vibrio_cholerae.svg';\n    case 'Crotalus durissus terrificus':\n    case 'Crotalus durissus terrificus; 8732':\n      return 'assets/images/EMBL_Species_RattleSnake.svg';\n    case 'Sus scrofa':\n    case 'Sus scrofa (Pig); 9823':\n      return 'icon icon-species icon-pig';\n    case 'Torpedo marmorata':\n    case 'Tetronarce californica':\n    case 'Torpedo marmorata; 7788':\n    case 'Torpedo californica (Pacific electric ray); 7787':\n      return 'icon icon-species icon-ray';\n    case 'Lymnaea stagnalis':\n    case 'Lymnaea stagnalis; 6523':\n      return 'icon icon-species icon-snail';\n    case 'Arabidopsis thaliana':\n    case 'Arabidopsis thaliana (Mouse-ear cress); 3702':\n      return 'icon icon-species icon-brassica';\n    case 'Danio rerio':\n    case 'Danio rerio (Zebrafish); 7955':\n      return 'icon icon-species icon-zebrafish';\n    case 'Severe acute respiratory syndrome coronavirus':\n    case 'Human SARS coronavirus; 694009' :\n    case 'SARS-CoV-2; 2697049':\n    case 'Severe acute respiratory syndrome coronavirus 2':\n    case 'Middle East respiratory syndrome-related coronavirus (isolate United Kingdom/H123990006/2012)':\n    case 'Middle East respiratory syndrome-related coronavirus (isolate United Kingdom/H123990006/2012) (Betacoronavirus England 1); 1263720':\n    case 'Human betacoronavirus 2c EMC/2012':\n    case 'Human betacoronavirus 2c EMC/2012; 1235996':\n      return 'icon icon-species icon-virus';\n  }\n  return ' ';\n}\n\nfunction formatOrganismName(name: string): string {\n  if (name.includes(';')) {\n    const end = name.indexOf(';');\n    return name.substring(0, end);\n  }\n  return name;\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Facets} from '../../shared/model/complex-results/facets.model';\nimport {AnalyticsService} from '../../../shared/google-analytics/service/analytics.service';\nimport {interactorTypeIcon} from '../../complex-portal-utils';\nimport {organismIcon} from '../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-complex-filter',\n  templateUrl: './complex-filter.component.html',\n  styleUrls: ['./complex-filter.component.css']\n})\nexport class ComplexFilterComponent implements OnInit {\n\n  private _facets: Facets;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n  @Output() onSpicesFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onBiologicalRoleFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onInteractorTypeFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onResetAllFilters: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private googleAnalyticsService: AnalyticsService) {\n  }\n\n  ngOnInit() {\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeSpeciesFilter(filter: string, status: boolean) {\n    if (status) {\n      this.spicesFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.spicesFilter.splice(this.spicesFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onSpicesFilterChanged.emit(this.spicesFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeBiologicalRoleFilter(filter: string, status: boolean) {\n    if (status) {\n      this.bioRoleFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.bioRoleFilter.splice(this.bioRoleFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onBiologicalRoleFilterChanged.emit(this.bioRoleFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeInteractorTypeFilter(filter: string, status: boolean) {\n    if (status) {\n      this.interactorTypeFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.interactorTypeFilter.splice(this.interactorTypeFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onInteractorTypeFilterChanged.emit(this.interactorTypeFilter);\n  }\n\n  /**\n   * Emit event to parent component to remove all filters\n   */\n  public resetAllFilters() {\n    this.onResetAllFilters.emit(true);\n  }\n\n  /**\n   *\n   * @returns {boolean} true is any filter array contains an filter\n   */\n  public anyFiltersSelected() {\n    return (this._spicesFilter.length !== 0 || this._bioRoleFilter.length !== 0 || this._interactorTypeFilter.length !== 0);\n  }\n\n  /**\n   *\n   * @param element filter to check if already selected\n   * @param filter selected filters\n   * @returns {boolean} true if filter is already in selected filters\n   */\n  public isSelected(element: string, filter: string[]): boolean {\n    return filter.indexOf(element) !== -1;\n  }\n\n  get facets(): Facets {\n    return this._facets;\n  }\n\n  @Input()\n  set facets(value: Facets) {\n    this._facets = value;\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  @Input()\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  @Input()\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  @Input()\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n\n  public facetTypeIcon(facet): string {\n    return interactorTypeIcon(facet.name);\n  }\n\n  public facetOrganismIcon(facet): string {\n    return organismIcon(facet);\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\n\n@Component({\n  selector: 'cp-complex-list',\n  templateUrl: './complex-list.component.html',\n  styleUrls: ['./complex-list.component.css']\n})\nexport class ComplexListComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-navigator-buttons',\n  templateUrl: './complex-navigator-buttons.component.html',\n  styleUrls: ['./complex-navigator-buttons.component.css']\n})\nexport class ComplexNavigatorButtonsComponent {\n  @Output() interactorsSortingChange = new EventEmitter<string>();\n  @Output() organismIconDisplayChange = new EventEmitter<boolean>();\n  @Output() interactorTypeDisplayChange = new EventEmitter<boolean>();\n  @Output() IDDisplayChange = new EventEmitter<boolean>();\n\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  typeOfDisplay: string;\n\n  InteractorsSorting(typeOfSorting: string) {\n    this.interactorsSortingChange.emit(typeOfSorting);\n    switch (this.typeOfDisplay) {\n      case 'compact':\n        this.compactDisplay();\n        break;\n      default:\n        this.detailedDisplay();\n        if (typeOfSorting === 'Type') {\n          this.interactorTypeDisplay = false;\n        } else if (typeOfSorting === 'Organism') {\n          this.organismIconDisplay = false;\n        }\n    }\n    this.changesEmitter();\n  }\n\n  DisplayingOrganism() {\n    this.organismIconDisplay = !this.organismIconDisplay;\n    this.changesEmitter();\n  }\n\n  DisplayingType() {\n    this.interactorTypeDisplay = !this.interactorTypeDisplay;\n    this.changesEmitter();\n  }\n\n  DisplayingID() {\n    this.IDDisplay = !this.IDDisplay;\n    this.changesEmitter();\n  }\n\n  compactDisplay() {\n    this.organismIconDisplay = false;\n    this.interactorTypeDisplay = false;\n    this.IDDisplay = false;\n    this.changesEmitter();\n    this.typeOfDisplay = 'compact';\n  }\n\n  detailedDisplay() {\n    this.organismIconDisplay = true;\n    this.interactorTypeDisplay = true;\n    this.IDDisplay = true;\n    this.changesEmitter();\n    this.typeOfDisplay = 'detailed';\n  }\n\n  changesEmitter() {\n    this.organismIconDisplayChange.emit(this.organismIconDisplay);\n    this.interactorTypeDisplayChange.emit(this.interactorTypeDisplay);\n    this.IDDisplayChange.emit(this.IDDisplay);\n  }\n}\n","import {Component} from '@angular/core';\nimport {AnalyticsService} from '../../../../shared/google-analytics/service/analytics.service';\n\n@Component({\n  selector: 'cp-complex-navigator-rating',\n  templateUrl: './complex-navigator-rating.component.html',\n  styleUrls: ['./complex-navigator-rating.component.css']\n})\nexport class ComplexNavigatorRatingComponent {\n  selectedRating: number;\n  visible = true;\n\n  constructor(private analyticsService: AnalyticsService) {\n  }\n\n  selectRating(rating: number) {\n    this.selectedRating = rating;\n    console.log(`Selected rating: ${rating}`);\n  }\n\n  submitRating() {\n    if (this.selectedRating !== null) {\n      this.analyticsService.rateComplexNavigator(this.selectedRating.toString());\n      console.log(`Submitting rating: ${this.selectedRating}`);\n    } else {\n      console.log('No rating selected');\n    }\n  }\n\n  ratingVisibility() {\n    this.visible = false;\n  }\n}\n","import {Component, Input} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-navigator',\n  templateUrl: './complex-navigator.component.html',\n  styleUrls: ['./complex-navigator.component.css']\n})\n\nexport class ComplexNavigatorComponent {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  interactorsSorting = 'Occurrence';\n  organismIconDisplay = true;\n  interactorTypeDisplay = true;\n  IDDisplay = true;\n}\n","import {Component, Input} from '@angular/core';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\nimport {organismIcon} from '../../../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-table-header',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css'],\n})\n\nexport class TableHeaderComponent {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  iconOrganism(organismName: string) {\n    return organismIcon(organismName);\n  }\n}\n","import {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\n\nexport function fetchValuesFromStoichiometry(stoichiometry: string) {\n  const pattern = 'minValue: ([0-9+]), maxValue: ([0-9+])';\n  return stoichiometry.match(pattern);\n}\n\nexport function findInteractorInComplex(complex: Element, componentId: string): ComplexComponent {\n  return complex.interactors.find(component => component.identifier === componentId);\n}\n\nexport function getStoichiometry(complex: Element, componentId: string): string {\n  const match = findInteractorInComplex(complex, componentId);\n  if (!!match) {\n    if (!!match.stochiometry) {\n      return 'Stoichiometry values: ' + (match.stochiometry);\n    } else {\n      return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n    }\n  }\n  return null;\n}\n\nexport function stoichiometryOfInteractors(complex: Element, interactorId: string): string {\n  const match = findInteractorInComplex(complex, interactorId);\n  if (!!match) {\n    return formatStoichiometryValues(match.stochiometry);\n  }\n  return null;\n}\n\nexport function parseStoichiometryValues(stoichiometry: string): [number, number] {\n  if (!!stoichiometry) {\n    const matchedStoichiometry = fetchValuesFromStoichiometry(stoichiometry);\n    if (!!matchedStoichiometry) {\n      const minValue = parseInt(matchedStoichiometry[1], 10);\n      const maxValue = parseInt(matchedStoichiometry[2], 10);\n      if (!isNaN(minValue) && !isNaN(maxValue)) {\n        return [minValue, maxValue];\n      }\n    }\n  }\n  return null;\n}\n\nexport function formatStoichiometryValues(stoichiometry: string): string {\n  const parsedStoichiometry = parseStoichiometryValues(stoichiometry);\n  if (!!parsedStoichiometry) {\n    const minValue = parsedStoichiometry[0];\n    const maxValue = parsedStoichiometry[1];\n    if (minValue === maxValue) {\n      return minValue.toString();\n    } else {\n      return `${minValue}, ${maxValue}`;\n    }\n  }\n  return ' '; // sometimes we don't have the stoichiometry value\n}\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {Interactor} from '../../../../shared/model/complex-results/interactor.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {Observable} from 'rxjs/Observable';\nimport {of} from 'rxjs';\nimport {ComplexPortalService} from '../../../../shared/service/complex-portal.service';\nimport {map} from 'rxjs/operators';\nimport {formatStoichiometryValues, stoichiometryOfInteractors} from './complex-navigator-utils';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\nexport class EnrichedInteractor {\n  interactor: Interactor;\n  hidden: boolean;\n  isSubComplex: boolean;\n  expanded: boolean;\n  subComponents: ComplexComponent[];\n  partOfComplex: number[];\n  timesAppearing: number;\n}\n\nexport class EnrichedComplex {\n  complex: Element;\n  startInteractorIndex: number;\n  endInteractorIndex: number;\n  startSubComponentIndex: number;\n  endSubComponentIndex: number;\n}\n\n@Component({\n  selector: 'cp-table-interactor-column',\n  templateUrl: './table-interactor-column.component.html',\n  styleUrls: ['./table-interactor-column.component.css']\n})\nexport class TableInteractorColumnComponent implements OnChanges {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() interactors: Interactor[];\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  enrichedInteractors: EnrichedInteractor[];\n  enrichedComplexes: EnrichedComplex[];\n  ranges: number[];\n\n\n  constructor(private complexPortalService: ComplexPortalService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!!changes['interactors']) {\n      this.enrichInteractors();\n    }\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  private classifyInteractors(): void {\n    if (!!this.interactorsSorting && !!this.enrichedInteractors && this.enrichedInteractors.length > 0) {\n      if (this.interactorsSorting === 'Type') {\n        this.classifyInteractorsByType();\n      } else if (this.interactorsSorting === 'Organism') {\n        this.classifyInteractorsByOrganism();\n      } else {\n        this.classifyInteractorsByOccurrence();\n      }\n    }\n  }\n\n  private enrichInteractors() {\n    this.enrichedInteractors = [];\n    for (const interactor of this.interactors) {\n      const isSubComplex = interactor.interactorType === 'stable complex';\n      const newEnrichedInteractor: EnrichedInteractor = {\n        interactor,\n        hidden: false,\n        isSubComplex,\n        expanded: false,\n        subComponents: null,\n        partOfComplex: [],\n        timesAppearing: 0,\n      };\n      if (isSubComplex) {\n        this.loadSubInteractors(newEnrichedInteractor).subscribe(subComponents => newEnrichedInteractor.subComponents = subComponents);\n      }\n      this.enrichedInteractors.push(newEnrichedInteractor);\n    }\n  }\n\n  toggleSubcomplexExpandable(i: number): void {\n    this.enrichedInteractors[i].expanded = !this.enrichedInteractors[i].expanded;\n\n    if (this.enrichedInteractors[i].expanded) {\n      // EnrichedInteractor has been expanded, we need to:\n\n      // 1. Collapse the other ones, in case there is any other expanded\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        if (i !== j) {\n          this.enrichedInteractors[j].expanded = false;\n        }\n      }\n\n      // 2. Hide any interactor now displayed in the expanded section\n      if (!!this.enrichedInteractors[i].subComponents) {\n        const subInteractorIds: string[] = this.enrichedInteractors[i].subComponents.map(component => component.identifier);\n        for (let j = 0; j < this.enrichedInteractors.length; j++) {\n          if (i !== j) {\n            this.enrichedInteractors[j].hidden = !!subInteractorIds.includes(this.enrichedInteractors[j].interactor.identifier);\n          }\n        }\n      }\n    } else {\n      // EnrichedInteractor has been collapsed, we need to:\n      // 1. Display any interactor previously hidden\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        this.enrichedInteractors[j].hidden = false;\n      }\n    }\n\n    // Something has been expanded or collapsed, we need to recalculate the start and end indexes for the lines\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n\n  }\n\n  private loadSubInteractors(interactor: EnrichedInteractor): Observable<ComplexComponent[]> {\n    // this function returns the list of subcomponents of an interactor of type stable complex\n    const foundComplex: Element = this.complexes.find(complex => complex.complexAC === interactor.interactor.identifier);\n    if (!!foundComplex) {\n      return of(foundComplex.interactors);\n    } else {\n      // Actually call the back-end to fetch these\n      return this.complexPortalService.getSimplifiedComplex(interactor.interactor.identifier)\n        .pipe(map(complex => complex?.interactors));\n    }\n  }\n\n  private calculateAllStartAndEndIndexes(): void {\n    this.enrichedComplexes = [];\n\n    for (const complex of this.complexes) {\n      this.enrichedComplexes.push(this.calculateStartAndEndIndexes(complex));\n    }\n  }\n\n  private getMinValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.min(valueA, valueB);\n  }\n\n  private getMaxValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.max(valueA, valueB);\n  }\n\n  private calculateStartAndEndIndexes(complex: Element): EnrichedComplex {\n    const subComponentsToCheck: string[] = [];\n\n    const enrichedComplex: EnrichedComplex = {\n      complex,\n      startInteractorIndex: null,\n      endInteractorIndex: null,\n      startSubComponentIndex: null,\n      endSubComponentIndex: null\n    };\n\n    // We iterate through the interactors to find the first and last one part of the complex\n    // We do this to be able to draw a line connecting all interactors in the complex\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n        for (let j = 0; j < complex.interactors.length; j++) {\n          if (complex.interactors[j].identifier === this.enrichedInteractors[i].interactor.identifier) {\n            // The interactor is part of the complex, we update the start and end indices for the interactors\n            // line as it may start in this interactor\n            enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n            enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n\n            // The interactor is a subcomplex\n            if (this.enrichedInteractors[i].isSubComplex && !!this.enrichedInteractors[i].subComponents) {\n              // The subcomponents of that subcomplex could also be displayed in the table as separate interactors.\n              // In that case, the line could start or end there, so we need to also check the position of those\n              // interactors. We add those subcomponents to 'subComponentsToCheck' to check their position later\n              this.enrichedInteractors[i].subComponents.forEach(subComponent => subComponentsToCheck.push(subComponent.identifier));\n              if (this.enrichedInteractors[i].expanded) {\n                // If the subcomplex is expanded, as the subcomplex is part of the complex, all its subcomponents are also part\n                // of it. That means we need a line connecting all the subcomponents.\n                // That line must also connect to the subcomplex, so we start it at -1 to make sure it starts at the interactor cell\n                // and not at the first subcomponent\n                enrichedComplex.startSubComponentIndex = -1;\n                enrichedComplex.endSubComponentIndex = this.enrichedInteractors[i].subComponents.length - 1;\n              }\n            }\n          } else if (this.enrichedInteractors[i].isSubComplex &&\n            !!this.enrichedInteractors[i].subComponents &&\n            this.enrichedInteractors[i].expanded) {\n            // The interactor is not part of the complex, but it is a subcomplex, and it is expanded.\n            // This means the subcomponents of the subcomplex are visible, and any of them could be part of the complex.\n            // In that case, the line could start or end on any of those subcomponents\n            for (let k = 0; k < this.enrichedInteractors[i].subComponents.length; k++) {\n              if (complex.interactors[j].identifier === this.enrichedInteractors[i].subComponents[k].identifier) {\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the interactors\n                // line as it may start in this interactor\n                enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n                enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the subcomponents\n                // line as it may start in this subcomponent\n                enrichedComplex.startSubComponentIndex = this.getMinValue(enrichedComplex.startSubComponentIndex, k);\n                enrichedComplex.endSubComponentIndex = this.getMaxValue(enrichedComplex.endSubComponentIndex, k);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // We finally check the position of the subcomponents of subcomplexes part of the complex on the main table.\n    // If any is before or after where the lines start and end, then we need to update the start and end indexes,\n    // as the line must start or end there\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n        if (subComponentsToCheck.includes(this.enrichedInteractors[i].interactor.identifier)) {\n          // The interactor is part of a subcomplex that is part of the complex, we update the start and end indices for the interactors\n          // line as it may start in this interactor\n          enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n          enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n        }\n      }\n    }\n    return enrichedComplex;\n  }\n\n  public classifyInteractorsByOrganism() {\n    this.enrichedInteractors.sort((a, b) => b.interactor.organismName.localeCompare(a.interactor.organismName));\n    // this.calculateAllStartAndEndIndexes();\n    this.rangeOfInteractorOrganism();\n  }\n\n  public classifyInteractorsByType() {\n    this.enrichedInteractors.sort((a, b) => b.interactor.interactorType.localeCompare(a.interactor.interactorType));\n    this.rangeOfInteractorType();\n  }\n\n  public classifyInteractorsByOccurrence() {\n    for (const oneInteractor of this.enrichedInteractors) {\n      for (const complex of this.complexes) {\n        for (const complexesInteractors of complex.interactors) {\n          if (oneInteractor.interactor.identifier === complexesInteractors.identifier) {\n            const stoichiometryValue = parseInt(stoichiometryOfInteractors(complex, oneInteractor.interactor.identifier), 10);\n            if (!isNaN(stoichiometryValue)) {\n              oneInteractor.timesAppearing += stoichiometryValue;\n            }\n          }\n        }\n        if (oneInteractor.isSubComplex && !!oneInteractor.subComponents) {\n          for (const oneSubInteractor of oneInteractor.subComponents) {\n            const oneEnrichedInteractor = this.enrichedInteractors.find(\n              enrichedInteractor => enrichedInteractor.interactor.identifier === oneSubInteractor.identifier\n            );\n            if (!!oneEnrichedInteractor) {\n              const stoichiometryValue = parseInt(formatStoichiometryValues(oneSubInteractor.stochiometry), 10);\n              if (!isNaN(stoichiometryValue)) {\n                oneEnrichedInteractor.timesAppearing += stoichiometryValue;\n              }\n            }\n          }\n        }\n      }\n    }\n    this.enrichedInteractors.sort((a, b) =>\n      b.timesAppearing - a.timesAppearing\n    );\n    this.ranges = [];\n  }\n\n  public rangeOfInteractorType() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.interactorType !== this.enrichedInteractors[i + 1].interactor.interactorType) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.interactorType, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  public rangeOfInteractorOrganism() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.organismName !== this.enrichedInteractors[i + 1].interactor.organismName) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.organismName, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-external-link',\n  templateUrl: './table-interactor-external-link.component.html',\n  styleUrls: ['./table-interactor-external-link.component.css']\n})\nexport class TableInteractorExternalLinkComponent implements OnInit {\n\n  @Input() interactorId: string;\n  @Input() identifierLink: string;\n  @Input() interactorType: string;\n  @Input() isMainInteractor: boolean;\n  @Input() IDDisplay: boolean;\n\n  @Output() externalLinkVisible: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  ngOnInit(): void {\n    this.showExternalLink();\n  }\n\n  showExternalLink(): boolean {\n    if (this.isMainInteractor && this.interactorType === 'stable complex') {\n      this.externalLinkVisible.emit(false);\n      return false;\n    }\n    this.externalLinkVisible.emit(!!this.identifierLink);\n    return !!this.identifierLink;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {interactorTypeIcon} from '../../../../../complex-portal-utils';\nimport {organismIcon} from '../../../../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-table-interactor-name',\n  templateUrl: './table-interactor-name.component.html',\n  styleUrls: ['./table-interactor-name.component.css']\n})\nexport class TableInteractorNameComponent implements OnInit {\n\n  @Input() interactorName: string;\n  @Input() interactorType: string;\n  @Input() interactorId: string;\n  @Input() interactorOrganism: string;\n  @Input() identifierLink: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() isMainInteractor: boolean;\n  interactorTypeIcon: string;\n  interactorOrganismIcon: string;\n  externalLinkVisible: boolean;\n\n  ngOnInit(): void {\n    this.interactorTypeIcon = interactorTypeIcon(this.interactorType);\n    this.interactorOrganismIcon = organismIcon(this.interactorOrganism);\n  }\n\n  externalLinkVisibleHandler(isVisible: boolean): void {\n    this.externalLinkVisible = isVisible;\n  }\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-stoichiometry',\n  templateUrl: './table-interactor-stoichiometry.component.html',\n  styleUrls: ['./table-interactor-stoichiometry.component.css']\n})\nexport class TableInteractorStoichiometryComponent {\n  @Input() stoichiometryText: string;\n  @Input() stoichiometryValue: string;\n}\n","import {Component, Input} from '@angular/core';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {Element} from '../../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {\n  findInteractorInComplex,\n  getStoichiometry,\n  stoichiometryOfInteractors,\n  parseStoichiometryValues\n} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-main-interactor',\n  templateUrl: './table-main-interactor.component.html',\n  styleUrls: ['./table-main-interactor.component.css']\n})\nexport class TableMainInteractorComponent {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  findInteractorInComplex = findInteractorInComplex;\n  getStoichiometry = getStoichiometry;\n  stoichiometryOfInteractors = stoichiometryOfInteractors;\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  findInteractorsInSubComplex(complex: Element, interactorId: string): ComplexComponent[] {\n    return this.enrichedInteractors\n      // filter subcomplexes\n      .filter(interactor => interactor.isSubComplex)\n      // filter subcomplexes included in complex\n      .filter(interactor =>\n        complex.interactors.some(component => component.identifier === interactor.interactor.identifier))\n      // filter subcomplexes that match the componentId\n      .filter(interactor => !!interactor.subComponents)\n      .map(interactor => interactor.subComponents.find(subComponent => subComponent.identifier === interactorId))\n      .filter(component => !!component);\n  }\n\n  public displayTopLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnInteractorCell(complex, interactorIndex) && !this.doesLineStartOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnInteractorCell(complex, interactorIndex) && !this.doesLineEndOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  getStoichiometrySubComplex(complex: Element, interactorId: string): string {\n    const matches = this.findInteractorsInSubComplex(complex, interactorId);\n    if (matches.length > 0) {\n      const stoichiometryValues = this.addedStoichiometryValues(matches);\n      if (!!stoichiometryValues) {\n        return `Stoichiometry values: minValue: ${stoichiometryValues[0]}, maxValue: ${stoichiometryValues[1]}`;\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  stoichiometryOfInteractorsMainTable(complex: Element, interactorId: string): string {\n    const matches = this.findInteractorsInSubComplex(complex, interactorId);\n    if (matches.length > 0) {\n      const stoichiometryValues = this.addedStoichiometryValues(matches);\n      if (!!stoichiometryValues) {\n        if (stoichiometryValues[0] === stoichiometryValues[1]) {\n          return stoichiometryValues[0].toString();\n        } else {\n          return `${stoichiometryValues[0]}, ${stoichiometryValues[1]}`;\n        }\n      } else {\n        return ' ';\n      }\n    }\n    return null;\n  }\n\n  private doesLineCrossInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n\n      // The line starts before this interactor and ends after, so it crosses through the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      // The line starts before this interactor and end at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor, and it must cross through the interactor cell to the subcomponents\n        if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n\n      if (!this.enrichedInteractors[interactorIndex].isSubComplex) {\n        // If the interactor is not a subcomplex, then the interactor has no subcomponents and the line starts in it\n        return true;\n      }\n      // If the interactor is a subcomplex.\n      // If the interactor is actually part of the complex, the line starts in this interactor\n      // Otherwise, the line actually starts on one of the subcomponents of the complex, but not on the interactor itself, as it is\n      // not part of the complex.\n      if (complex.complex.interactors.some(component =>\n        this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line ends at this interactor or on any of its subcomponents\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n\n      // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n      // the line does not end in this interactor, and it must cross through to the subcomponents\n      if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n        if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  private addedStoichiometryValues(components: ComplexComponent[]): [number, number] {\n    let minValue: number = null;\n    let maxValue: number = null;\n    for (const component of components) {\n      const parsedStoichiometry = parseStoichiometryValues(component.stochiometry);\n      if (!!parsedStoichiometry) {\n        if (minValue === null) {\n          minValue = 0;\n        }\n        if (maxValue === null) {\n          maxValue = 0;\n        }\n        minValue += parsedStoichiometry[0];\n        maxValue += parsedStoichiometry[1];\n      }\n    }\n    if (minValue !== null && maxValue !== null) {\n      return [minValue, maxValue];\n    }\n    return null;\n  }\n\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {Element} from '../../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {findInteractorInComplex, formatStoichiometryValues, getStoichiometry, stoichiometryOfInteractors} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-subcomponent-interactor',\n  templateUrl: './table-subcomponent-interactor.component.html',\n  styleUrls: ['./table-subcomponent-interactor.component.css']\n})\n\nexport class TableSubcomponentInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() j: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  displayTopLineClass: string;\n  displayBottomLineClass: string;\n  interactorInComplex = false;\n  interactorStoichiometryText: string;\n  interactorStoichiometryValue: string;\n  interactorInSubComplex = false;\n  subComplexInteractorStoichiometryText: string;\n  subComplexInteractorStoichiometryValue: string;\n\n  ngOnChanges(): void {\n    this.displayTopLineClass = this.displayTopLineClassExpanded(this.complex, this.i, this.j);\n    this.interactorInComplex = !!findInteractorInComplex(this.complex.complex, this.el.identifier);\n    this.interactorStoichiometryText = getStoichiometry(this.complex.complex, this.el.identifier);\n    this.interactorStoichiometryValue = stoichiometryOfInteractors(this.complex.complex, this.el.identifier);\n    this.interactorInSubComplex = !!this.findInteractorInExpandedSubComplex(this.interactor, this.complex.complex, this.el.identifier);\n    this.subComplexInteractorStoichiometryText = this.getStoichiometryInExpandedSubComplex(this.interactor, this.el.identifier);\n    this.subComplexInteractorStoichiometryValue = this.stoichiometryOfInteractorsExpandable(this.interactor, this.el.identifier);\n    this.displayBottomLineClass = this.displayBottomLineClassExpanded(this.complex, this.i, this.j);\n  }\n\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  get el(): ComplexComponent {\n    return this.enrichedInteractors[this.i].subComponents[this.j];\n  }\n\n  public displayTopLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public findInteractorInExpandedSubComplex(interactor: EnrichedInteractor, complex: Element, interactorId: string): ComplexComponent {\n    if (complex.interactors.some(component => component.identifier === interactor.interactor.identifier)) {\n      return interactor.subComponents.find(component => component.identifier === interactorId);\n    }\n    return null;\n  }\n\n  getStoichiometryInExpandedSubComplex(interactor: EnrichedInteractor, interactorId: string): string {\n    const match = this.findInteractorInSubcomplex(interactor, interactorId);\n    if (!!match) {\n      if (!!match.stochiometry) {\n        return 'Stoichiometry values: ' + (match.stochiometry);\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  stoichiometryOfInteractorsExpandable(interactor: EnrichedInteractor, interactorId: string): string {\n    const match = this.findInteractorInSubcomplex(interactor, interactorId);\n    if (!!match) {\n      return formatStoichiometryValues(match.stochiometry);\n    }\n    return null;\n  }\n\n  private doesLineCrossSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n      // The line starts before this interactor and ends after, so it crosses through all the subcomponents of the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n        // The line starts before this subcomponent and ends after, so it crosses through the subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this interactor, and it ends on a later subcomponent, so it crosses through this subcomponent\n        if (complex.startInteractorIndex < interactorIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this subcomponent, and it ends on a later interactor, so it crosses through this subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endInteractorIndex > interactorIndex) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n      if (complex.startSubComponentIndex != null && complex.startSubComponentIndex === subComponentIndex) {\n        // If the subcomplex is a component of the complex, the line starts in the cell of the interactor, meaning it cannot\n        // start on any subcomponent.\n        // Otherwise, it starts on the subcomponent with the index subComponentIndex\n        return !complex.complex.interactors.some(component =>\n          this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier);\n\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n      // The line ends at this interactor and this subcomponent\n      if (complex.endSubComponentIndex != null && complex.endSubComponentIndex === subComponentIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private findInteractorInSubcomplex(interactor: EnrichedInteractor, interactorId: string): ComplexComponent {\n    return interactor.subComponents.find(component => component.identifier === interactorId);\n  }\n\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {ComplexSearchResult} from '../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../shared/model/complex-results/interactor.model';\nimport {Element} from '../../../shared/model/complex-results/element.model';\n\n@Component({\n  selector: 'cp-table-structure',\n  templateUrl: './table-structure.component.html',\n  styleUrls: ['./table-structure.component.css']\n})\nexport class TableStructureComponent implements OnChanges {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  sortedComplexes: Element[] = [];\n\n  ngOnChanges(): void {\n    this.classifyComplexesSize(); // ensure to always have the same base of comparison\n    this.sortedComplexes = this.classifyComplexesSimilarities(this.complexSearch.elements);\n  }\n\n  classifyComplexesSize(): void {\n    const searchResult: Element[] = [...this.complexSearch.elements];\n    const complexesAndSizes: [Element, number][] = [];\n    for (const complex of searchResult) {\n      let totalLength = complex.interactors.length;\n      for (const complexInteractorChecked of complex.interactors) {\n        if (complexInteractorChecked.interactorType === 'stable complex') {\n          const subComplex: Element = searchResult.find(c => c.complexAC === complexInteractorChecked.identifier);\n          if (!!subComplex) {\n            totalLength += subComplex.interactors.length;\n          }\n        }\n      }\n      complexesAndSizes.push([complex, totalLength]);\n    }\n    complexesAndSizes.sort((a, b) => b[1] - a[1]);\n    for (let i = 0; i < searchResult.length; i++) {\n      this.complexSearch.elements[i] = complexesAndSizes[i][0];\n    }\n  }\n\n  private calculateSimilarity(complex1, complex2) {\n    let similarities = 0;\n    for (const complex1Interactor of complex1.interactors) {\n      // The interactor of complex 1 is a subcomplex\n      if (complex1Interactor.interactorType === 'stable complex') {\n        // The subcomplex is exactly complex 2, so we add the number of interactors of complex 2 to the similarities\n        if (complex2.complexAC === complex1Interactor.identifier) {\n          similarities += complex2.interactors.length;\n        } else {\n          const subComplex: Element = this.complexSearch.elements.find(\n            complex => complex.complexAC === complex1Interactor.identifier\n          );\n          if (!!subComplex) {\n            const complex2MatchingInteractor: Interactor = complex2.interactors.find(\n              interactor => interactor.identifier === complex1Interactor.identifier\n            );\n            if (!!complex2MatchingInteractor) {\n              // Complex 2 also has the same subcomplex as an interactor, so we add all the interactors in the subcomplex\n              // to the similarities, as the two complexes have all those interactors in common\n              similarities += subComplex.interactors.length;\n            } else {\n              // Complex 2 does not have the same subcomplex as interactor, so we need to compare interactors\n              // of the subcomplex and complex 2 to find any matches\n              for (const subComplexInteractor of subComplex.interactors) {\n                for (const complex2Interactor of complex2.interactors) {\n                  if (subComplexInteractor.identifier === complex2Interactor.identifier) {\n                    similarities++;\n                  }\n                }\n              }\n            }\n          }\n        }\n      } else {\n        // The interactor of complex 1 is not a subcomplex\n        for (const complex2Interactor of complex2.interactors) {\n          // The interactor of complex 2 is a subcomplex\n          if (complex2Interactor.interactorType === 'stable complex') {\n            const subComplex: Element = this.complexSearch.elements.find(\n              complex => complex.complexAC === complex2Interactor.identifier\n            );\n            if (!!subComplex) {\n              // Complex 2 interactor is a subcomplex, so we need to compare the complex 1 interactor with interactors of this\n              // subcomplex to find any matches\n              for (const subComplexInteractor of subComplex.interactors) {\n                if (subComplexInteractor.identifier === complex1Interactor.identifier) {\n                  similarities++;\n                }\n              }\n            }\n          } else if (complex1Interactor.identifier === complex2Interactor.identifier) {\n            // The interactors of complex 1 and complex 2 are not subcomplexes, and they have the same id, so we add to the similarities\n            similarities++;\n          }\n        }\n      }\n    }\n    return similarities;\n  }\n\n  private classifyComplexesSimilarities(bigComplexes: Element[]): Element[] {\n    const classifiedList: Element[][] = [];\n    // multidimensional array containing groups of complexes having similar interactors\n    for (const complex of bigComplexes) {\n      let similarInteractorFound = false;\n      for (const classification of classifiedList) {\n        const comparedComplex = classification[0];\n        const similarity = this.calculateSimilarity(complex, comparedComplex);\n        if (similarity >= 1) {\n          classification.push(complex);\n          similarInteractorFound = true; // goes to the next complex\n        }\n      }\n      if (!similarInteractorFound) {\n        classifiedList.push([complex]); // fill classifiedList with arrays of all the complexes in the list\n      }\n    }\n    const unique: Element[] = [];\n    for (const classification of classifiedList) {\n      for (const complex of classification) {\n        if (!unique.includes(complex)) {\n          unique.push(complex);\n        }\n      }\n    }\n    return unique;\n  }\n\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-paginator',\n  templateUrl: './complex-paginator.component.html',\n  styleUrls: ['./complex-paginator.component.css']\n})\nexport class ComplexPaginatorComponent implements OnInit, OnChanges {\n  private _lastPageIndex: number;\n  private _currentPageIndex: number;\n  private _pagination: any;\n\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter<number>();\n\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.updatePaginatior();\n  }\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.updatePaginatior();\n  }\n\n  public updatePaginatior(): void {\n    let start: number;\n    let end: number;\n    this.pagination = [];\n    if (this._lastPageIndex < 5) {\n      start = 1;\n      end = this._lastPageIndex;\n\n    } else {\n      if (this._currentPageIndex === 1 || this._currentPageIndex === 2) {\n        start = 1;\n        end = 5;\n      } else if (this._currentPageIndex === this._lastPageIndex || this._currentPageIndex === this._lastPageIndex - 1) {\n        start = this._lastPageIndex - 4;\n        end = this._lastPageIndex;\n      } else {\n        start = this._currentPageIndex - 2;\n        end = this._currentPageIndex + 2;\n      }\n    }\n    while (start <= end) {\n      if (start === this._currentPageIndex) {\n        this._pagination.push([[this._currentPageIndex], [true]]);\n      } else {\n        this._pagination.push([[start], [false]]);\n      }\n      start++;\n    }\n  }\n\n  public getFirstPage(): void {\n    this.onPageChange.emit(1);\n  }\n\n  public getLastPage(): void {\n    this.onPageChange.emit(this.lastPageIndex);\n  }\n\n  public getPage(pageIndex: number) {\n    this.onPageChange.emit(pageIndex);\n  }\n\n  public getPreviousPage(): void {\n    this.onPageChange.emit(this.currentPageIndex - 1);\n  }\n\n  public getNextPage(): void {\n    this.onPageChange.emit(this.currentPageIndex + 1);\n  }\n\n  get lastPageIndex() {\n    return this._lastPageIndex;\n  }\n\n  @Input()\n  set lastPageIndex(value) {\n    this._lastPageIndex = value;\n  }\n\n  get currentPageIndex() {\n    return this._currentPageIndex;\n  }\n\n  @Input()\n  set currentPageIndex(value) {\n    this._currentPageIndex = value;\n  }\n\n  get pagination() {\n    return this._pagination;\n  }\n\n  set pagination(value) {\n    this._pagination = value;\n  }\n}\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, NavigationExtras, Router} from '@angular/router';\nimport {ComplexSearchResult} from '../shared/model/complex-results/complex-search.model';\nimport {ComplexPortalService} from '../shared/service/complex-portal.service';\nimport {ProgressBarComponent} from '../../shared/loading-indicators/progress-bar/progress-bar.component';\nimport {Title} from '@angular/platform-browser';\nimport {AnalyticsService} from '../../shared/google-analytics/service/analytics.service';\nimport {Interactor} from '../shared/model/complex-results/interactor.model';\nimport {NotificationService} from '../../shared/notification/service/notification.service';\n\n@Component({\n  selector: 'cp-complex-results',\n  templateUrl: './complex-results.component.html',\n  styleUrls: ['./complex-results.component.css'],\n})\nexport class ComplexResultsComponent implements OnInit, AfterViewInit {\n  LIST_VIEW = 'view_list';\n  COMPLEX_NAVIGATOR_VIEW = 'view_complex_navigator';\n  private _query: string;\n  private _currentPageIndex: number;\n  private _complexSearch: ComplexSearchResult;\n  private _lastPageIndex: number;\n  private _pageSize = 15;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n  private _allInteractorsInComplexSearch: Interactor[] = [];\n  DisplayType: string;\n\n  constructor(private route: ActivatedRoute, private router: Router,\n              private complexPortalService: ComplexPortalService, private titleService: Title,\n              private googleAnalyticsService: AnalyticsService, private notificationService: NotificationService) {\n  }\n\n  ngOnInit() {\n    this.titleService.setTitle('Complex Portal - Results');\n    this._allInteractorsInComplexSearch = [];\n    this.route\n      .queryParams\n      .subscribe(queryParams => {\n        this._query = queryParams['query'];\n        this._spicesFilter = queryParams['species'] ? queryParams['species'].split('+') : [];\n        this._bioRoleFilter = queryParams['bioRole'] ? queryParams['bioRole'].split('+') : [];\n        this._interactorTypeFilter = queryParams['interactorType'] ? queryParams['interactorType'].split('+') : [];\n        this._currentPageIndex = queryParams['page'] ? Number(queryParams['page']) : 1;\n        // TODO This is out for now, but CP-84 (JIRA )should fix that!!\n        // this.pageSize = queryParams['size'] ? Number(queryParams['size']) : 10;\n        this.requestComplexResults();\n        document.body.scrollTop = 0;\n      });\n    this.route.fragment.subscribe(fragment => {\n      if (fragment === this.COMPLEX_NAVIGATOR_VIEW) {\n        this.DisplayType = this.COMPLEX_NAVIGATOR_VIEW;\n      } else if (fragment === this.LIST_VIEW) {\n        this.DisplayType = this.LIST_VIEW;\n      }\n    });\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  private requestComplexResults() {\n    this.complexPortalService.findComplex(this.query, this.spicesFilter, this.bioRoleFilter,\n      this.interactorTypeFilter, this.currentPageIndex, this.pageSize).subscribe(complexSearch => {\n      this.complexSearch = complexSearch;\n      this._allInteractorsInComplexSearch = [];\n      if (this.complexSearch.totalNumberOfResults !== 0) {\n        this.lastPageIndex = Math.ceil(complexSearch.totalNumberOfResults / this.pageSize);\n        for (let i = 0; i < complexSearch.elements.length; i++) {\n          for (const component of complexSearch.elements[i].interactors) {\n            if (!this._allInteractorsInComplexSearch.some(interactor => interactor.identifier === component.identifier)) {\n              this._allInteractorsInComplexSearch.push(\n                new Interactor(\n                  component.identifier,\n                  component.identifierLink,\n                  component.name,\n                  component.description,\n                  component.interactorType,\n                  component.organismName));\n            }\n          }\n        }\n      }\n      ProgressBarComponent.hide();\n    });\n  }\n\n  /**\n   * Prepare query params to build new URL after filter or pagination has changed\n   */\n  private reloadPage(): void {\n    const queryParams: NavigationExtras = {};\n    queryParams['query'] = this._query;\n    queryParams['page'] = this._currentPageIndex;\n    if (this._spicesFilter !== undefined && this._spicesFilter.length !== 0) {\n      queryParams['species'] = this.prepareFiltersForParams(this.spicesFilter);\n    }\n    if (this._bioRoleFilter !== undefined && this._bioRoleFilter.length !== 0) {\n      queryParams['bioRole'] = this.prepareFiltersForParams(this._bioRoleFilter);\n    }\n    if (this._interactorTypeFilter !== undefined && this._interactorTypeFilter.length !== 0) {\n      queryParams['interactorType'] = this.prepareFiltersForParams(this._interactorTypeFilter);\n    }\n    this.router.navigate([], {\n      queryParams,\n      fragment: this.DisplayType\n    });\n    ProgressBarComponent.hide();\n    // This is a test case event for GA, to monitor if users ever use more then one filter.\n    const filterCount = this.getFilterCount();\n    if (1 < filterCount) {\n      this.googleAnalyticsService.fireMultiFilterEvent(filterCount.toString());\n    }\n  }\n\n  private prepareFiltersForParams(filter: string[]): string {\n    return filter.toString().replace(/,/g, '+');\n  }\n\n  private getFilterCount(): number {\n    return this._spicesFilter.length + this._interactorTypeFilter.length + this._bioRoleFilter.length;\n  }\n\n  /**\n   *\n   * @param pageIndex new page index after hitting the paginator to update the URL and reload content\n   */\n  public onPageChange(pageIndex: number): void {\n    this.currentPageIndex = pageIndex;\n    this.reloadPage();\n  }\n\n  public onResetAllFilters(): void {\n    this.spicesFilter = [];\n    this.bioRoleFilter = [];\n    this.interactorTypeFilter = [];\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onSpicesFilterChanged(filter: string[]): void {\n    this.spicesFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onBiologicalRoleFilterChanged(filter: string[]): void {\n    this.bioRoleFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onInteractorTypeFilterChanged(filter: string[]): void {\n    this.interactorTypeFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  get query(): string {\n    return this._query;\n  }\n\n  set query(value) {\n    this._query = value;\n  }\n\n  get currentPageIndex(): number {\n    return this._currentPageIndex;\n  }\n\n  set currentPageIndex(value: number) {\n    this._currentPageIndex = value;\n  }\n\n  get complexSearch(): ComplexSearchResult {\n    return this._complexSearch;\n  }\n\n  set complexSearch(value: ComplexSearchResult) {\n    this._complexSearch = value;\n    this.setFirstDisplayType(); // if only one complex is in the search result, the display is list\n  }\n\n  get lastPageIndex(): number {\n    return this._lastPageIndex;\n  }\n\n  set lastPageIndex(value: number) {\n    this._lastPageIndex = value;\n  }\n\n  get pageSize(): number {\n    return this._pageSize;\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n\n  public get allInteractorsInComplexSearch(): Interactor[] {\n    return this._allInteractorsInComplexSearch;\n  }\n\n  setListView() {\n    this.DisplayType = this.LIST_VIEW;\n    this.notificationService.complexNavigatorAnnouncement();\n    this.reloadPage();\n  }\n\n  setComplexNavigatorView() {\n    this.DisplayType = this.COMPLEX_NAVIGATOR_VIEW;\n    this.reloadPage();\n    this.notificationService.closeAnnouncement();\n  }\n\n  setFirstDisplayType(): void {\n    if (this._complexSearch.elements.length === 1) {\n      const complexId = this._complexSearch.elements[0].complexAC;\n      if (!!complexId) {\n        // For some reason this is needed so the navigate call works\n        this.router.routeReuseStrategy.shouldReuseRoute = function () {\n          return false;\n        };\n        this.router.navigate(['/complex', complexId]);\n      }\n    }\n\n    if (!this.DisplayType) {\n      // Currently the list view is the default, as we are just launching the navigator view\n      // Later on we can change the default view to be the list or navigator view based on number of results\n      this.setListView();\n    }\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ComplexResultsComponent} from './complex-results.component';\nimport {RouterModule} from '@angular/router';\nimport {ComplexPaginatorComponent} from './complex-paginator/complex-paginator.component';\nimport {ComplexFilterComponent} from './complex-filter/complex-filter.component';\nimport {ComplexListComponent} from './complex-list/complex-list.component';\nimport {ProgressSpinnerModule} from '../../shared/loading-indicators/progress-spinner/progress-spinner.module';\nimport {ComplexNavigatorComponent} from './complex-navigator/complex-navigator.component';\nimport {TableStructureComponent} from './complex-navigator/table-structure/table-structure.component';\nimport {TableHeaderComponent} from './complex-navigator/table-structure/table-header/table-header.component';\nimport {\n  TableInteractorColumnComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-column.component';\nimport {\n  TableInteractorNameComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component';\nimport {\n  TableInteractorExternalLinkComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component';\nimport {\n  TableInteractorStoichiometryComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component';\nimport {\n  TableMainInteractorComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component';\nimport {\n  TableSubcomponentInteractorComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component';\nimport {ComplexNavigatorButtonsComponent} from './complex-navigator-buttons/complex-navigator-buttons.component';\nimport {MarkdownModule} from 'ngx-markdown';\nimport {ComplexNavigatorRatingComponent} from './complex-navigator/complex-navigator-rating/complex-navigator-rating.component';\n\n\n@NgModule({\n  imports: [RouterModule.forChild([\n    {path: '', component: ComplexResultsComponent},\n  ]),\n    CommonModule,\n    ProgressSpinnerModule, MarkdownModule\n  ],\n  exports: [\n    TableStructureComponent\n  ],\n  declarations: [ComplexResultsComponent,\n    ComplexListComponent,\n    ComplexFilterComponent,\n    ComplexPaginatorComponent,\n    ComplexNavigatorComponent,\n    TableStructureComponent,\n    TableHeaderComponent,\n    TableInteractorColumnComponent,\n    TableInteractorNameComponent,\n    TableInteractorExternalLinkComponent,\n    TableInteractorStoichiometryComponent,\n    TableMainInteractorComponent,\n    TableSubcomponentInteractorComponent,\n    ComplexNavigatorButtonsComponent,\n    ComplexNavigatorRatingComponent,\n  ]\n})\nexport class ComplexResultsModule {\n}\n","export class Interactor {\n  private _identifier: string;\n  private _identifierLink: string;\n  private _name: string;\n  private _description: string;\n  private _interactorType: string;\n  private _organismName: string;\n\n  constructor(identifier: string,\n              identifierLink: string,\n              name: string,\n              description: string,\n              interactorType: string, organismName: string) {\n    this._identifier = identifier;\n    this._identifierLink = identifierLink;\n    this._name = name;\n    this._description = description;\n    this._interactorType = interactorType;\n    this._organismName = organismName;\n  }\n\n  get identifier(): string {\n    return this._identifier;\n  }\n\n  get identifierLink(): string {\n    return this._identifierLink;\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  get description(): string {\n    return this._description;\n  }\n\n  get interactorType(): string {\n    return this._interactorType;\n  }\n\n  get organismName(): string {\n    return this._organismName;\n  }\n}\n","export default \"<div class=\\\"filters row\\\">\\n  <div class=\\\"columns medium-6\\\"><h3>Filters</h3></div>\\n  <div class=\\\"columns medium-6\\\">\\n    <div *ngIf=\\\"anyFiltersSelected()\\\">\\n      <a class=\\\"button\\\" (click)=\\\"resetAllFilters()\\\"><i class=\\\"icon icon-functional\\\" data-icon=\\\"d\\\"></i> Reset filters</a>\\n    </div>\\n  </div>\\n  <div class=\\\"columns medium-12\\\">\\n    <div *ngIf=\\\"facets.species_f\\\">\\n      <b>Species</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.species_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, spicesFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\" checked>\\n              {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ facetOrganismIcon(facet.name) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\"> {{ facet.name }} ({{ facet.count }})\\n\\n              <i class=\\\"{{ facetOrganismIcon(facet.name) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div *ngIf=\\\"facets.pbiorole_f\\\">\\n      <b>Biological Role</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.pbiorole_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, bioRoleFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\"> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n\\n    <div *ngIf=\\\"facets.ptype_f\\\">\\n      <b>Interactor Type</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.ptype_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, interactorTypeFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ facetTypeIcon(facet) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\"> {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ facetTypeIcon(facet) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n    <div *ngIf=\\\"!facets.species_f && !facets.pbiorole_f && !facets.ptype_f\\\">\\n      <h6>No filters available</h6>\\n    </div>\\n  </div>\\n</div>\\n\";","export default \"<ul class=\\\"no-bullet\\\">\\n  <li *ngFor=\\\"let complex of complexSearch.elements\\\">\\n    <h3><a [routerLink]=\\\"['/complex', complex.complexAC]\\\">{{ complex.complexName }}</a></h3>\\n    <div class=\\\"description\\\" style=\\\"background-color: white\\\">\\n      <b>Complex AC:</b> {{ complex.complexAC }} / <b>Organism:</b> ({{ complex.organismName }})<br>\\n      <b>Description:</b>\\n      <div *ngIf=\\\"complex.description.length <= 250\\\">\\n        {{ complex.description }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n      <div *ngIf=\\\"complex.description.length > 250\\\">\\n        {{ complex.description.substr(0, 250) }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n    </div>\\n  </li>\\n</ul>\\n\";","export default \"<div class=\\\"filters\\\">\\n\\n  <div class=\\\"sortingInteractors\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Sort interactors\\\" class=\\\"button\\\">\\n    <div class=\\\"typeOfSorting\\\">\\n      <input type=\\\"submit\\\" name=\\\"occurrenceClassification\\\" value=\\\"Occurrence\\\" class=\\\"button\\\"\\n             (click)=\\\"InteractorsSorting('Occurrence')\\\">\\n      <input type=\\\"submit\\\" name=\\\"typeClassification\\\" value=\\\"Type\\\" class=\\\"button\\\"\\n             (click)=\\\"InteractorsSorting('Type')\\\">\\n      <input type=\\\"submit\\\" name=\\\"organismClassification\\\" value=\\\"Organism\\\" class=\\\"button\\\"\\n             (click)=\\\"InteractorsSorting('Organism')\\\">\\n      <input type=\\\"submit\\\" name=\\\"geneClassification\\\" value=\\\"Orthology (Not available yet)\\\" class=\\\"button\\\"\\n             (click)=\\\"InteractorsSorting('Orthology')\\\">\\n    </div>\\n  </div>\\n\\n  <div class=\\\"dropdown\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Display Options\\\" class=\\\"button\\\">\\n    <ul class=\\\"displaySize\\\">\\n      <li>\\n        <input type=\\\"radio\\\" name=\\\"organism\\\" value=\\\"Detailed view\\\" class=\\\"checkbox compact\\\" (click)=\\\"compactDisplay()\\\">\\n        Compact display\\n      </li>\\n      <li class=\\\"detailedDisplay\\\">\\n        <input type=\\\"radio\\\" name=\\\"organism\\\" value=\\\"Detailed view\\\" class=\\\"checkbox detailed\\\" (click)=\\\"detailedDisplay()\\\"\\n               checked>\\n        Detailed display\\n        <ul class=\\\"detailedDisplayOptions\\\">\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"organism\\\" value=\\\"organism\\\" class=\\\"checkbox\\\" [checked]=\\\"organismIconDisplay\\\"\\n                   (change)=\\\"DisplayingOrganism()\\\">\\n            Organism\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"type\\\" value=\\\"type\\\" class=\\\"checkbox\\\" [checked]=\\\"interactorTypeDisplay\\\"\\n                   (change)=\\\"DisplayingType()\\\">\\n            Type\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"type\\\" value=\\\"type\\\" class=\\\"checkbox\\\" [checked]=\\\"IDDisplay\\\"\\n                   (change)=\\\"DisplayingID()\\\">\\n            Interactor ID\\n          </li>\\n        </ul>\\n      </li>\\n    </ul>\\n  </div>\\n\\n</div>\\n\";","export default \"<div class=\\\"ratingComponent\\\" *ngIf=\\\"visible===true\\\">\\n  <div class=\\\"text\\\">\\n    <p>Tell us about your experience with the Complex Navigator!</p>\\n    <button class=\\\"close\\\" id=\\\"closePopup\\\" (click)=\\\"ratingVisibility()\\\" style=\\\"color: white\\\">&times;</button>\\n  </div>\\n  <div class=\\\"ratingComponentStars\\\">\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 1}\\\" (click)=\\\"selectRating(1)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 2}\\\" (click)=\\\"selectRating(2)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 3}\\\" (click)=\\\"selectRating(3)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 4}\\\" (click)=\\\"selectRating(4)\\\"> &#9733; </span>\\n    <span class=\\\"star\\\" [ngClass]=\\\"{'selected': selectedRating >= 5}\\\" (click)=\\\"selectRating(5)\\\"> &#9733; </span>\\n  </div>\\n  <input type=\\\"submit\\\" name=\\\"submitButton\\\" value=\\\"Submit Rating\\\" class=\\\"button\\\" (click)=\\\"submitRating()\\\">\\n</div>\\n\";","export default \"<div class=\\\"ComplexNavigator\\\">\\n  <div class=\\\"Buttons\\\">\\n    <cp-complex-navigator-buttons\\n      [(interactorsSorting)]=\\\"interactorsSorting\\\"\\n      [(organismIconDisplay)]=\\\"organismIconDisplay\\\"\\n      [(interactorTypeDisplay)]=\\\"interactorTypeDisplay\\\"\\n      [(IDDisplay)]=\\\"IDDisplay\\\">\\n    </cp-complex-navigator-buttons>\\n  </div>\\n\\n  <cp-table-structure [complexSearch]=\\\"complexSearch\\\"\\n                      [interactors]=\\\"interactors\\\"\\n                      [interactorsSorting]=\\\"interactorsSorting\\\"\\n                      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                      [IDDisplay]=\\\"IDDisplay\\\">\\n  </cp-table-structure>\\n</div>\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"table CN-table\\\">\\n    <!-- When table is not overflowing -->\\n    <thead class=\\\"tableHead\\\" *ngIf=\\\"complexes.length<=8\\\">\\n    <tr>\\n      <th class=\\\"interactorsHeader horizontal\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 135px; max-width: 135px;   border-bottom: 3px solid #007c82;':''\\\">\\n        Interactors\\n      </th>\\n      <th class=\\\"horizontal\\\" *ngFor=\\\"let complex of complexes\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           title=\\\"{{complex.complexAC}}\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n              <div class=\\\"line\\\"></div>\\n                <div class=\\\"horizontal-label\\\">\\n                  <i class=\\\"{{iconOrganism(complex.organismName)}}\\\"></i>\\n                  <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                  {{ complex.complexName }}\\n                </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n    </tr>\\n    </thead>\\n    <!-- When table is overflowing -->\\n    <thead class=\\\"tableHeadOverflow\\\" *ngIf=\\\"complexes.length>8\\\">\\n    <tr [style.--cols]=\\\"complexes.length\\\"\\n        [style.--intHeader]=\\\"isInteractorSortingSet() ? '156px':''\\\">\\n      <th class=\\\"interactorsHeader\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\\\">\\n      </th>\\n      <th class=\\\"rotate\\\" *ngFor=\\\"let complex of complexes\\\"\\n          title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span>\\n              <div class=\\\"tilted-label\\\" title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"\\n                   title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\"></i>\\n                {{ complex.complexName }}\\n              </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n      <div class=\\\"spaceHolder\\\"></div>\\n    </tr>\\n    <tr [style.--cols]=\\\"complexes.length\\\" [style.--intHeader]=\\\"isInteractorSortingSet() ? '156px':''\\\">\\n      <th class=\\\"spaceHolderHeader\\\" [style]=\\\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\\\">\\n        Interactors\\n      </th>\\n      <ng-container *ngFor=\\\" let complex of complexes;\\\">\\n        <th class=\\\"iconOrganism\\\"><i class=\\\"{{iconOrganism(complex.organismName)}}\\\" title=\\\"{{complex.organismName}}\\\"></i>\\n        </th>\\n      </ng-container>\\n      <div class=\\\"spaceHolder\\\"></div>\\n    </tr>\\n    </thead>\\n  </table>\\n</div>\\n\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"interactors-table\\\"\\n         [style.--cols]=\\\"complexes.length\\\"\\n         [style]=\\\"complexes.length>8 ? 'width: calc(130px + 70px * var(--cols) + 183px)':''\\\">\\n    <ng-container *ngFor=\\\" let interactor of enrichedInteractors; let i=index\\\">\\n      <tr *ngIf=\\\"!interactor.hidden\\\">\\n        <ng-container *ngFor=\\\"let oneType of ranges\\\" class=\\\"interactorsOrdering\\\">\\n          <td *ngIf=\\\"oneType[2]===i\\\" [attr.rowspan]=\\\"oneType[1]\\\" class=\\\"interactorSeparation\\\"\\n              title=\\\"{{oneType[0]}}\\\">\\n            <div class=\\\"interactorNameContainer\\\" [style.--rowspanSize]=\\\"oneType[1]\\\">\\n              {{ oneType[0] }}\\n            </div>\\n          </td>\\n        </ng-container>\\n        <td class=\\\"interactorsColumn\\\" [ngClass]=\\\"{horizontalHeader : complexes.length<=8}\\\"\\n            [style]=\\\"ranges.length!=0 ? 'left:3ch':''\\\">\\n          <cp-table-interactor-name\\n            [interactorName]=\\\"interactor.interactor.name\\\"\\n            [interactorType]=\\\"interactor.interactor.interactorType\\\"\\n            [interactorId]=\\\"interactor.interactor.identifier\\\"\\n            [interactorOrganism]=\\\"interactor.interactor.organismName\\\"\\n            [identifierLink]=\\\"interactor.interactor.identifierLink\\\"\\n            [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n            [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n            [IDDisplay]=\\\"IDDisplay\\\"\\n          ></cp-table-interactor-name>\\n          <!-- Icon for the expandable -->\\n          <div class=\\\"container\\\" *ngIf=\\\"interactor.isSubComplex\\\">\\n            <a title=\\\"{{ interactor.interactor.name }} interactors\\\" (click)=\\\"toggleSubcomplexExpandable(i)\\\">\\n              Interactors\\n              <i class=\\\"icon icon-common\\\" data-icon=\\\"&#xf078;\\\"\\n                 style=\\\"font-size:small;\\n                \\\"></i>\\n            </a>\\n          </div>\\n        </td>\\n        <!-- Interactors' stoichiometry -->\\n        <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n          <td class=\\\"intStoich\\\">\\n            <cp-table-main-interactor\\n              [complex]=\\\"complex\\\"\\n              [i]=\\\"i\\\"\\n              [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n            ></cp-table-main-interactor>\\n          </td>\\n        </ng-container>\\n        <div class=\\\"spaceHolder\\\" *ngIf=\\\"complexes.length>8\\\"></div>\\n      </tr>\\n      <!-- Expandable menu for subcomplexes -->\\n      <ng-container *ngIf=\\\"interactor.expanded\\\">\\n        <ng-container *ngIf=\\\"!!interactor.subComponents\\\">\\n          <tr *ngFor=\\\"let el of interactor.subComponents; let j=index\\\"\\n              class=\\\"expandedRows\\\"\\n              [ngClass]=\\\"{'firstExpandedRow': j === 0, 'lastExpandedRow': j === interactor.subComponents.length - 1}\\\">\\n            <td [attr.rowspan]=\\\"interactor.subComponents.length\\\" class=\\\"interactorSeparation\\\"\\n                title=\\\"{{interactor.interactor.name}} interactors\\\"\\n                *ngIf=\\\"j === 0 && (interactorsSorting === 'Type' || interactorsSorting === 'Organism')\\\">\\n              <div class=\\\"interactorSeparationName\\\"\\n                   [style.--rowspanSize]=\\\"interactor.subComponents.length\\\"> {{ interactor.interactor.name }} interactors\\n              </div>\\n            </td>\\n            <td class=\\\"subComponentColumn\\\" [style]=\\\"ranges.length!=0 ? 'left:3ch':''\\\">\\n              <div>\\n                <cp-table-interactor-name\\n                  [interactorName]=\\\"el.name\\\"\\n                  [interactorType]=\\\"el.interactorType\\\"\\n                  [interactorId]=\\\"el.identifier\\\"\\n                  [interactorOrganism]=\\\"interactor.interactor.organismName\\\"\\n                  [identifierLink]=\\\"el.identifierLink\\\"\\n                  [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                  [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                  [IDDisplay]=\\\"IDDisplay\\\"\\n                ></cp-table-interactor-name>\\n              </div>\\n              <cp-table-interactor-external-link\\n                [interactorId]=\\\"el.identifier\\\"\\n                [interactorType]=\\\"el.interactorType\\\"\\n                [identifierLink]=\\\"el.identifierLink\\\"\\n              ></cp-table-interactor-external-link>\\n            </td>\\n            <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n              <td class=\\\"intStoich\\\">\\n                <cp-table-subcomponent-interactor\\n                  [complex]=\\\"complex\\\"\\n                  [i]=\\\"i\\\"\\n                  [j]=\\\"j\\\"\\n                  [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n                ></cp-table-subcomponent-interactor>\\n              </td>\\n            </ng-container>\\n            <div class=\\\"spaceHolder\\\" *ngIf=\\\"complexes.length>6\\\"></div>\\n          </tr>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n  </table>\\n</div>\\n\";","export default \"<div class=\\\"externalLinkContainer\\\">\\n  <a *ngIf=\\\"externalLinkVisible && IDDisplay\\\" href=\\\"{{identifierLink}}\\\" target=\\\"_blank\\\" class=\\\"externalLinkContainer\\\">\\n    {{ interactorId }}\\n    <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\" title=\\\"More information about {{interactorId}}\\\"></i>\\n  </a>\\n</div>\\n\";","export default \"<div class=\\\"container\\\">\\n  <div class=\\\"nameAndIcons\\\" [ngClass]=\\\"{inlineDisplay: interactorType==='stable complex'}\\\">\\n    <i *ngIf=\\\"organismIconDisplay\\\"\\n       class=\\\"{{interactorOrganismIcon}}\\\"\\n       title=\\\"{{interactorOrganism}}\\\"></i>\\n\\n    <i *ngIf=\\\"interactorTypeDisplay\\\"\\n       class=\\\"{{interactorTypeIcon}}\\\"\\n       title=\\\"{{interactorType}}\\\"></i>\\n\\n    <div class=\\\"name\\\" title=\\\"{{interactorName}}\\\" *ngIf=\\\"IDDisplay\\\"> {{ interactorName }}\\n    </div>\\n    <div class=\\\"name\\\" title=\\\"More information about {{interactorId}}\\\" *ngIf=\\\"!IDDisplay\\\">\\n      <a *ngIf=\\\"!IDDisplay\\\" href=\\\"{{identifierLink}}\\\" target=\\\"_blank\\\"\\n         class=\\\"externalLinkContainer\\\">\\n        {{ interactorName }}\\n      </a>\\n    </div>\\n\\n    <a [routerLink]=\\\"['/complex/search']\\\"\\n       [queryParams]=\\\"{query: interactorId, page: 1}\\\"\\n       [preserveFragment]=\\\"true\\\"\\n       target=\\\"_blank\\\">\\n      <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n         title=\\\"Complexes containing this interactor\\\"></i>\\n    </a>\\n  </div>\\n  <cp-table-interactor-external-link\\n    [interactorId]=\\\"interactorId\\\"\\n    [identifierLink]=\\\"identifierLink\\\"\\n    [interactorType]=\\\"interactorType\\\"\\n    [isMainInteractor]=\\\"isMainInteractor\\\"\\n    [IDDisplay]=\\\"IDDisplay\\\"\\n    (externalLinkVisible)=\\\"externalLinkVisibleHandler($event)\\\">\\n  </cp-table-interactor-external-link>\\n</div>\\n\";","export default \"<ng-container>\\n  <div class=\\\"stoichNum\\\" title=\\\"{{ stoichiometryText }}\\\">\\n    {{ stoichiometryValue }}\\n  </div>\\n</ng-container>\\n\";","export default \"<div [ngClass]=\\\"displayTopLineClass(complex, i)\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!findInteractorInComplex(complex.complex, interactor.interactor.identifier)\\\"\\n  [stoichiometryText]=\\\"getStoichiometry(complex.complex, interactor.interactor.identifier)\\\"\\n  [stoichiometryValue]=\\\"stoichiometryOfInteractors(complex.complex, interactor.interactor.identifier)\\\"\\n></cp-table-interactor-stoichiometry>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!findInteractorInComplex(complex.complex, interactor.interactor.identifier) && findInteractorsInSubComplex(complex.complex, interactor.interactor.identifier).length > 0\\\"\\n  [stoichiometryText]=\\\"getStoichiometrySubComplex(complex.complex, interactor.interactor.identifier)\\\"\\n  [stoichiometryValue]=\\\"stoichiometryOfInteractorsMainTable(complex.complex, interactor.interactor.identifier)\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"displayBottomLineClass(complex, i)\\\"></div>\\n\";","export default \"<div [ngClass]=\\\"displayTopLineClass\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"interactorInComplex\\\"\\n  [stoichiometryText]=\\\"interactorStoichiometryText\\\"\\n  [stoichiometryValue]=\\\"interactorStoichiometryValue\\\"\\n></cp-table-interactor-stoichiometry>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"interactorInSubComplex\\\"\\n  [stoichiometryText]=\\\"subComplexInteractorStoichiometryText\\\"\\n  [stoichiometryValue]=\\\"subComplexInteractorStoichiometryValue\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"displayBottomLineClass\\\"></div>\\n\";","export default \"<div class=\\\"complexNavigatorTable\\\">\\n  <div class=\\\"header\\\"\\n       (scroll)=\\\"body.scrollLeft = header.scrollLeft\\\" #header>\\n\\n    <cp-table-header [complexes]=\\\"sortedComplexes\\\"\\n                     [interactorsSorting]=\\\"interactorsSorting\\\">\\n    </cp-table-header>\\n  </div>\\n  <div class=\\\"interactors\\\"\\n       (scroll)=\\\"header.scrollLeft = body.scrollLeft\\\" #body>\\n    <cp-table-interactor-column\\n      [complexes]=\\\"sortedComplexes\\\"\\n      [interactors]=\\\"interactors\\\"\\n      [interactorsSorting]=\\\"interactorsSorting\\\"\\n      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n      [IDDisplay]=\\\"IDDisplay\\\">\\n    </cp-table-interactor-column>\\n  </div>\\n  <div class=\\\"spaceHolder\\\"></div>\\n</div>\\n\\n\";","export default \"<div>\\n  <h5 class=\\\"text-center\\\">{{ currentPageIndex }} of {{ lastPageIndex }}</h5>\\n  <ul class=\\\"pagination text-center\\\" role=\\\"navigation\\\" aria-label=\\\"Pagination\\\">\\n    <li class=\\\"arrow unavailable\\\" *ngIf=\\\"currentPageIndex != 1\\\" aria-disabled=\\\"true\\\"><a\\n      (click)=\\\"getFirstPage()\\\">&Lang; First</a></li>\\n    <li class=\\\"arrow unavailable\\\" *ngIf=\\\"currentPageIndex != 1\\\" aria-disabled=\\\"true\\\"><a\\n      (click)=\\\"getPreviousPage()\\\">&lang; Previous</a></li>\\n    <ng-container *ngFor=\\\"let index of pagination\\\">\\n      <li *ngIf=\\\"index[1] == 'true'\\\" class=\\\"current\\\"><span class=\\\"show-for-sr\\\">You're on page</span>{{ index[0] }}</li>\\n      <li *ngIf=\\\"index[1] == 'false'\\\"><a (click)=\\\"getPage(index[0])\\\">{{ index[0] }}</a></li>\\n    </ng-container>\\n    <li class=\\\"arrow\\\" *ngIf=\\\"currentPageIndex != lastPageIndex\\\"><a (click)=\\\"getNextPage()\\\">Next &rang;</a></li>\\n    <li class=\\\"arrow\\\" *ngIf=\\\"currentPageIndex != lastPageIndex\\\"><a (click)=\\\"getLastPage()\\\">Last &Rang;</a></li>\\n  </ul>\\n</div>\\n\";","export default \"<div class=\\\"margin-top-large margin-bottom-large row\\\">\\n  <ng-container *ngIf=\\\"complexSearch;else loadingSpinner\\\">\\n    <div class=\\\"columns medium-12\\\" *ngIf=\\\"complexSearch.totalNumberOfResults !== 0\\\">\\n      <h2 class=\\\"padding-left-large leftAligned\\\">Total number of\\n        results: {{ complexSearch.totalNumberOfResults }} </h2>\\n      <div class=\\\"row\\\">\\n        <cp-complex-navigator-rating *ngIf=\\\"DisplayType=== COMPLEX_NAVIGATOR_VIEW\\\">\\n        </cp-complex-navigator-rating>\\n        <div class=\\\"displayButton columns medium-8\\\" style=\\\"text-align: center; padding-left: 10px\\\">\\n          <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button\\\"\\n                  (click)=\\\"setListView()\\\" [ngClass]=\\\"{'selected': DisplayType === LIST_VIEW}\\\">\\n            View list\\n          </button>\\n          <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button cnButton\\\"\\n                  (click)=\\\"setComplexNavigatorView()\\\" [ngClass]=\\\"{'selected': DisplayType === COMPLEX_NAVIGATOR_VIEW}\\\">\\n            View Complex Navigator\\n            <span class=\\\"new-tag\\\" [ngClass]=\\\"{'new-tag-selected': DisplayType === COMPLEX_NAVIGATOR_VIEW}\\\">NEW!</span>\\n          </button>\\n        </div>\\n      </div>\\n      <div class=\\\"columns medium-4 filterColumn leftAligned\\\">\\n        <cp-complex-filter *ngIf=\\\"spicesFilter && bioRoleFilter && interactorTypeFilter\\\"\\n                           [spicesFilter]=\\\"spicesFilter\\\"\\n                           [bioRoleFilter]=\\\"bioRoleFilter\\\"\\n                           [interactorTypeFilter]=\\\"interactorTypeFilter\\\" [facets]=\\\"complexSearch.facets\\\"\\n                           (onResetAllFilters)=\\\"onResetAllFilters()\\\"\\n                           (onSpicesFilterChanged)=\\\"onSpicesFilterChanged($event)\\\"\\n                           (onBiologicalRoleFilterChanged)=\\\"onBiologicalRoleFilterChanged($event)\\\"\\n                           (onInteractorTypeFilterChanged)=\\\"onInteractorTypeFilterChanged($event)\\\">\\n        </cp-complex-filter>\\n      </div>\\n      <div class=\\\"columns medium-8\\\">\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n        <cp-complex-list class=\\\"listOfResults\\\" *ngIf=\\\"DisplayType===LIST_VIEW\\\"\\n                         [complexSearch]=\\\"complexSearch\\\">\\n        </cp-complex-list>\\n        <cp-complex-navigator class=\\\"Complex-navigator\\\" *ngIf=\\\"DisplayType===COMPLEX_NAVIGATOR_VIEW\\\"\\n                              [complexSearch]=\\\"complexSearch\\\"\\n                              [interactors]=\\\"allInteractorsInComplexSearch\\\">\\n        </cp-complex-navigator>\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"columns medium-12 callout alert\\\" *ngIf=\\\"complexSearch.totalNumberOfResults === 0\\\">\\n      <h2>No Complex Portal results found</h2>\\n      <h3>We're sorry but we couldn't find anything that matched your search for: <b>{{ query }}</b></h3>\\n      <h4>Please consider refining your terms:</h4>\\n      <ul>\\n        <li>Make sure all words are spelled correctly</li>\\n        <li>Try different keywords</li>\\n        <li>Be more precise: use gene or protein IDs, e.g. Ndc80 or Q04571</li>\\n        <li>Remove quotes around phrases to search for each word individually. bike shed will often show more results\\n          than\\n          \\\"bike shed\\\"\\n        </li>\\n      </ul>\\n    </div>\\n  </ng-container>\\n  <ng-template #loadingSpinner>\\n    <cp-progress-spinner [query]=\\\"query\\\"></cp-progress-spinner>\\n  </ng-template>\\n</div>\\n\";"]}