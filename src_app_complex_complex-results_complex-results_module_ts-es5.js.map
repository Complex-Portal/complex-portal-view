{"version":3,"mappings":"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","names":["ComplexFilterComponent","googleAnalyticsService","_classCallCheck","_angular_core__WEBPACK_IMPORTED_MODULE_3__","_createClass","key","value","filter","status","spicesFilter","push","fireAddedFilterEvent","splice","indexOf","fireRemovedFilterEvent","onSpicesFilterChanged","emit","bioRoleFilter","onBiologicalRoleFilterChanged","interactorTypeFilter","onInteractorTypeFilterChanged","onResetAllFilters","_spicesFilter","length","_bioRoleFilter","_interactorTypeFilter","element","get","_facets","set","_shared_google_analytics_service_analytics_service__WEBPACK_IMPORTED_MODULE_2__","selector","template","ComplexListComponent","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ComplexNavigatorComponent","router","_interactors","_angular_router__WEBPACK_IMPORTED_MODULE_2__","TableHeaderComponent","EnrichedInteractor","EnrichedComplex","TableInteractorColumnComponent","complexPortalService","_enrichedInteractors","_enrichedComplexes","_step","interactor","isSubComplex","interactorType","newEnrichedInteractor","hidden","expanded","subComponents","partOfComplex","_this","loadSubInteractors","subscribe","_loop","_iterator","calculateAllStartAndEndIndexes","complex","componentId","components","find","component","identifier","interactorId","some","map","subComponent","match","findInteractorInComplex","formatStochiometryValues","stochiometry","findInteractorInSubcomplex","matches","findInteractorsInSubComplex","stochiometryValues","addedStoichiometryValues","toString","identifierLink","i","j","subInteractorIds","includes","foundComplex","complexSearch","elements","complexAC","getComplexAc","pipe","participants","_shared_model_complex_results_complex_component_model__WEBPACK_IMPORTED_MODULE_2__","participant","name","description","pattern","matchedStochometry","fetchValuesFromStochiometry","minValue","parseInt","maxValue","_step2","_iterator2","_step3","calculateStartAndEndIndexes","_iterator3","valueA","valueB","Math","min","interactorIndex","doesLineCrossInteractorCell","doesLineEndOnInteractorCell","doesLineStartOnInteractorCell","subComponentIndex","doesLineCrossSubcomponentCell","doesLineEndOnSubcomponentCell","doesLineStartOnSubcomponentCell","max","subComponentsToCheck","enrichedComplex","startInteractorIndex","endInteractorIndex","startSubComponentIndex","endSubComponentIndex","getMinValue","getMaxValue","forEach","k","_this2","_this3","_shared_service_complex_portal_service__WEBPACK_IMPORTED_MODULE_3__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","TableStructureComponent","ComplexPaginatorComponent","updatePaginatior","changes","start","end","pagination","_lastPageIndex","_currentPageIndex","_pagination","onPageChange","lastPageIndex","pageIndex","currentPageIndex","ComplexResultsComponent","route","titleService","setTitle","_allInteractorsInComplexSearch","queryParams","_this4","_query","split","Number","requestComplexResults","document","body","scrollTop","findComplex","query","pageSize","_this5","totalNumberOfResults","ceil","_step4","_shared_model_complex_results_interactor_model__WEBPACK_IMPORTED_MODULE_5__","_loop2","_iterator4","_shared_loading_indicators_progress_bar_progress_bar_component__WEBPACK_IMPORTED_MODULE_3__","undefined","prepareFiltersForParams","navigate","filterCount","getFilterCount","fireMultiFilterEvent","replace","reloadPage","_complexSearch","_pageSize","DisplayType","_angular_router__WEBPACK_IMPORTED_MODULE_6__","_shared_service_complex_portal_service__WEBPACK_IMPORTED_MODULE_2__","_angular_platform_browser__WEBPACK_IMPORTED_MODULE_7__","_shared_google_analytics_service_analytics_service__WEBPACK_IMPORTED_MODULE_4__","ComplexResultsModule","imports","_angular_router__WEBPACK_IMPORTED_MODULE_10__","path","_complex_results_component__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_11__","_shared_loading_indicators_progress_spinner_progress_spinner_module__WEBPACK_IMPORTED_MODULE_4__","exports","_complex_navigator_table_structure_table_structure_component__WEBPACK_IMPORTED_MODULE_6__","declarations","_complex_list_complex_list_component__WEBPACK_IMPORTED_MODULE_3__","_complex_filter_complex_filter_component__WEBPACK_IMPORTED_MODULE_2__","_complex_paginator_complex_paginator_component__WEBPACK_IMPORTED_MODULE_1__","_complex_navigator_complex_navigator_component__WEBPACK_IMPORTED_MODULE_5__","_complex_navigator_table_structure_table_header_table_header_component__WEBPACK_IMPORTED_MODULE_7__","_complex_navigator_table_structure_table_interactor_column_table_interactor_column_component__WEBPACK_IMPORTED_MODULE_8__","ComplexComponent","_identifier","_identifierLink","_name","_description","_stochiometry","_interactorType","Interactor","__webpack_exports__"],"sources":["webpack:///src/app/complex/complex-results/complex-filter/complex-filter.component.ts","webpack:///src/app/complex/complex-results/complex-list/complex-list.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.ts","webpack:///src/app/complex/complex-results/complex-paginator/complex-paginator.component.ts","webpack:///src/app/complex/complex-results/complex-results.component.ts","webpack:///src/app/complex/complex-results/complex-results.module.ts","webpack:///src/app/complex/shared/model/complex-results/complex-component.model.ts","webpack:///src/app/complex/shared/model/complex-results/interactor.model.ts","webpack:///src/app/complex/complex-results/complex-filter/complex-filter.component.html","webpack:///src/app/complex/complex-results/complex-list/complex-list.component.html","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.html","webpack:///src/app/complex/complex-results/complex-paginator/complex-paginator.component.html","webpack:///src/app/complex/complex-results/complex-results.component.html"],"sourcesContent":["import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Facets} from '../../shared/model/complex-results/facets.model';\nimport {AnalyticsService} from '../../../shared/google-analytics/service/analytics.service';\n\n@Component({\n  selector: 'cp-complex-filter',\n  templateUrl: './complex-filter.component.html',\n  styleUrls: ['./complex-filter.component.css']\n})\nexport class ComplexFilterComponent implements OnInit {\n\n  private _facets: Facets;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n\n  @Output() onSpicesFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onBiologicalRoleFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onInteractorTypeFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onResetAllFilters: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private googleAnalyticsService: AnalyticsService) {\n  }\n\n  ngOnInit() {\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeSpeciesFilter(filter: string, status: boolean) {\n    if (status) {\n      this.spicesFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.spicesFilter.splice(this.spicesFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onSpicesFilterChanged.emit(this.spicesFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeBiologicalRoleFilter(filter: string, status: boolean) {\n    if (status) {\n      this.bioRoleFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.bioRoleFilter.splice(this.bioRoleFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onBiologicalRoleFilterChanged.emit(this.bioRoleFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeInteractorTypeFilter(filter: string, status: boolean) {\n    if (status) {\n      this.interactorTypeFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.interactorTypeFilter.splice(this.interactorTypeFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onInteractorTypeFilterChanged.emit(this.interactorTypeFilter);\n  }\n\n  /**\n   * Emit event to parent component to remove all filters\n   */\n  public resetAllFilters() {\n    this.onResetAllFilters.emit(true);\n  }\n\n  /**\n   *\n   * @returns {boolean} true is any filter array contains an filter\n   */\n  public anyFiltersSelected() {\n    return (this._spicesFilter.length !== 0 || this._bioRoleFilter.length !== 0 || this._interactorTypeFilter.length !== 0);\n  }\n\n  /**\n   *\n   * @param element filter to check if already selected\n   * @param filter selected filters\n   * @returns {boolean} true if filter is already in selected filters\n   */\n  public isSelected(element: string, filter: string[]): boolean {\n    return filter.indexOf(element) !== -1;\n  }\n\n  get facets(): Facets {\n    return this._facets;\n  }\n\n  @Input()\n  set facets(value: Facets) {\n    this._facets = value;\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  @Input()\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  @Input()\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  @Input()\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\n\n@Component({\n  selector: 'cp-complex-list',\n  templateUrl: './complex-list.component.html',\n  styleUrls: ['./complex-list.component.css']\n})\nexport class ComplexListComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\nimport {Router} from '@angular/router';\n\n\n@Component({\n  selector: 'cp-complex-navigator',\n  templateUrl: './complex-navigator.component.html',\n  styleUrls: ['./complex-navigator.component.css']\n})\nexport class ComplexNavigatorComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n  _interactors: Set<Interactor>;\n\n  constructor(private router: Router) {\n  }\n\n  ngOnInit() {\n  }\n\n  get interactors(): Set<Interactor> {\n    return this._interactors;\n  }\n\n  @Input()\n  set interactors(value: Set<Interactor>) {\n    this._interactors = value;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../../../shared/model/complex-results/complex-search.model';\n\n@Component({\n  selector: 'cp-table-header',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css']\n})\nexport class TableHeaderComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n  }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../../shared/model/complex-results/interactor.model';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {Observable} from 'rxjs/Observable';\nimport {of} from 'rxjs';\nimport {ComplexPortalService} from '../../../../shared/service/complex-portal.service';\nimport {map} from 'rxjs/operators';\n\nclass EnrichedInteractor {\n  interactor: Interactor;\n  hidden: boolean;\n  isSubComplex: boolean;\n  expanded: boolean;\n  subComponents: ComplexComponent[];\n  partOfComplex: number[];\n}\n\nclass EnrichedComplex {\n  complex: Element;\n  startInteractorIndex: number;\n  endInteractorIndex: number;\n  startSubComponentIndex: number;\n  endSubComponentIndex: number;\n}\n\n@Component({\n  selector: 'cp-table-interactor-column',\n  templateUrl: './table-interactor-column.component.html',\n  styleUrls: ['./table-interactor-column.component.css']\n})\nexport class TableInteractorColumnComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n  _enrichedInteractors: EnrichedInteractor[];\n  _enrichedComplexes: EnrichedComplex[];\n\n  constructor(private complexPortalService: ComplexPortalService) {\n  }\n\n  ngOnInit() {\n  }\n\n  get enrichedInteractors(): EnrichedInteractor[] {\n    return this._enrichedInteractors;\n  }\n\n  get enrichedComplexes(): EnrichedComplex[] {\n    return this._enrichedComplexes;\n  }\n\n  @Input()\n  set interactors(value: Set<Interactor>) {\n    this._enrichedInteractors = [];\n    for (const interactor of value) {\n      const isSubComplex = interactor.interactorType === 'stable complex';\n      const newEnrichedInteractor: EnrichedInteractor = {\n        interactor,\n        hidden: false,\n        isSubComplex,\n        expanded: false,\n        subComponents: null,\n        partOfComplex: []\n      };\n      if (isSubComplex) {\n        this.loadSubInteractors(newEnrichedInteractor).subscribe(subComponents => newEnrichedInteractor.subComponents = subComponents);\n      }\n      this._enrichedInteractors.push(newEnrichedInteractor);\n    }\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  findInteractorInComplex(complex: Element, componentId: string): ComplexComponent {\n    return complex.components.find(component => component.identifier === componentId);\n  }\n\n  findInteractorsInSubComplex(complex: Element, interactorId: string): ComplexComponent[] {\n    return this._enrichedInteractors\n      // filter subcomplexes\n      .filter(interactor => interactor.isSubComplex)\n      // filter subcomplexes included in complex\n      .filter(interactor =>\n        complex.components.some(component => component.identifier === interactor.interactor.identifier))\n      // filter subcomplexes that match the componentId\n      .filter(interactor => !!interactor.subComponents)\n      .map(interactor => interactor.subComponents.find(subComponent => subComponent.identifier === interactorId))\n      .filter(component => !!component);\n  }\n\n  public findInteractorInExpandedSubComplex(interactor: EnrichedInteractor, complex: Element, interactorId: string): ComplexComponent {\n    if (complex.components.some(component => component.identifier === interactor.interactor.identifier)) {\n      return interactor.subComponents.find(component => component.identifier === interactorId);\n    }\n    return null;\n  }\n\n  stochiometryOfInteractors(complex: Element, interactorId: string): string {\n    const match = this.findInteractorInComplex(complex, interactorId);\n    if (!!match) {\n      return this.formatStochiometryValues(match.stochiometry);\n    }\n    return null;\n  }\n\n  stoichiometryOfInteractorsExpandable(interactor: EnrichedInteractor, interactorId: string): string {\n    const match = this.findInteractorInSubcomplex(interactor, interactorId);\n    if (!!match) {\n      return this.formatStochiometryValues(match.stochiometry);\n    }\n    return null;\n  }\n\n  stoichiometryOfInteractorsMainTable(complex: Element, interactorId: string): string {\n    const matches = this.findInteractorsInSubComplex(complex, interactorId);\n    if (matches.length > 0) {\n      const stochiometryValues = this.addedStoichiometryValues(matches);\n      if (!!stochiometryValues) {\n        if (stochiometryValues[0] === stochiometryValues[1]) {\n          return stochiometryValues[0].toString();\n        } else {\n          return `${stochiometryValues[0]}, ${stochiometryValues[1]}`;\n        }\n      } else {\n        return ' ';\n      }\n    }\n    return null;\n  }\n\n  getStochiometry(complex: Element, componentId: string): string {\n    const match = this.findInteractorInComplex(complex, componentId);\n    if (!!match) {\n      if (!!match.stochiometry) {\n        return 'Stoichiometry values: ' + (match.stochiometry);\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  getStoichiometrySubComplex(complex: Element, interactorId: string): string {\n    const matches = this.findInteractorsInSubComplex(complex, interactorId);\n    if (matches.length > 0) {\n      const stochiometryValues = this.addedStoichiometryValues(matches);\n      if (!!stochiometryValues) {\n        return `Stoichiometry values: minValue: ${stochiometryValues[0]}, maxValue: ${stochiometryValues[1]}`;\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  getStochiometryInExpandedSubComplex(interactor: EnrichedInteractor, interactorId: string): string {\n    const match = this.findInteractorInSubcomplex(interactor, interactorId);\n    if (!!match) {\n      if (!!match.stochiometry) {\n        return 'Stoichiometry values: ' + (match.stochiometry);\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  showExternalLink(component: Interactor | ComplexComponent): boolean {\n    return component.interactorType !== 'stable complex' && !!component.identifierLink;\n  }\n\n  toggleSubcomplexExpandable(i: number): void {\n    this._enrichedInteractors[i].expanded = !this._enrichedInteractors[i].expanded;\n\n    if (this._enrichedInteractors[i].expanded) {\n      // EnrichedInteractor has been expanded, we need to:\n\n      // 1. Collapse the other ones, in case there is any other expanded\n      for (let j = 0; j < this._enrichedInteractors.length; j++) {\n        if (i !== j) {\n          this._enrichedInteractors[j].expanded = false;\n        }\n      }\n\n      // 2. Hide any interactor now displayed in the expanded section\n      if (!!this._enrichedInteractors[i].subComponents) {\n        const subInteractorIds: string[] = this._enrichedInteractors[i].subComponents.map(component => component.identifier);\n        for (let j = 0; j < this._enrichedInteractors.length; j++) {\n          if (i !== j) {\n            this._enrichedInteractors[j].hidden = !!subInteractorIds.includes(this._enrichedInteractors[j].interactor.identifier);\n          }\n        }\n      }\n    } else {\n      // EnrichedInteractor has been collapsed, we need to:\n      // 1. Display any interactor previously hidden\n      for (let j = 0; j < this._enrichedInteractors.length; j++) {\n        this._enrichedInteractors[j].hidden = false;\n      }\n    }\n\n    // Something has been expanded or collapsed, we need to recalculate the start and end indexes for the lines\n    this.calculateAllStartAndEndIndexes();\n  }\n\n\n  public interactorTypeIcon(interactor: Interactor): string {\n    switch (interactor.interactorType) {\n      case 'small molecule':\n        return 'icon icon-conceptual icon-chemical';\n      case 'protein':\n      case 'peptide':\n        return 'icon icon-conceptual icon-proteins';\n      case 'stable complex':\n        return 'icon icon-conceptual icon-systems';\n      case 'molecule set':\n        return 'icon icon-generic icon-math';\n      case 'single stranded deoxyribonucleic acid':\n      case 'double stranded deoxyribonucleic acid':\n      case 'small nuclear rna':\n      case 'small nucleolar rna':\n      case 'ribosomal rna':\n      case 'messenger rna':\n      case 'transfer rna':\n      case 'signal recognition particle rna':\n      case 'ribonucleic acid':\n      case 'nucleic acid':\n      case 'long non-coding ribonucleic acid':\n        return 'icon icon-conceptual icon-dna';\n    }\n  }\n\n\n  private loadSubInteractors(interactor: EnrichedInteractor): Observable<ComplexComponent[]> {\n    // this function returns the list of subcomponents of an interactor of type stable complex\n    const foundComplex: Element = this.complexSearch.elements.find(complex => complex.complexAC === interactor.interactor.identifier);\n    if (!!foundComplex) {\n      return of(foundComplex.components);\n    } else {\n      // Actually call the back-end to fetch these\n      return this.complexPortalService.getComplexAc(interactor.interactor.identifier)\n        .pipe(map(complex => complex.participants.map(participant => new ComplexComponent(\n          participant.identifier,\n          participant.identifierLink,\n          participant.name,\n          participant.description,\n          participant.stochiometry,\n          participant.interactorType))));\n    }\n  }\n\n  private findInteractorInSubcomplex(interactor: EnrichedInteractor, interactorId: string): ComplexComponent {\n    return interactor.subComponents.find(component => component.identifier === interactorId);\n  }\n\n  private fetchValuesFromStochiometry(stochiometry: string) {\n    const pattern = 'minValue: ([0-9+]), maxValue: ([0-9+])';\n    return stochiometry.match(pattern);\n  }\n\n  private formatStochiometryValues(stochiometry: string): string {\n    if (!!stochiometry) {\n      const matchedStochometry = this.fetchValuesFromStochiometry(stochiometry);\n      if (!!matchedStochometry) {\n        // tslint:disable-next-line:radix\n        const minValue = parseInt(matchedStochometry[1]);\n        // tslint:disable-next-line:radix\n        const maxValue = parseInt(matchedStochometry[2]);\n        if (minValue === maxValue) {\n          return minValue.toString();\n        } else {\n          return `${minValue}, ${maxValue}`;\n        }\n      }\n    }\n    return ' '; // sometimes we don't have the stoichiometry value\n  }\n\n  private addedStoichiometryValues(components: ComplexComponent[]): [number, number] {\n    let minValue: number = null;\n    let maxValue: number = null;\n    for (const component of components) {\n      if (!!component.stochiometry) {\n        const matchedStochometry = this.fetchValuesFromStochiometry(component.stochiometry);\n        if (!!matchedStochometry) {\n          if (minValue === null) {\n            minValue = 0;\n          }\n          if (maxValue === null) {\n            maxValue = 0;\n          }\n          // tslint:disable-next-line:radix\n          minValue += parseInt(matchedStochometry[1]);\n          // tslint:disable-next-line:radix\n          maxValue += parseInt(matchedStochometry[2]);\n        }\n      }\n    }\n    if (minValue !== null && maxValue !== null) {\n      return [minValue, maxValue];\n    }\n    return null;\n  }\n\n  private calculateAllStartAndEndIndexes(): void {\n    this._enrichedComplexes = [];\n    for (const complex of this.complexSearch.elements) {\n      this._enrichedComplexes.push(this.calculateStartAndEndIndexes(complex));\n    }\n  }\n\n  private getMinValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.min(valueA, valueB);\n  }\n\n  public displayTopLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex) || this.doesLineEndOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex) || this.doesLineStartOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayTopLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex) ||\n      this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex) ||\n      this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private getMaxValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.max(valueA, valueB);\n  }\n\n  private calculateStartAndEndIndexes(complex: Element): EnrichedComplex {\n    const subComponentsToCheck: string[] = [];\n\n    const enrichedComplex: EnrichedComplex = {\n      complex,\n      startInteractorIndex: null,\n      endInteractorIndex: null,\n      startSubComponentIndex: null,\n      endSubComponentIndex: null\n    };\n\n    // We iterate through the interactors to find the first and last one part of the complex\n    // We do this to be able to draw a line connecting all interactors in the complex\n    for (let i = 0; i < this._enrichedInteractors.length; i++) {\n      if (!this._enrichedInteractors[i].hidden) {\n        for (let j = 0; j < complex.components.length; j++) {\n          if (complex.components[j].identifier === this._enrichedInteractors[i].interactor.identifier) {\n            // The interactor is part of the complex, we update the start and end indices for the interactors\n            // line as it may start in this interactor\n            enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n            enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n\n            // The interactor is a subcomplex\n            if (this._enrichedInteractors[i].isSubComplex && !!this._enrichedInteractors[i].subComponents) {\n              // The subcomponents of that subcomplex could also be displayed in the table as separate interactors.\n              // In that case, the line could start or end there, so we need to also check the position of those\n              // interactors. We add those subcomponents to 'subComponentsToCheck' to check their position later\n              this._enrichedInteractors[i].subComponents.forEach(subComponent => subComponentsToCheck.push(subComponent.identifier));\n              if (this._enrichedInteractors[i].expanded) {\n                // If the subcomplex is expanded, as the subcomplex is part of the complex, all its subcomponents are also part\n                // of it. That means we need a line connecting all the subcomponents.\n                // That line must also connect to the subcomplex, so we start it at -1 to make sure it starts at the interactor cell\n                // and not at the first subcomponent\n                enrichedComplex.startSubComponentIndex = -1;\n                enrichedComplex.endSubComponentIndex = this._enrichedInteractors[i].subComponents.length - 1;\n              }\n            }\n          } else if (this._enrichedInteractors[i].isSubComplex &&\n            !!this._enrichedInteractors[i].subComponents &&\n            this._enrichedInteractors[i].expanded) {\n            // The interactor is not part of the complex but it is a subcomplex and it is expanded.\n            // This means the subcomponents of the subcomplex are visible, and any of them could be part of the complex.\n            // In that case, the line could start or end on any of those subcomponents\n            for (let k = 0; k < this._enrichedInteractors[i].subComponents.length; k++) {\n              if (complex.components[j].identifier === this._enrichedInteractors[i].subComponents[k].identifier) {\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the interactors\n                // line as it may start in this interactor\n                enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n                enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the subcomponents\n                // line as it may start in this subcomponent\n                enrichedComplex.startSubComponentIndex = this.getMinValue(enrichedComplex.startSubComponentIndex, k);\n                enrichedComplex.endSubComponentIndex = this.getMaxValue(enrichedComplex.endSubComponentIndex, k);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // We finally check the position of the subcomponents of subcomplexes part of the complex on the main table.\n    // If any is before or after where the lines start and end, then we need to update the start and end indexes,\n    // as the line must start or end there\n    for (let i = 0; i < this._enrichedInteractors.length; i++) {\n      if (!this._enrichedInteractors[i].hidden) {\n        if (subComponentsToCheck.includes(this._enrichedInteractors[i].interactor.identifier)) {\n          // The interactor is part of a subcomplex that is part of the complex, we update the start and end indices for the interactors\n          // line as it may start in this interactor\n          enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n          enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n        }\n      }\n    }\n\n    return enrichedComplex;\n  }\n\n  private doesLineCrossInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n\n      // The line starts before this interactor and ends after, so it crosses through the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      // The line starts before this interactor and end at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor and it musy cross through the interactor cell to the subcomponents\n        if (this._enrichedInteractors[interactorIndex].isSubComplex && this._enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n\n      if (!this._enrichedInteractors[interactorIndex].isSubComplex) {\n        // If the interactor is not a subcomplex, then the interactor has no subcomponents and the line starts in it\n        return true;\n      }\n      // If the interactor is a subcomplex.\n      // If the interactor is actually part of the complex, the line starts in this interactor\n      // Otherwise, the line actually starts on one of the subcomponets of the complex, but not on the interactor itself, as it is\n      // not part of the complex.\n      if (complex.complex.components.some(component =>\n        this._enrichedInteractors[interactorIndex].interactor.identifier === component.identifier)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line ends at this interactor or on any of its subcomponents\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n\n      // The line starts before this interactor and ends at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor and it must cross through to the subcomponents\n        if (this._enrichedInteractors[interactorIndex].isSubComplex && this._enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private doesLineCrossSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n      // The line starts before this interactor and ends after, so it crosses through all the subcomponents of the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n        // The line starts before this subcomponent and ends after, so it crosses through the subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this interactor and it ends on a later subcomponent, so it crosses through this subcomponent\n        if (complex.startInteractorIndex < interactorIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this subcomponent and it ends on a later interactor, so it crosses through this subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endInteractorIndex > interactorIndex) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n      if (complex.startSubComponentIndex != null && complex.startSubComponentIndex === subComponentIndex) {\n        // If the subcomplex is a component of the complex, the line starts in the cell of the interactor, meaning it cannot\n        // start on any subcomponent.\n        // Otherwise, it starts on the subcomponent with the index subComponentIndex\n        if (complex.complex.components.some(component =>\n          this._enrichedInteractors[interactorIndex].interactor.identifier === component.identifier)) {\n          return false;\n        }\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n      // The line ends at this interactor and this subcomponent\n      if (complex.endSubComponentIndex != null && complex.endSubComponentIndex === subComponentIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../shared/model/complex-results/interactor.model';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'cp-table-structure',\n  templateUrl: './table-structure.component.html',\n  styleUrls: ['./table-structure.component.css']\n})\nexport class TableStructureComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n  _interactors: Set<Interactor>;\n\n  constructor(private router: Router) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  get interactors(): Set<Interactor> {\n    return this._interactors;\n  }\n\n  @Input()\n  set interactors(value: Set<Interactor>) {\n    this._interactors = value;\n  }\n\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-paginator',\n  templateUrl: './complex-paginator.component.html',\n  styleUrls: ['./complex-paginator.component.css']\n})\nexport class ComplexPaginatorComponent implements OnInit, OnChanges {\n  private _lastPageIndex: number;\n  private _currentPageIndex: number;\n  private _pagination: any;\n\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter<number>();\n\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.updatePaginatior();\n  }\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.updatePaginatior();\n  }\n\n  public updatePaginatior(): void {\n    let start: number;\n    let end: number;\n    this.pagination = [];\n    if (this._lastPageIndex < 5) {\n      start = 1;\n      end = this._lastPageIndex;\n\n    } else {\n      if (this._currentPageIndex === 1 || this._currentPageIndex === 2) {\n        start = 1;\n        end = 5;\n      } else if (this._currentPageIndex === this._lastPageIndex || this._currentPageIndex === this._lastPageIndex - 1) {\n        start = this._lastPageIndex - 4;\n        end = this._lastPageIndex;\n      } else {\n        start = this._currentPageIndex - 2;\n        end = this._currentPageIndex + 2;\n      }\n    }\n    while (start <= end) {\n      if (start === this._currentPageIndex) {\n        this._pagination.push([[this._currentPageIndex], [true]]);\n      } else {\n        this._pagination.push([[start], [false]]);\n      }\n      start++;\n    }\n  }\n\n  public getFirstPage(): void {\n    this.onPageChange.emit(1);\n  }\n\n  public getLastPage(): void {\n    this.onPageChange.emit(this.lastPageIndex);\n  }\n\n  public getPage(pageIndex: number) {\n    this.onPageChange.emit(pageIndex);\n  }\n\n  public getPreviousPage(): void {\n    this.onPageChange.emit(this.currentPageIndex - 1);\n  }\n\n  public getNextPage(): void {\n    this.onPageChange.emit(this.currentPageIndex + 1);\n  }\n\n  get lastPageIndex() {\n    return this._lastPageIndex;\n  }\n\n  @Input()\n  set lastPageIndex(value) {\n    this._lastPageIndex = value;\n  }\n\n  get currentPageIndex() {\n    return this._currentPageIndex;\n  }\n\n  @Input()\n  set currentPageIndex(value) {\n    this._currentPageIndex = value;\n  }\n\n  get pagination() {\n    return this._pagination;\n  }\n\n  set pagination(value) {\n    this._pagination = value;\n  }\n}\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, NavigationExtras, Router} from '@angular/router';\nimport {ComplexSearchResult} from '../shared/model/complex-results/complex-search.model';\nimport {ComplexPortalService} from '../shared/service/complex-portal.service';\nimport {ProgressBarComponent} from '../../shared/loading-indicators/progress-bar/progress-bar.component';\nimport {Title} from '@angular/platform-browser';\nimport {AnalyticsService} from '../../shared/google-analytics/service/analytics.service';\nimport {Interactor} from '../shared/model/complex-results/interactor.model';\n\n\n@Component({\n  selector: 'cp-complex-results',\n  templateUrl: './complex-results.component.html',\n  styleUrls: ['./complex-results.component.css'],\n})\nexport class ComplexResultsComponent implements OnInit, AfterViewInit {\n  private _query: string;\n  private _currentPageIndex: number;\n  private _complexSearch: ComplexSearchResult;\n  private _lastPageIndex: number;\n  private _pageSize = 15;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n  private _allInteractorsInComplexSearch: Interactor[] = [];\n  DisplayType = true;\n\n\n  constructor(private route: ActivatedRoute, private router: Router,\n              private complexPortalService: ComplexPortalService, private titleService: Title,\n              private googleAnalyticsService: AnalyticsService,\n  ) {\n  }\n\n  ngOnInit() {\n    this.titleService.setTitle('Complex Portal - Results');\n    this._allInteractorsInComplexSearch = [];\n\n    this.route\n      .queryParams\n      .subscribe(queryParams => {\n        this._query = queryParams['query'];\n        this._spicesFilter = queryParams['species'] ? queryParams['species'].split('+') : [];\n        this._bioRoleFilter = queryParams['bioRole'] ? queryParams['bioRole'].split('+') : [];\n        this._interactorTypeFilter = queryParams['interactorType'] ? queryParams['interactorType'].split('+') : [];\n        this._currentPageIndex = queryParams['page'] ? Number(queryParams['page']) : 1;\n        // TODO This is out for now, but CP-84 (JIRA )should fix that!!\n        // this.pageSize = queryParams['size'] ? Number(queryParams['size']) : 10;\n        this.requestComplexResults();\n        document.body.scrollTop = 0;\n      });\n\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  private requestComplexResults() {\n    this.complexPortalService.findComplex(this.query, this.spicesFilter, this.bioRoleFilter,\n      this.interactorTypeFilter, this.currentPageIndex, this.pageSize).subscribe(complexSearch => {\n      this.complexSearch = complexSearch;\n      this._allInteractorsInComplexSearch = [];\n      if (this.complexSearch.totalNumberOfResults !== 0) {\n        this.lastPageIndex = Math.ceil(complexSearch.totalNumberOfResults / this.pageSize);\n        for (let i = 0; i < complexSearch.elements.length; i++) {\n          for (const component of complexSearch.elements[i].components) {\n            if (!this._allInteractorsInComplexSearch.some(interactor => interactor.identifier === component.identifier)) {\n              this._allInteractorsInComplexSearch.push(\n                new Interactor(\n                  component.identifier,\n                  component.identifierLink,\n                  component.name,\n                  component.description,\n                  component.interactorType));\n            }\n          }\n        }\n      }\n      ProgressBarComponent.hide();\n    });\n\n  }\n\n  /**\n   * Prepare query params to build new URL after filter or pagination has changed\n   */\n  private reloadPage(): void {\n    const queryParams: NavigationExtras = {};\n    queryParams['query'] = this._query;\n    queryParams['page'] = this._currentPageIndex;\n    if (this._spicesFilter !== undefined && this._spicesFilter.length !== 0) {\n      queryParams['species'] = this.prepareFiltersForParams(this.spicesFilter);\n    }\n    if (this._bioRoleFilter !== undefined && this._bioRoleFilter.length !== 0) {\n      queryParams['bioRole'] = this.prepareFiltersForParams(this._bioRoleFilter);\n    }\n    if (this._interactorTypeFilter !== undefined && this._interactorTypeFilter.length !== 0) {\n      queryParams['interactorType'] = this.prepareFiltersForParams(this._interactorTypeFilter);\n    }\n    this.router.navigate([], {\n      queryParams\n    });\n\n    ProgressBarComponent.hide();\n\n    // This is a test case event for GA, to monitor if users ever use more then one filter.\n    const filterCount = this.getFilterCount();\n    if (1 < filterCount) {\n      this.googleAnalyticsService.fireMultiFilterEvent(filterCount.toString());\n    }\n  }\n\n  private prepareFiltersForParams(filter: string[]): string {\n    return filter.toString().replace(/,/g, '+');\n  }\n\n  private getFilterCount(): number {\n    return this._spicesFilter.length + this._interactorTypeFilter.length + this._bioRoleFilter.length;\n  }\n\n\n  /**\n   *\n   * @param pageIndex new page index after hitting the paginator to update the URL and reload content\n   */\n  public onPageChange(pageIndex: number): void {\n    this.currentPageIndex = pageIndex;\n    this.reloadPage();\n  }\n\n  public onResetAllFilters(): void {\n    this.spicesFilter = [];\n    this.bioRoleFilter = [];\n    this.interactorTypeFilter = [];\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onSpicesFilterChanged(filter: string[]): void {\n    this.spicesFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onBiologicalRoleFilterChanged(filter: string[]): void {\n    this.bioRoleFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onInteractorTypeFilterChanged(filter: string[]): void {\n    this.interactorTypeFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n\n  get query(): string {\n    return this._query;\n  }\n\n  set query(value) {\n    this._query = value;\n  }\n\n  get currentPageIndex(): number {\n    return this._currentPageIndex;\n  }\n\n  set currentPageIndex(value: number) {\n    this._currentPageIndex = value;\n  }\n\n  get complexSearch(): ComplexSearchResult {\n    return this._complexSearch;\n  }\n\n  set complexSearch(value: ComplexSearchResult) {\n    this._complexSearch = value;\n  }\n\n  get lastPageIndex(): number {\n    return this._lastPageIndex;\n  }\n\n  set lastPageIndex(value: number) {\n    this._lastPageIndex = value;\n  }\n\n  get pageSize(): number {\n    return this._pageSize;\n  }\n\n  set pageSize(value: number) {\n    this._pageSize = value;\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n\n  public get allInteractorsInComplexSearch(): Interactor[] {\n    return this._allInteractorsInComplexSearch;\n  }\n\n  set allInteractorsInComplexSearch(value: Interactor[]) {\n    this._allInteractorsInComplexSearch = value;\n  }\n\n  toggleDisplayType() {\n    this.DisplayType = !this.DisplayType;\n  }\n\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ComplexResultsComponent} from './complex-results.component';\nimport {RouterModule} from '@angular/router';\nimport {ComplexPaginatorComponent} from './complex-paginator/complex-paginator.component';\nimport {ComplexFilterComponent} from './complex-filter/complex-filter.component';\nimport {ComplexListComponent} from './complex-list/complex-list.component';\nimport {ProgressSpinnerModule} from '../../shared/loading-indicators/progress-spinner/progress-spinner.module';\nimport {ComplexNavigatorComponent} from './complex-navigator/complex-navigator.component';\nimport {TableStructureComponent} from './complex-navigator/table-structure/table-structure.component';\nimport { TableHeaderComponent } from './complex-navigator/table-structure/table-header/table-header.component';\nimport { TableInteractorColumnComponent } from './complex-navigator/table-structure/table-interactor-column/table-interactor-column.component';\n\n\n@NgModule({\n  imports: [RouterModule.forChild([\n    {path: '', component: ComplexResultsComponent},\n  ]),\n    CommonModule,\n    ProgressSpinnerModule\n  ],\n  exports: [\n    TableStructureComponent\n  ],\n  declarations: [ComplexResultsComponent,\n    ComplexListComponent,\n    ComplexFilterComponent,\n    ComplexPaginatorComponent,\n    ComplexNavigatorComponent,\n    TableStructureComponent,\n    TableHeaderComponent,\n    TableInteractorColumnComponent,\n  ]\n})\nexport class ComplexResultsModule {\n}\n","export class ComplexComponent {\n  private _identifier: string;\n  private _identifierLink: string;\n  private _name: string;\n  private _description: string;\n  private _stochiometry: string;\n  private _interactorType: string;\n\n  constructor(identifier: string,\n              identifierLink: string,\n              name: string,\n              description: string,\n              stochiometry: string,\n              interactorType: string) {\n    this._identifier = identifier;\n    this._identifierLink = identifierLink;\n    this._name = name;\n    this._description = description;\n    this._stochiometry = stochiometry;\n    this._interactorType = interactorType;\n  }\n\n  get identifier(): string {\n    return this._identifier;\n  }\n\n  get identifierLink(): string {\n    return this._identifierLink;\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  get description(): string {\n    return this._description;\n  }\n\n  get stochiometry(): string {\n    return this._stochiometry;\n  }\n\n  get interactorType(): string {\n    return this._interactorType;\n  }\n}\n","export class Interactor {\n  private _identifier: string;\n  private _identifierLink: string;\n  private _name: string;\n  private _description: string;\n  private _interactorType: string;\n\n  constructor(identifier: string,\n              identifierLink: string,\n              name: string,\n              description: string,\n              interactorType: string) {\n    this._identifier = identifier;\n    this._identifierLink = identifierLink;\n    this._name = name;\n    this._description = description;\n    this._interactorType = interactorType;\n  }\n\n  get identifier(): string {\n    return this._identifier;\n  }\n\n  get identifierLink(): string {\n    return this._identifierLink;\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  get description(): string {\n    return this._description;\n  }\n\n  get interactorType(): string {\n    return this._interactorType;\n  }\n\n}\n","export default \"<div class=\\\"filters row\\\">\\n  <div class=\\\"columns medium-6\\\"><h3>Filters</h3></div>\\n  <div class=\\\"columns medium-6\\\">\\n    <div *ngIf=\\\"anyFiltersSelected()\\\">\\n      <a class=\\\"button\\\" (click)=\\\"resetAllFilters()\\\"><i class=\\\"icon icon-functional\\\" data-icon=\\\"d\\\"></i> Reset filters</a>\\n    </div>\\n  </div>\\n  <div class=\\\"columns medium-12\\\">\\n    <div *ngIf=\\\"facets.species_f\\\">\\n      <b>Species</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.species_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, spicesFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\" checked> {{facet.name}}\\n              ({{facet.count}})\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\"> {{facet.name}} ({{facet.count}})\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div *ngIf=\\\"facets.pbiorole_f\\\">\\n      <b>Biological Role</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.pbiorole_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, bioRoleFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\" checked> {{facet.name}}\\n              ({{facet.count}})\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\"> {{facet.name}}\\n              ({{facet.count}})\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n\\n    <div *ngIf=\\\"facets.ptype_f\\\">\\n      <b>Interactor Type</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.ptype_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, interactorTypeFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\" checked> {{facet.name}}\\n              ({{facet.count}})\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\"> {{facet.name}}\\n              ({{facet.count}})\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n    <div *ngIf=\\\"!facets.species_f && !facets.pbiorole_f && !facets.ptype_f\\\">\\n      <h6>No filters available</h6>\\n    </div>\\n  </div>\\n</div>\\n\";","export default \"<ul class=\\\"no-bullet\\\">\\n  <li *ngFor=\\\"let complex of complexSearch.elements\\\">\\n    <h3><a [routerLink]=\\\"['/complex', complex.complexAC]\\\">{{ complex.complexName }}</a></h3>\\n    <div class=\\\"description\\\" style=\\\"background-color: white\\\">\\n      <b>Complex AC:</b> {{ complex.complexAC }} / <b>Organism:</b> ({{ complex.organismName }})<br>\\n      <b>Description:</b>\\n      <div *ngIf=\\\"complex.description.length <= 250\\\">\\n        {{ complex.description }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n      <div *ngIf=\\\"complex.description.length > 250\\\">\\n        {{ complex.description.substr(0, 250) }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n    </div>\\n  </li>\\n</ul>\\n\";","export default \"<div>\\n  <cp-table-structure [complexSearch]=\\\"complexSearch\\\"\\n                      [interactors]=\\\"interactors\\\">\\n  </cp-table-structure>\\n</div>\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"CN-table\\\">\\n    <!-- Complexes' row (table's header) -->\\n    <tr>\\n      <th class=\\\"intHeader\\\" rowspan=\\\"2\\\">Interactors</th>\\n      <th class=\\\"compHeader\\\" colspan=\\\"15\\\">Complexes</th>\\n      <!-- 15 being the maximum complexes per page (also set in complex-results.component.ts) -->\\n    </tr>\\n    <tr>\\n      <th *ngFor=\\\"let complex of complexSearch.elements\\\">\\n        <div class=\\\"complexInTable\\\">\\n          <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n             title=\\\"{{complex.complexAC}}\\\"\\n             target=\\\"_blank\\\">\\n            <div class=\\\"txt\\\">\\n              {{ complex.complexName }}\\n              <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n            </div>\\n          </a>\\n        </div>\\n      </th>\\n    </tr>\\n  </table>\\n</div>\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"interactors-table\\\">\\n    <!-- Interactors' column -->\\n    <ng-container *ngFor=\\\"let interactor of enrichedInteractors; let i=index\\\">\\n      <ng-container>\\n        <tr *ngIf=\\\"!interactor.hidden\\\">\\n          <td>\\n            <div style=\\\"font-weight: bold\\\">\\n              {{ interactor.interactor.name }}\\n              <i class=\\\"{{interactorTypeIcon(interactor.interactor)}}\\\"\\n                 title=\\\"{{interactor.interactor.interactorType}}\\\"></i>\\n              <!-- Adding of the icons to access details of the interactor -->\\n              <a [routerLink]=\\\"['/complex/search']\\\"\\n                 [queryParams]=\\\"{query: interactor.interactor.identifier, page: 1}\\\"\\n                 target=\\\"_blank\\\">\\n                <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n                   title=\\\"Complexes containing this interactor\\\"></i>\\n              </a>\\n            </div>\\n            <!-- Icon for the expandable -->\\n            <div class=\\\"container\\\" *ngIf=\\\"interactor.isSubComplex\\\">\\n              {{ interactor.interactor.identifier }}\\n              <a title=\\\"{{ interactor.interactor.name }}'s interactors\\\" (click)=\\\"toggleSubcomplexExpandable(i)\\\">\\n                <i class=\\\"icon icon-common\\\" data-icon=\\\"&#xf078;\\\"\\n                   style=\\\"font-size:small; margin-top: 2px\\\"></i>\\n              </a>\\n            </div>\\n            <div *ngIf=\\\"showExternalLink(interactor.interactor)\\\" class=\\\"interactorType\\\">\\n              <a href=\\\"{{interactor.interactor.identifierLink}}\\\" target=\\\"_blank\\\">{{ interactor.interactor.identifier }}\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n              </a>\\n            </div>\\n          </td>\\n          <!-- Interactors' stoichiometry -->\\n          <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n            <td>\\n              <div [ngClass]=\\\"displayTopLineClass(complex, i)\\\"></div>\\n              <ng-container *ngIf=\\\"!!findInteractorInComplex(complex.complex, interactor.interactor.identifier)\\\">\\n                <div class=\\\"stoichNum\\\" title=\\\"{{ getStochiometry(complex.complex, interactor.interactor.identifier) }}\\\">\\n                  {{ stochiometryOfInteractors(complex.complex, interactor.interactor.identifier) }}\\n                </div>\\n              </ng-container>\\n              <ng-container class=\\\"stoichComponent\\\"\\n                            *ngIf=\\\"findInteractorsInSubComplex(complex.complex, interactor.interactor.identifier).length > 0\\\">\\n                <!-- subcomplexes' interactors' stoichiometry -->\\n                <div class=\\\"stoichNum\\\"\\n                     title=\\\"{{ getStoichiometrySubComplex(complex.complex, interactor.interactor.identifier) }}\\\">\\n                  {{ stoichiometryOfInteractorsMainTable(complex.complex, interactor.interactor.identifier) }}\\n                </div>\\n              </ng-container>\\n              <div [ngClass]=\\\"displayBottomLineClass(complex, i)\\\"></div>\\n            </td>\\n          </ng-container>\\n        </tr>\\n        <!-- Expandable menu for subcomplexes -->\\n        <ng-container *ngIf=\\\"interactor.expanded\\\">\\n          <ng-container *ngIf=\\\"!!interactor.subComponents\\\">\\n            <tr *ngFor=\\\"let el of interactor.subComponents; let j=index\\\">\\n              <td style=\\\"background: #8b9394\\\">\\n                <div style=\\\"font-weight: bold\\\">\\n                  <a [routerLink]=\\\"['/complex/search']\\\"\\n                     [queryParams]=\\\"{query: el.identifier, page: 1}\\\"\\n                     target=\\\"_blank\\\">\\n                    {{ el.name }}\\n                    <i class=\\\"{{interactorTypeIcon(el)}}\\\" title=\\\"{{interactor.interactor.interactorType}}\\\"></i>\\n                    <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n                       title=\\\"More complexes containing this interactor\\\"></i>\\n                  </a>\\n                </div>\\n                <div *ngIf=\\\"showExternalLink(el)\\\" class=\\\"interactorType\\\">\\n                  <a href=\\\"{{el.identifierLink}}\\\" target=\\\"_blank\\\">{{ el.identifier }}\\n                    <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\" title=\\\"More information\\\"></i>\\n                  </a>\\n                </div>\\n              </td>\\n              <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n                <td style=\\\"background: #8b9394;\\\">\\n                  <div [ngClass]=\\\"displayTopLineClassExpanded(complex, i, j)\\\"></div>\\n                  <ng-container *ngIf=\\\"!!findInteractorInComplex(complex.complex, el.identifier)\\\">\\n                    <div class=\\\"stoichNum\\\"\\n                         title=\\\"{{ getStochiometry(complex.complex, el.identifier) }}\\\">\\n                      {{ stochiometryOfInteractors(complex.complex, el.identifier) }}\\n                    </div>\\n                  </ng-container>\\n                  <ng-container\\n                    *ngIf=\\\"!!findInteractorInExpandedSubComplex(interactor, complex.complex, el.identifier)\\\">\\n                    <!-- subcomplexes' interactors' stoichiometry -->\\n                    <div class=\\\"stoichNum\\\"\\n                         title=\\\"{{ getStochiometryInExpandedSubComplex(interactor, el.identifier) }}\\\">\\n                      {{ stoichiometryOfInteractorsExpandable(interactor, el.identifier) }}\\n                    </div>\\n                  </ng-container>\\n                  <div [ngClass]=\\\"displayBottomLineClassExpanded(complex, i, j)\\\"></div>\\n                </td>\\n              </ng-container>\\n            </tr>\\n          </ng-container>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n  </table>\\n</div>\\n\";","export default \"<div class=\\\"complexNavigatorTable\\\">\\n  <div class=\\\"header\\\">\\n    <cp-table-header [complexSearch]=\\\"complexSearch\\\">\\n    </cp-table-header>\\n  </div>\\n  <div class=\\\"interactors\\\">\\n    <cp-table-interactor-column\\n      [complexSearch]=\\\"complexSearch\\\"\\n      [interactors]=\\\"interactors\\\">\\n    </cp-table-interactor-column>\\n  </div>\\n</div>\\n\";","export default \"<div>\\n  <h5 class=\\\"text-center\\\">{{currentPageIndex}} of {{lastPageIndex}}</h5>\\n  <ul class=\\\"pagination text-center\\\" role=\\\"navigation\\\" aria-label=\\\"Pagination\\\">\\n    <li class=\\\"arrow unavailable\\\" *ngIf=\\\"currentPageIndex != 1\\\" aria-disabled=\\\"true\\\"><a\\n      (click)=\\\"getPreviousPage()\\\">&laquo; Previous</a></li>\\n    <ng-container *ngFor=\\\"let index of pagination\\\">\\n      <li *ngIf=\\\"index[1] == 'true'\\\" class=\\\"current\\\"><span class=\\\"show-for-sr\\\">You're on page</span>{{index[0]}}</li>\\n      <li *ngIf=\\\"index[1] == 'false'\\\"><a (click)=\\\"getPage(index[0])\\\">{{index[0]}}</a></li>\\n    </ng-container>\\n    <li class=\\\"arrow\\\" *ngIf=\\\"currentPageIndex != lastPageIndex\\\"><a (click)=\\\"getNextPage()\\\">Next &raquo;</a></li>\\n  </ul>\\n</div>\\n\";","export default \"<div class=\\\"margin-top-large margin-bottom-large row\\\">\\n  <ng-container *ngIf=\\\"complexSearch;else loadingSpinner\\\">\\n    <div class=\\\"columns medium-12\\\" *ngIf=\\\"complexSearch.totalNumberOfResults !== 0\\\">\\n      <h2 class=\\\"padding-left-large\\\">Total number of results: {{ complexSearch.totalNumberOfResults }} </h2>\\n      <div class=\\\"columns medium-4\\\">\\n        <cp-complex-filter *ngIf=\\\"spicesFilter && bioRoleFilter && interactorTypeFilter\\\"\\n                           [spicesFilter]=\\\"spicesFilter\\\"\\n                           [bioRoleFilter]=\\\"bioRoleFilter\\\"\\n                           [interactorTypeFilter]=\\\"interactorTypeFilter\\\" [facets]=\\\"complexSearch.facets\\\"\\n                           (onResetAllFilters)=\\\"onResetAllFilters()\\\"\\n                           (onSpicesFilterChanged)=\\\"onSpicesFilterChanged($event)\\\"\\n                           (onBiologicalRoleFilterChanged)=\\\"onBiologicalRoleFilterChanged($event)\\\"\\n                           (onInteractorTypeFilterChanged)=\\\"onInteractorTypeFilterChanged($event)\\\">\\n        </cp-complex-filter>\\n      </div>\\n      <div class=\\\"columns medium-8\\\">\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n        <div class=\\\"displayButton\\\" style=\\\"text-align: center\\\">\\n          <input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"View list\\\" class=\\\"button\\\"\\n                 (click)=\\\"toggleDisplayType()\\\">\\n        </div>\\n        <div class=\\\"listOfResults\\\" *ngIf=\\\"DisplayType==false\\\">\\n          <cp-complex-list [complexSearch]=\\\"complexSearch\\\">\\n          </cp-complex-list>\\n        </div>\\n        <div class=\\\"Complex-navigator\\\" *ngIf=\\\"DisplayType\\\">\\n          <cp-complex-navigator [complexSearch]=\\\"complexSearch\\\"\\n                                [interactors]=\\\"allInteractorsInComplexSearch\\\">\\n          </cp-complex-navigator>\\n        </div>\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"columns medium-12 callout alert\\\" *ngIf=\\\"complexSearch.totalNumberOfResults === 0\\\">\\n      <h2>No Complex Portal results found</h2>\\n      <h3>We're sorry but we couldn't find anything that matched your search for: <b>{{ query }}</b></h3>\\n      <h4>Please consider refining your terms:</h4>\\n      <ul>\\n        <li>Make sure all words are spelled correctly</li>\\n        <li>Try different keywords</li>\\n        <li>Be more precise: use gene or protein IDs, e.g. Ndc80 or Q04571</li>\\n        <li>Remove quotes around phrases to search for each word individually. bike shed will often show more results\\n          than\\n          \\\"bike shed\\\"\\n        </li>\\n      </ul>\\n    </div>\\n  </ng-container>\\n  <ng-template #loadingSpinner>\\n    <cp-progress-spinner [query]=\\\"query\\\"></cp-progress-spinner>\\n  </ng-template>\\n</div>\\n\";"]}