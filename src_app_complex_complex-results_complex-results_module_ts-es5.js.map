{"version":3,"mappings":"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","names":["ComplexFilterComponent","googleAnalyticsService","_classCallCheck","_angular_core__WEBPACK_IMPORTED_MODULE_3__","_createClass","key","value","filter","status","spicesFilter","push","fireAddedFilterEvent","splice","indexOf","fireRemovedFilterEvent","onSpicesFilterChanged","emit","bioRoleFilter","onBiologicalRoleFilterChanged","interactorTypeFilter","onInteractorTypeFilterChanged","onResetAllFilters","_spicesFilter","length","_bioRoleFilter","_interactorTypeFilter","element","get","_facets","set","facet","name","_shared_google_analytics_service_analytics_service__WEBPACK_IMPORTED_MODULE_2__","selector","template","ComplexListComponent","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ComplexNavigatorComponent","router","_interactors","_interactorsSorting","_angular_router__WEBPACK_IMPORTED_MODULE_2__","TableHeaderComponent","classifyComplexesSize","classifyComplexesSimilarities","complexSearch","searchResult","elements","complexesWithSimilarities","Map","biggestComplex","_step","complex","totalLength","interactors","_step3","complexInteractorChecked","interactorType","subComplex","find","complexAC","identifier","_loop","_iterator3","_iterator","bigComplex","_step2","comparedComplex","similarities","_step4","biggestComplexInteractor","_step5","complexInteractor","_iterator5","_step6","subComponent","_step7","_iterator7","_iterator6","_loop2","_iterator4","_iterator2","sort","a","b","complex1","complex2","_step8","complex1Interactor","_step9","complex2Interactor","_iterator9","_this","_step10","_step11","_iterator11","_iterator10","_loop3","_iterator8","classifiedList","forEach","found","classification","classifiedComplex","index","similarity","_this2","calculateSimilarity","listOfComplex","reduce","acc","val","concat","unique","includes","indexA","indexB","EnrichedInteractor","EnrichedComplex","BinaryComponentList","TableInteractorColumnComponent","complexPortalService","_enrichedInteractors","_enrichedComplexes","_step12","interactor","isSubComplex","newEnrichedInteractor","hidden","expanded","subComponents","partOfComplex","timesAppearing","organismName","_this3","loadSubInteractors","subscribe","_loop4","_iterator12","interactorOrganism","classificationChosen","calculateAllStartAndEndIndexes","componentId","component","interactorId","some","map","match","findInteractorInComplex","formatStochiometryValues","stochiometry","findInteractorInSubcomplex","matches","findInteractorsInSubComplex","stochiometryValues","addedStoichiometryValues","toString","identifierLink","i","j","subInteractorIds","foundComplex","getComplexAc","pipe","participants","_shared_model_complex_results_complex_component_model__WEBPACK_IMPORTED_MODULE_2__","participant","description","pattern","matchedStochometry","fetchValuesFromStochiometry","minValue","parseInt","maxValue","components","_step13","_iterator13","_step14","calculateStartAndEndIndexes","_iterator14","valueA","valueB","Math","min","interactorIndex","doesLineCrossInteractorCell","doesLineEndOnInteractorCell","doesLineStartOnInteractorCell","subComponentIndex","doesLineCrossSubcomponentCell","doesLineEndOnSubcomponentCell","doesLineStartOnSubcomponentCell","max","subComponentsToCheck","enrichedComplex","startInteractorIndex","endInteractorIndex","startSubComponentIndex","endSubComponentIndex","getMinValue","getMaxValue","k","_this4","_this5","_step15","_step16","_this6","enrichedInteractor","_loop5","_iterator16","_iterator15","localeCompare","_step17","oneInteractor","_step18","_step19","complexesInteractors","isNaN","stochiometryOfInteractors","_iterator19","_step20","subInteractor","_this7","_loop6","_iterator20","_iterator18","_iterator17","type","classifyInteractorsByType","rangeOfInteractorType","classifyInteractorsByOrganism","rangeOfInteractorOrganisms","classifyInteractorsByOccurence","ranges","interactorTypesList","listOfInteractorTypes","_step21","rangeOfType","listOfInteractors","_step22","interactorAndIndex","_iterator22","lengthOfRange","_iterator21","interactorOrganismsList","listOfInteractorOrganism","_step23","organism","rangeOfOrganism","_step24","_iterator24","_iterator23","interactorsTypesList","_step25","_iterator25","interactorsOrganismsList","_step26","_iterator26","_shared_service_complex_portal_service__WEBPACK_IMPORTED_MODULE_3__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","TableStructureComponent","ComplexPaginatorComponent","updatePaginatior","changes","start","end","pagination","_lastPageIndex","_currentPageIndex","_pagination","onPageChange","lastPageIndex","pageIndex","currentPageIndex","ComplexResultsComponent","route","titleService","setTitle","_allInteractorsInComplexSearch","interactorsSorting","queryParams","_this8","_query","split","Number","requestComplexResults","document","body","scrollTop","findComplex","query","pageSize","_this9","totalNumberOfResults","ceil","_step27","_shared_model_complex_results_interactor_model__WEBPACK_IMPORTED_MODULE_5__","_loop7","_iterator27","_shared_loading_indicators_progress_bar_progress_bar_component__WEBPACK_IMPORTED_MODULE_3__","undefined","prepareFiltersForParams","navigate","filterCount","getFilterCount","fireMultiFilterEvent","replace","reloadPage","_complexSearch","_pageSize","DisplayType","typeOfSorting","_angular_router__WEBPACK_IMPORTED_MODULE_6__","_shared_service_complex_portal_service__WEBPACK_IMPORTED_MODULE_2__","_angular_platform_browser__WEBPACK_IMPORTED_MODULE_7__","_shared_google_analytics_service_analytics_service__WEBPACK_IMPORTED_MODULE_4__","ComplexResultsModule","imports","_angular_router__WEBPACK_IMPORTED_MODULE_10__","path","_complex_results_component__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_11__","_shared_loading_indicators_progress_spinner_progress_spinner_module__WEBPACK_IMPORTED_MODULE_4__","exports","_complex_navigator_table_structure_table_structure_component__WEBPACK_IMPORTED_MODULE_6__","declarations","_complex_list_complex_list_component__WEBPACK_IMPORTED_MODULE_3__","_complex_filter_complex_filter_component__WEBPACK_IMPORTED_MODULE_2__","_complex_paginator_complex_paginator_component__WEBPACK_IMPORTED_MODULE_1__","_complex_navigator_complex_navigator_component__WEBPACK_IMPORTED_MODULE_5__","_complex_navigator_table_structure_table_header_table_header_component__WEBPACK_IMPORTED_MODULE_7__","_complex_navigator_table_structure_table_interactor_column_table_interactor_column_component__WEBPACK_IMPORTED_MODULE_8__","ComplexComponent","_identifier","_identifierLink","_name","_description","_stochiometry","_interactorType","Interactor","__webpack_exports__"],"sources":["webpack:///src/app/complex/complex-results/complex-filter/complex-filter.component.ts","webpack:///src/app/complex/complex-results/complex-list/complex-list.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.ts","webpack:///src/app/complex/complex-results/complex-paginator/complex-paginator.component.ts","webpack:///src/app/complex/complex-results/complex-results.component.ts","webpack:///src/app/complex/complex-results/complex-results.module.ts","webpack:///src/app/complex/shared/model/complex-results/complex-component.model.ts","webpack:///src/app/complex/shared/model/complex-results/interactor.model.ts","webpack:///src/app/complex/complex-results/complex-filter/complex-filter.component.html","webpack:///src/app/complex/complex-results/complex-list/complex-list.component.html","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.html","webpack:///src/app/complex/complex-results/complex-paginator/complex-paginator.component.html","webpack:///src/app/complex/complex-results/complex-results.component.html"],"sourcesContent":["import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Facets} from '../../shared/model/complex-results/facets.model';\nimport {AnalyticsService} from '../../../shared/google-analytics/service/analytics.service';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-filter',\n  templateUrl: './complex-filter.component.html',\n  styleUrls: ['./complex-filter.component.css']\n})\nexport class ComplexFilterComponent implements OnInit {\n\n  private _facets: Facets;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n\n  @Output() onSpicesFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onBiologicalRoleFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onInteractorTypeFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onResetAllFilters: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private googleAnalyticsService: AnalyticsService) {\n  }\n\n  ngOnInit() {\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeSpeciesFilter(filter: string, status: boolean) {\n    if (status) {\n      this.spicesFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.spicesFilter.splice(this.spicesFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onSpicesFilterChanged.emit(this.spicesFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeBiologicalRoleFilter(filter: string, status: boolean) {\n    if (status) {\n      this.bioRoleFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.bioRoleFilter.splice(this.bioRoleFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onBiologicalRoleFilterChanged.emit(this.bioRoleFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeInteractorTypeFilter(filter: string, status: boolean) {\n    if (status) {\n      this.interactorTypeFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.interactorTypeFilter.splice(this.interactorTypeFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onInteractorTypeFilterChanged.emit(this.interactorTypeFilter);\n  }\n\n  /**\n   * Emit event to parent component to remove all filters\n   */\n  public resetAllFilters() {\n    this.onResetAllFilters.emit(true);\n  }\n\n  /**\n   *\n   * @returns {boolean} true is any filter array contains an filter\n   */\n  public anyFiltersSelected() {\n    return (this._spicesFilter.length !== 0 || this._bioRoleFilter.length !== 0 || this._interactorTypeFilter.length !== 0);\n  }\n\n  /**\n   *\n   * @param element filter to check if already selected\n   * @param filter selected filters\n   * @returns {boolean} true if filter is already in selected filters\n   */\n  public isSelected(element: string, filter: string[]): boolean {\n    return filter.indexOf(element) !== -1;\n  }\n\n  get facets(): Facets {\n    return this._facets;\n  }\n\n  @Input()\n  set facets(value: Facets) {\n    this._facets = value;\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  @Input()\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  @Input()\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  @Input()\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n\n  public interactorTypeIcon(facet): string {\n    switch (facet.name) {\n      case 'small molecule':\n        return 'icon icon-conceptual icon-chemical';\n      case 'protein':\n      case 'peptide':\n        return 'icon icon-conceptual icon-structures-3d';\n      case 'stable complex':\n        return 'icon icon-conceptual icon-systems';\n      case 'molecule set':\n        return 'icon icon-generic icon-math';\n      case 'single stranded deoxyribonucleic acid':\n      case 'double stranded deoxyribonucleic acid':\n      case 'small nuclear rna':\n      case 'small nucleolar rna':\n      case 'ribosomal rna':\n      case 'messenger rna':\n      case 'transfer rna':\n      case 'signal recognition particle rna':\n      case 'ribonucleic acid':\n      case 'nucleic acid':\n      case 'long non-coding ribonucleic acid':\n        return 'icon icon-conceptual icon-dna';\n    }\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\n\n@Component({\n  selector: 'cp-complex-list',\n  templateUrl: './complex-list.component.html',\n  styleUrls: ['./complex-list.component.css']\n})\nexport class ComplexListComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\nimport {Router} from '@angular/router';\n\n\n@Component({\n  selector: 'cp-complex-navigator',\n  templateUrl: './complex-navigator.component.html',\n  styleUrls: ['./complex-navigator.component.css']\n})\nexport class ComplexNavigatorComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n  _interactorsSorting: string;\n  _interactors: Set<Interactor>;\n\n\n  constructor(private router: Router) {\n  }\n\n  ngOnInit() {\n  }\n\n  get interactors(): Set<Interactor> {\n    return this._interactors;\n  }\n\n  @Input()\n  set interactors(value: Set<Interactor>) {\n    this._interactors = value;\n  }\n\n  @Input()\n  set interactorsSorting(value: string) {\n    this._interactorsSorting = value;\n  }\n\n  get interactorsSorting(): string {\n    return this._interactorsSorting;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../../../shared/model/complex-results/complex-search.model';\nimport {TableInteractorColumnComponent} from '../table-interactor-column/table-interactor-column.component';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\n@Component({\n  selector: 'cp-table-header',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css'],\n})\n\nexport class TableHeaderComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactorsTable: TableInteractorColumnComponent;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.classifyComplexesSize();\n    this.classifyComplexesSimilarities(this.complexSearch);\n  }\n\n  classifyComplexesSize(): void {\n    const searchResult = this.complexSearch.elements;\n    const complexesWithSimilarities = new Map<ComplexSearchResult['elements'][0], number>();\n    const biggestComplex = [searchResult[0], 0];\n\n    // check which complex is the biggest\n    for (const complex of searchResult) {\n      let totalLength = complex.interactors.length;\n      for (const complexInteractorChecked of complex.interactors) {\n        if (complexInteractorChecked.interactorType === 'stable complex') {\n          // tslint:disable-next-line:no-shadowed-variable\n          const subComplex: Element = searchResult.find(complex => complex.complexAC === complexInteractorChecked.identifier);\n          totalLength += subComplex.interactors.length;\n        }\n      }\n      if (totalLength > biggestComplex[1]) {\n        biggestComplex[0] = complex;\n        biggestComplex[1] = totalLength;\n      }\n    }\n\n    const bigComplex: any = biggestComplex[0]; // access to the complex\n\n    // compare the other complexes with the biggest\n    for (const comparedComplex of searchResult) {\n      let similarities = 0;\n      for (const biggestComplexInteractor of bigComplex.interactors) {\n        for (const complexInteractor of comparedComplex.interactors) {\n          if (biggestComplexInteractor.identifier === complexInteractor.identifier) {\n            similarities++;\n          }\n        }\n        if (biggestComplexInteractor.interactorType === 'stable complex') {\n          // tslint:disable-next-line:max-line-length\n          const subComplex: Element = searchResult.find(complex => complex.complexAC === biggestComplexInteractor.identifier);\n          if (comparedComplex.complexAC === bigComplex.complexAC) {\n            similarities += subComplex.interactors.length;\n          }\n          for (const subComponent of subComplex.interactors) {\n            for (const complexInteractor of comparedComplex.interactors) {\n              if (subComponent.identifier === complexInteractor.identifier) {\n                similarities++;\n              }\n            }\n          }\n        }\n      }\n      complexesWithSimilarities.set(comparedComplex, similarities);\n    }\n    // sort complexes depending on their similarities with the biggest\n    this.complexSearch.elements.sort((a, b) => complexesWithSimilarities.get(b)! - complexesWithSimilarities.get(a)!);\n  }\n\n  calculateSimilarity(complex1, complex2) {\n    let similarities = 0;\n    for (const complex1Interactor of complex1.interactors) {\n      for (const complex2Interactor of complex2.interactors) {\n        if (complex1Interactor.identifier === complex2Interactor.identifier) {\n          similarities++;\n        }\n      }\n      if (complex1Interactor.interactorType === 'stable complex') {\n        // tslint:disable-next-line:max-line-length\n        const subComplex: Element = this.complexSearch.elements.find(complex => complex.complexAC === complex1Interactor.identifier);\n        if (complex2.complexAC === complex1.complexAC) {\n          similarities += subComplex.interactors.length;\n        }\n        for (const subComponent of subComplex.interactors) {\n          for (const complexInteractor of complex2.interactors) {\n            if (subComponent.identifier === complexInteractor.identifier) {\n              similarities++;\n            }\n          }\n        }\n      }\n    }\n    return similarities;\n  }\n\n  classifyComplexesSimilarities(complexSearch) {\n    const classifiedList = [];\n    complexSearch.elements.forEach(complex => {\n      let found = false;\n      classifiedList.forEach(classification => {\n        classification.forEach((classifiedComplex, index) => {\n          const similarity = this.calculateSimilarity(complex, classifiedComplex);\n          if (similarity >= 1) {\n            found = true;\n            classification.splice(index + 1, 0, complex);\n          }\n        });\n      });\n      if (!found) {\n        // this list is multidimensional (1 list per complex)\n        classifiedList.push([complex]);\n      }\n    });\n\n    // make the array 1D\n    const listOfComplex = classifiedList.reduce((acc, val) => acc.concat(val), []);\n\n    // The list which was multidimensional before has duplicates\n    const unique = [];\n    listOfComplex.forEach(element => {\n      if (!unique.includes(element)) {\n        unique.push(element);\n      }\n    });\n\n    // sorting by similarities\n    this.complexSearch.elements.sort((a, b) => {\n      const indexA = unique.indexOf(a);\n      const indexB = unique.indexOf(b);\n      if (indexA !== -1 && indexB !== -1) {\n        return indexA - indexB; // Sort in ascending order based on the index\n      } else if (indexA !== -1) {\n        return -1; // Put element a before element b\n      } else if (indexB !== -1) {\n        return 1; // Put element b before element a\n      } else {\n        return 0; // Leave the order unchanged if both elements are not found in unique list\n      }\n    });\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../../shared/model/complex-results/interactor.model';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {Observable} from 'rxjs/Observable';\nimport {of} from 'rxjs';\nimport {ComplexPortalService} from '../../../../shared/service/complex-portal.service';\nimport {map} from 'rxjs/operators';\n\nclass EnrichedInteractor {\n  interactor: Interactor;\n  hidden: boolean;\n  isSubComplex: boolean;\n  expanded: boolean;\n  subComponents: ComplexComponent[];\n  partOfComplex: number[];\n  timesAppearing: number;\n  organismName: string;\n}\n\nclass EnrichedComplex {\n  complex: Element;\n  startInteractorIndex: number;\n  endInteractorIndex: number;\n  startSubComponentIndex: number;\n  endSubComponentIndex: number;\n}\n\nconst BinaryComponentList = [];\n\n@Component({\n  selector: 'cp-table-interactor-column',\n  templateUrl: './table-interactor-column.component.html',\n  styleUrls: ['./table-interactor-column.component.css']\n})\nexport class TableInteractorColumnComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n  _enrichedInteractors: EnrichedInteractor[];\n  _enrichedComplexes: EnrichedComplex[];\n  @Input() _interactorsSorting;\n\n\n  constructor(private complexPortalService: ComplexPortalService) {\n  }\n\n  ngOnInit() {\n  }\n\n  get enrichedInteractors(): EnrichedInteractor[] {\n\n    return this._enrichedInteractors;\n  }\n\n  get enrichedComplexes(): EnrichedComplex[] {\n    return this._enrichedComplexes;\n  }\n\n  @Input()\n  set interactorsSorting(value: string) {\n    this._interactorsSorting = value;\n  }\n\n  get interactorsSorting(): string {\n    return this._interactorsSorting;\n  }\n\n  @Input()\n  set interactors(value: Set<Interactor>) {\n    this._enrichedInteractors = [];\n    for (const interactor of value) {\n      const isSubComplex = interactor.interactorType === 'stable complex';\n      const newEnrichedInteractor: EnrichedInteractor = {\n        interactor,\n        hidden: false,\n        isSubComplex,\n        expanded: false,\n        subComponents: null,\n        partOfComplex: [],\n        timesAppearing: 0,\n        organismName: '',\n      };\n      if (isSubComplex) {\n        this.loadSubInteractors(newEnrichedInteractor).subscribe(subComponents => newEnrichedInteractor.subComponents = subComponents);\n      }\n      this._enrichedInteractors.push(newEnrichedInteractor);\n    }\n    this.interactorOrganism();\n    //////////// CLASSIFICATION BEFORE CALCULATIONS\n    this.classificationChosen();\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  findInteractorInComplex(complex: Element, componentId: string): ComplexComponent {\n    return complex.interactors.find(component => component.identifier === componentId);\n  }\n\n  findInteractorsInSubComplex(complex: Element, interactorId: string): ComplexComponent[] {\n    return this._enrichedInteractors\n      // filter subcomplexes\n      .filter(interactor => interactor.isSubComplex)\n      // filter subcomplexes included in complex\n      .filter(interactor =>\n        complex.interactors.some(component => component.identifier === interactor.interactor.identifier))\n      // filter subcomplexes that match the componentId\n      .filter(interactor => !!interactor.subComponents)\n      .map(interactor => interactor.subComponents.find(subComponent => subComponent.identifier === interactorId))\n      .filter(component => !!component);\n  }\n\n  public findInteractorInExpandedSubComplex(interactor: EnrichedInteractor, complex: Element, interactorId: string): ComplexComponent {\n    if (complex.interactors.some(component => component.identifier === interactor.interactor.identifier)) {\n      return interactor.subComponents.find(component => component.identifier === interactorId);\n    }\n    return null;\n  }\n\n  stochiometryOfInteractors(complex: Element, interactorId: string): string {\n    const match = this.findInteractorInComplex(complex, interactorId);\n    if (!!match) {\n      return this.formatStochiometryValues(match.stochiometry);\n    }\n    return null;\n  }\n\n  stoichiometryOfInteractorsExpandable(interactor: EnrichedInteractor, interactorId: string): string {\n    const match = this.findInteractorInSubcomplex(interactor, interactorId);\n    if (!!match) {\n      return this.formatStochiometryValues(match.stochiometry);\n    }\n    return null;\n  }\n\n  stoichiometryOfInteractorsMainTable(complex: Element, interactorId: string): string {\n    const matches = this.findInteractorsInSubComplex(complex, interactorId);\n    if (matches.length > 0) {\n      const stochiometryValues = this.addedStoichiometryValues(matches);\n      if (!!stochiometryValues) {\n        if (stochiometryValues[0] === stochiometryValues[1]) {\n          return stochiometryValues[0].toString();\n        } else {\n          return `${stochiometryValues[0]}, ${stochiometryValues[1]}`;\n        }\n      } else {\n        return ' ';\n      }\n    }\n    return null;\n  }\n\n  getStochiometry(complex: Element, componentId: string): string {\n    const match = this.findInteractorInComplex(complex, componentId);\n    if (!!match) {\n      if (!!match.stochiometry) {\n        return 'Stoichiometry values: ' + (match.stochiometry);\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  getStoichiometrySubComplex(complex: Element, interactorId: string): string {\n    const matches = this.findInteractorsInSubComplex(complex, interactorId);\n    if (matches.length > 0) {\n      const stochiometryValues = this.addedStoichiometryValues(matches);\n      if (!!stochiometryValues) {\n        return `Stoichiometry values: minValue: ${stochiometryValues[0]}, maxValue: ${stochiometryValues[1]}`;\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  getStochiometryInExpandedSubComplex(interactor: EnrichedInteractor, interactorId: string): string {\n    const match = this.findInteractorInSubcomplex(interactor, interactorId);\n    if (!!match) {\n      if (!!match.stochiometry) {\n        return 'Stoichiometry values: ' + (match.stochiometry);\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  showExternalLink(component: Interactor | ComplexComponent): boolean {\n    return component.interactorType !== 'stable complex' && !!component.identifierLink;\n  }\n\n  toggleSubcomplexExpandable(i: number): void {\n    this._enrichedInteractors[i].expanded = !this._enrichedInteractors[i].expanded;\n\n    if (this._enrichedInteractors[i].expanded) {\n      // EnrichedInteractor has been expanded, we need to:\n\n      // 1. Collapse the other ones, in case there is any other expanded\n      for (let j = 0; j < this._enrichedInteractors.length; j++) {\n        if (i !== j) {\n          this._enrichedInteractors[j].expanded = false;\n        }\n      }\n\n      // 2. Hide any interactor now displayed in the expanded section\n      if (!!this._enrichedInteractors[i].subComponents) {\n        const subInteractorIds: string[] = this._enrichedInteractors[i].subComponents.map(component => component.identifier);\n        for (let j = 0; j < this._enrichedInteractors.length; j++) {\n          if (i !== j) {\n            this._enrichedInteractors[j].hidden = !!subInteractorIds.includes(this._enrichedInteractors[j].interactor.identifier);\n          }\n        }\n      }\n    } else {\n      // EnrichedInteractor has been collapsed, we need to:\n      // 1. Display any interactor previously hidden\n      for (let j = 0; j < this._enrichedInteractors.length; j++) {\n        this._enrichedInteractors[j].hidden = false;\n      }\n    }\n\n    // Something has been expanded or collapsed, we need to recalculate the start and end indexes for the lines\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  public interactorTypeIcon(interactor: Interactor): string {\n    switch (interactor.interactorType) {\n      case 'small molecule':\n        return 'icon icon-conceptual icon-chemical';\n      case 'protein':\n      case 'peptide':\n        return 'icon icon-conceptual icon-structures-3d';\n      case 'stable complex':\n        return 'icon icon-conceptual icon-systems';\n      case 'molecule set':\n        return 'icon icon-generic icon-math';\n      case 'single stranded deoxyribonucleic acid':\n      case 'double stranded deoxyribonucleic acid':\n      case 'small nuclear rna':\n      case 'small nucleolar rna':\n      case 'ribosomal rna':\n      case 'messenger rna':\n      case 'transfer rna':\n      case 'signal recognition particle rna':\n      case 'ribonucleic acid':\n      case 'nucleic acid':\n      case 'long non-coding ribonucleic acid':\n        return 'icon icon-conceptual icon-dna';\n    }\n  }\n\n  private loadSubInteractors(interactor: EnrichedInteractor): Observable<ComplexComponent[]> {\n    // this function returns the list of subcomponents of an interactor of type stable complex\n    const foundComplex: Element = this.complexSearch.elements.find(complex => complex.complexAC === interactor.interactor.identifier);\n    if (!!foundComplex) {\n      return of(foundComplex.interactors);\n    } else {\n      // Actually call the back-end to fetch these\n      return this.complexPortalService.getComplexAc(interactor.interactor.identifier)\n        .pipe(map(complex => complex.participants.map(participant => new ComplexComponent(\n          participant.identifier,\n          participant.identifierLink,\n          participant.name,\n          participant.description,\n          participant.stochiometry,\n          participant.interactorType))));\n    }\n  }\n\n  private findInteractorInSubcomplex(interactor: EnrichedInteractor, interactorId: string): ComplexComponent {\n    return interactor.subComponents.find(component => component.identifier === interactorId);\n  }\n\n  private fetchValuesFromStochiometry(stochiometry: string) {\n    const pattern = 'minValue: ([0-9+]), maxValue: ([0-9+])';\n    return stochiometry.match(pattern);\n  }\n\n  private formatStochiometryValues(stochiometry: string): string {\n    if (!!stochiometry) {\n      const matchedStochometry = this.fetchValuesFromStochiometry(stochiometry);\n      if (!!matchedStochometry) {\n        // tslint:disable-next-line:radix\n        const minValue = parseInt(matchedStochometry[1]);\n        // tslint:disable-next-line:radix\n        const maxValue = parseInt(matchedStochometry[2]);\n        if (minValue === maxValue) {\n          return minValue.toString();\n        } else {\n          return `${minValue}, ${maxValue}`;\n        }\n      }\n    }\n    return ' '; // sometimes we don't have the stoichiometry value\n  }\n\n  private addedStoichiometryValues(components: ComplexComponent[]): [number, number] {\n    let minValue: number = null;\n    let maxValue: number = null;\n    for (const component of components) {\n      if (!!component.stochiometry) {\n        const matchedStochometry = this.fetchValuesFromStochiometry(component.stochiometry);\n        if (!!matchedStochometry) {\n          if (minValue === null) {\n            minValue = 0;\n          }\n          if (maxValue === null) {\n            maxValue = 0;\n          }\n          // tslint:disable-next-line:radix\n          minValue += parseInt(matchedStochometry[1]);\n          // tslint:disable-next-line:radix\n          maxValue += parseInt(matchedStochometry[2]);\n        }\n      }\n    }\n    if (minValue !== null && maxValue !== null) {\n      return [minValue, maxValue];\n    }\n    return null;\n  }\n\n  private calculateAllStartAndEndIndexes(): void {\n    this._enrichedComplexes = [];\n\n    for (const complex of this.complexSearch.elements) {\n      this._enrichedComplexes.push(this.calculateStartAndEndIndexes(complex));\n    }\n  }\n\n  private getMinValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.min(valueA, valueB);\n  }\n\n  public displayTopLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnInteractorCell(complex, interactorIndex) && !this.doesLineStartOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnInteractorCell(complex, interactorIndex) && !this.doesLineEndOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayTopLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private getMaxValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.max(valueA, valueB);\n  }\n\n  private calculateStartAndEndIndexes(complex: Element): EnrichedComplex {\n    const subComponentsToCheck: string[] = [];\n\n    const enrichedComplex: EnrichedComplex = {\n      complex,\n      startInteractorIndex: null,\n      endInteractorIndex: null,\n      startSubComponentIndex: null,\n      endSubComponentIndex: null\n    };\n\n    // We iterate through the interactors to find the first and last one part of the complex\n    // We do this to be able to draw a line connecting all interactors in the complex\n    for (let i = 0; i < this._enrichedInteractors.length; i++) {\n      if (!this._enrichedInteractors[i].hidden) {\n        for (let j = 0; j < complex.interactors.length; j++) {\n          if (complex.interactors[j].identifier === this._enrichedInteractors[i].interactor.identifier) {\n            // The interactor is part of the complex, we update the start and end indices for the interactors\n            // line as it may start in this interactor\n            enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n            enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n\n            // The interactor is a subcomplex\n            if (this._enrichedInteractors[i].isSubComplex && !!this._enrichedInteractors[i].subComponents) {\n              // The subcomponents of that subcomplex could also be displayed in the table as separate interactors.\n              // In that case, the line could start or end there, so we need to also check the position of those\n              // interactors. We add those subcomponents to 'subComponentsToCheck' to check their position later\n              this._enrichedInteractors[i].subComponents.forEach(subComponent => subComponentsToCheck.push(subComponent.identifier));\n              if (this._enrichedInteractors[i].expanded) {\n                // If the subcomplex is expanded, as the subcomplex is part of the complex, all its subcomponents are also part\n                // of it. That means we need a line connecting all the subcomponents.\n                // That line must also connect to the subcomplex, so we start it at -1 to make sure it starts at the interactor cell\n                // and not at the first subcomponent\n                enrichedComplex.startSubComponentIndex = -1;\n                enrichedComplex.endSubComponentIndex = this._enrichedInteractors[i].subComponents.length - 1;\n              }\n            }\n          } else if (this._enrichedInteractors[i].isSubComplex &&\n            !!this._enrichedInteractors[i].subComponents &&\n            this._enrichedInteractors[i].expanded) {\n            // The interactor is not part of the complex but it is a subcomplex and it is expanded.\n            // This means the subcomponents of the subcomplex are visible, and any of them could be part of the complex.\n            // In that case, the line could start or end on any of those subcomponents\n            for (let k = 0; k < this._enrichedInteractors[i].subComponents.length; k++) {\n              if (complex.interactors[j].identifier === this._enrichedInteractors[i].subComponents[k].identifier) {\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the interactors\n                // line as it may start in this interactor\n                enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n                enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the subcomponents\n                // line as it may start in this subcomponent\n                enrichedComplex.startSubComponentIndex = this.getMinValue(enrichedComplex.startSubComponentIndex, k);\n                enrichedComplex.endSubComponentIndex = this.getMaxValue(enrichedComplex.endSubComponentIndex, k);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // We finally check the position of the subcomponents of subcomplexes part of the complex on the main table.\n    // If any is before or after where the lines start and end, then we need to update the start and end indexes,\n    // as the line must start or end there\n    for (let i = 0; i < this._enrichedInteractors.length; i++) {\n      if (!this._enrichedInteractors[i].hidden) {\n        if (subComponentsToCheck.includes(this._enrichedInteractors[i].interactor.identifier)) {\n          // The interactor is part of a subcomplex that is part of the complex, we update the start and end indices for the interactors\n          // line as it may start in this interactor\n          enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n          enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n        }\n      }\n    }\n    return enrichedComplex;\n  }\n\n  private doesLineCrossInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n\n      // The line starts before this interactor and ends after, so it crosses through the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      // The line starts before this interactor and end at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor and it musy cross through the interactor cell to the subcomponents\n        if (this._enrichedInteractors[interactorIndex].isSubComplex && this._enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n\n      if (!this._enrichedInteractors[interactorIndex].isSubComplex) {\n        // If the interactor is not a subcomplex, then the interactor has no subcomponents and the line starts in it\n        return true;\n      }\n      // If the interactor is a subcomplex.\n      // If the interactor is actually part of the complex, the line starts in this interactor\n      // Otherwise, the line actually starts on one of the subcomponets of the complex, but not on the interactor itself, as it is\n      // not part of the complex.\n      if (complex.complex.interactors.some(component =>\n        this._enrichedInteractors[interactorIndex].interactor.identifier === component.identifier)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line ends at this interactor or on any of its subcomponents\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n\n      // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n      // the line does not end in this interactor and it must cross through to the subcomponents\n      if (this._enrichedInteractors[interactorIndex].isSubComplex && this._enrichedInteractors[interactorIndex].expanded) {\n        if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  private doesLineCrossSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n      // The line starts before this interactor and ends after, so it crosses through all the subcomponents of the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n        // The line starts before this subcomponent and ends after, so it crosses through the subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this interactor and it ends on a later subcomponent, so it crosses through this subcomponent\n        if (complex.startInteractorIndex < interactorIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this subcomponent and it ends on a later interactor, so it crosses through this subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endInteractorIndex > interactorIndex) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n      if (complex.startSubComponentIndex != null && complex.startSubComponentIndex === subComponentIndex) {\n        // If the subcomplex is a component of the complex, the line starts in the cell of the interactor, meaning it cannot\n        // start on any subcomponent.\n        // Otherwise, it starts on the subcomponent with the index subComponentIndex\n        return !complex.complex.interactors.some(component =>\n          this._enrichedInteractors[interactorIndex].interactor.identifier === component.identifier);\n\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n      // The line ends at this interactor and this subcomponent\n      if (complex.endSubComponentIndex != null && complex.endSubComponentIndex === subComponentIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private interactorOrganism() {\n    for (const complex of this.complexSearch.elements) {\n      const organismName = complex.organismName;\n      for (const complexInteractor of complex.interactors) {\n        // tslint:disable-next-line:max-line-length\n        const match = this._enrichedInteractors.find(enrichedInteractor => enrichedInteractor.interactor.identifier === complexInteractor.identifier);\n        match.organismName = organismName;\n      }\n    }\n  }\n\n  public classifyInteractorsByOrganism() {\n    this._enrichedInteractors.sort((a, b) => b.organismName.localeCompare(a.organismName));\n  }\n\n  public classifyInteractorsByType() {\n    this._enrichedInteractors.sort((a, b) => b.interactor.interactorType.localeCompare(a.interactor.interactorType));\n  }\n\n  public classifyInteractorsByOccurence() {\n    for (const oneInteractor of this._enrichedInteractors) {\n      for (const complex of this.complexSearch.elements) {\n        for (const complexesInteractors of complex.interactors) {\n          if (oneInteractor.interactor.identifier === complexesInteractors.identifier) {\n            // tslint:disable-next-line:radix\n            if (isNaN(parseInt(this.stochiometryOfInteractors(complex, oneInteractor.interactor.identifier)))) {\n              oneInteractor.timesAppearing = oneInteractor.timesAppearing;\n            } else {\n              // tslint:disable-next-line:radix\n              oneInteractor.timesAppearing += parseInt(this.stochiometryOfInteractors(complex, oneInteractor.interactor.identifier));\n            }\n          }\n        }\n        if (oneInteractor.isSubComplex) {\n          // tslint:disable-next-line:no-shadowed-variable\n          for (const subInteractor of oneInteractor.subComponents) {\n            // tslint:disable-next-line:max-line-length no-shadowed-variable\n            const enrichedInteractor = this._enrichedInteractors.find(enrichedInteractor => enrichedInteractor.interactor.identifier === subInteractor.identifier);\n            // tslint:disable-next-line:radix\n            enrichedInteractor.timesAppearing = parseInt(this.formatStochiometryValues(subInteractor.stochiometry));\n          }\n        }\n      }\n    }\n    // tslint:disable-next-line:max-line-length\n    this._enrichedInteractors.sort((a, b) => b.timesAppearing - a.timesAppearing /* || a.interactor.name.localeCompare(b.interactor.name) */);\n  }\n\n  public classificationChosen() {\n    let type: string;\n    switch (this._interactorsSorting) {\n      case 'Type':\n        this.classifyInteractorsByType();\n        this.calculateAllStartAndEndIndexes();\n        this.rangeOfInteractorType();\n        type = 'Type';\n        break;\n      case 'Organism':\n        this.classifyInteractorsByOrganism();\n        this.calculateAllStartAndEndIndexes();\n        this.rangeOfInteractorOrganisms();\n        type = 'Organism';\n        break;\n      case 'Occurrence':\n        this.classifyInteractorsByOccurence();\n        this.calculateAllStartAndEndIndexes();\n        type = 'Occurrence';\n        break;\n      default:\n        this.classifyInteractorsByOccurence();\n        this.calculateAllStartAndEndIndexes();\n        type = 'Occurrence';\n    }\n    return type;\n  }\n\n  private rangeOfInteractorType(): number[] {\n    const ranges = [];\n    const interactorTypesList = this.listOfInteractorTypes();\n    for (const type of interactorTypesList) {\n      const rangeOfType = [];\n      const listOfInteractors = [];\n      for (const enrichedInteractor of this._enrichedInteractors) {\n        if (enrichedInteractor.interactor.interactorType === type) {\n          const interactorAndIndex = [];\n          interactorAndIndex.push(enrichedInteractor);\n          interactorAndIndex.push(this._enrichedInteractors.indexOf(enrichedInteractor));\n          listOfInteractors.push(interactorAndIndex);\n        }\n      }\n      let lengthOfRange = (listOfInteractors[listOfInteractors.length - 1][1]) + 1 - (listOfInteractors[0][1]);\n      rangeOfType.push(type, listOfInteractors[0][1], listOfInteractors[listOfInteractors.length - 1][1], lengthOfRange);\n      ranges.push(rangeOfType);\n    }\n    return ranges;\n  }\n\n  private rangeOfInteractorOrganisms(): number[] {\n    const ranges = [];\n    const interactorOrganismsList = this.listOfInteractorOrganism();\n    for (const organism of interactorOrganismsList) {\n      const rangeOfOrganism = [];\n      const listOfInteractors = [];\n      for (const enrichedInteractor of this._enrichedInteractors) {\n        if (enrichedInteractor.organismName === organism) {\n          const interactorAndIndex = [];\n          interactorAndIndex.push(enrichedInteractor);\n          interactorAndIndex.push(this._enrichedInteractors.indexOf(enrichedInteractor));\n          listOfInteractors.push(interactorAndIndex);\n        }\n      }\n      const lengthOfRange = (listOfInteractors[listOfInteractors.length - 1][1]) + 1 - (listOfInteractors[0][1]);\n      // console.log(lengthOfRange);\n      rangeOfOrganism.push(organism, listOfInteractors[0][1], listOfInteractors[listOfInteractors.length - 1][1], lengthOfRange);\n      ranges.push(rangeOfOrganism);\n    }\n    // console.log(ranges);\n    return ranges;\n  }\n\n  private listOfInteractorTypes() {\n    const interactorsTypesList = [];\n    for (const enrichedInteractor of this._enrichedInteractors) {\n      if (!interactorsTypesList.includes(enrichedInteractor.interactor.interactorType)) {\n        interactorsTypesList.push(enrichedInteractor.interactor.interactorType);\n      }\n    }\n    return interactorsTypesList;\n  }\n\n  private listOfInteractorOrganism() {\n    const interactorsOrganismsList = [];\n    for (const enrichedInteractor of this._enrichedInteractors) {\n      if (!interactorsOrganismsList.includes(enrichedInteractor.organismName)) {\n        interactorsOrganismsList.push(enrichedInteractor.organismName);\n      }\n    }\n    // console.log(interactorsOrganismsList);\n    return interactorsOrganismsList;\n  }\n\n  get enrichedInteractorsLength() {\n    return this._enrichedInteractors.length + 1;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../shared/model/complex-results/interactor.model';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'cp-table-structure',\n  templateUrl: './table-structure.component.html',\n  styleUrls: ['./table-structure.component.css']\n})\nexport class TableStructureComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n  _interactors: Set<Interactor>;\n  _interactorsSorting: string;\n\n  // _overFlowing: boolean;\n\n  constructor(private router: Router) {\n  }\n\n  ngOnInit(): void {\n  }\n\n  get interactors(): Set<Interactor> {\n    return this._interactors;\n  }\n\n  @Input()\n  set interactors(value: Set<Interactor>) {\n    this._interactors = value;\n  }\n\n  @Input()\n  set interactorsSorting(value: string) {\n    this._interactorsSorting = value;\n  }\n\n  get interactorsSorting(): string {\n    return this._interactorsSorting;\n  }\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-paginator',\n  templateUrl: './complex-paginator.component.html',\n  styleUrls: ['./complex-paginator.component.css']\n})\nexport class ComplexPaginatorComponent implements OnInit, OnChanges {\n  private _lastPageIndex: number;\n  private _currentPageIndex: number;\n  private _pagination: any;\n\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter<number>();\n\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.updatePaginatior();\n  }\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.updatePaginatior();\n  }\n\n  public updatePaginatior(): void {\n    let start: number;\n    let end: number;\n    this.pagination = [];\n    if (this._lastPageIndex < 5) {\n      start = 1;\n      end = this._lastPageIndex;\n\n    } else {\n      if (this._currentPageIndex === 1 || this._currentPageIndex === 2) {\n        start = 1;\n        end = 5;\n      } else if (this._currentPageIndex === this._lastPageIndex || this._currentPageIndex === this._lastPageIndex - 1) {\n        start = this._lastPageIndex - 4;\n        end = this._lastPageIndex;\n      } else {\n        start = this._currentPageIndex - 2;\n        end = this._currentPageIndex + 2;\n      }\n    }\n    while (start <= end) {\n      if (start === this._currentPageIndex) {\n        this._pagination.push([[this._currentPageIndex], [true]]);\n      } else {\n        this._pagination.push([[start], [false]]);\n      }\n      start++;\n    }\n  }\n\n  public getFirstPage(): void {\n    this.onPageChange.emit(1);\n  }\n\n  public getLastPage(): void {\n    this.onPageChange.emit(this.lastPageIndex);\n  }\n\n  public getPage(pageIndex: number) {\n    this.onPageChange.emit(pageIndex);\n  }\n\n  public getPreviousPage(): void {\n    this.onPageChange.emit(this.currentPageIndex - 1);\n  }\n\n  public getNextPage(): void {\n    this.onPageChange.emit(this.currentPageIndex + 1);\n  }\n\n  get lastPageIndex() {\n    return this._lastPageIndex;\n  }\n\n  @Input()\n  set lastPageIndex(value) {\n    this._lastPageIndex = value;\n  }\n\n  get currentPageIndex() {\n    return this._currentPageIndex;\n  }\n\n  @Input()\n  set currentPageIndex(value) {\n    this._currentPageIndex = value;\n  }\n\n  get pagination() {\n    return this._pagination;\n  }\n\n  set pagination(value) {\n    this._pagination = value;\n  }\n}\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, NavigationExtras, Router} from '@angular/router';\nimport {ComplexSearchResult} from '../shared/model/complex-results/complex-search.model';\nimport {ComplexPortalService} from '../shared/service/complex-portal.service';\nimport {ProgressBarComponent} from '../../shared/loading-indicators/progress-bar/progress-bar.component';\nimport {Title} from '@angular/platform-browser';\nimport {AnalyticsService} from '../../shared/google-analytics/service/analytics.service';\nimport {Interactor} from '../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-results',\n  templateUrl: './complex-results.component.html',\n  styleUrls: ['./complex-results.component.css'],\n})\nexport class ComplexResultsComponent implements OnInit, AfterViewInit {\n  private _query: string;\n  private _currentPageIndex: number;\n  private _complexSearch: ComplexSearchResult;\n  private _lastPageIndex: number;\n  private _pageSize = 15;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n  private _allInteractorsInComplexSearch: Interactor[] = [];\n  DisplayType = true;\n  _interactorsSorting = 'Occurrence';\n\n  constructor(private route: ActivatedRoute, private router: Router,\n              private complexPortalService: ComplexPortalService, private titleService: Title,\n              private googleAnalyticsService: AnalyticsService,\n  ) {\n  }\n\n  ngOnInit() {\n    this.titleService.setTitle('Complex Portal - Results');\n    this._allInteractorsInComplexSearch = [];\n    this._interactorsSorting = this.interactorsSorting;\n    this.route\n      .queryParams\n      .subscribe(queryParams => {\n        this._query = queryParams['query'];\n        this._spicesFilter = queryParams['species'] ? queryParams['species'].split('+') : [];\n        this._bioRoleFilter = queryParams['bioRole'] ? queryParams['bioRole'].split('+') : [];\n        this._interactorTypeFilter = queryParams['interactorType'] ? queryParams['interactorType'].split('+') : [];\n        this._currentPageIndex = queryParams['page'] ? Number(queryParams['page']) : 1;\n        // TODO This is out for now, but CP-84 (JIRA )should fix that!!\n        // this.pageSize = queryParams['size'] ? Number(queryParams['size']) : 10;\n        this.requestComplexResults();\n        document.body.scrollTop = 0;\n      });\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  private requestComplexResults() {\n    this.complexPortalService.findComplex(this.query, this.spicesFilter, this.bioRoleFilter,\n      this.interactorTypeFilter, this.currentPageIndex, this.pageSize).subscribe(complexSearch => {\n      this.complexSearch = complexSearch;\n      this._allInteractorsInComplexSearch = [];\n      if (this.complexSearch.totalNumberOfResults !== 0) {\n        this.lastPageIndex = Math.ceil(complexSearch.totalNumberOfResults / this.pageSize);\n        for (let i = 0; i < complexSearch.elements.length; i++) {\n          for (const component of complexSearch.elements[i].interactors) {\n            if (!this._allInteractorsInComplexSearch.some(interactor => interactor.identifier === component.identifier)) {\n              this._allInteractorsInComplexSearch.push(\n                new Interactor(\n                  component.identifier,\n                  component.identifierLink,\n                  component.name,\n                  component.description,\n                  component.interactorType));\n            }\n          }\n        }\n      }\n      ProgressBarComponent.hide();\n    });\n  }\n\n  /**\n   * Prepare query params to build new URL after filter or pagination has changed\n   */\n  private reloadPage(): void {\n    const queryParams: NavigationExtras = {};\n    queryParams['query'] = this._query;\n    queryParams['page'] = this._currentPageIndex;\n    if (this._spicesFilter !== undefined && this._spicesFilter.length !== 0) {\n      queryParams['species'] = this.prepareFiltersForParams(this.spicesFilter);\n    }\n    if (this._bioRoleFilter !== undefined && this._bioRoleFilter.length !== 0) {\n      queryParams['bioRole'] = this.prepareFiltersForParams(this._bioRoleFilter);\n    }\n    if (this._interactorTypeFilter !== undefined && this._interactorTypeFilter.length !== 0) {\n      queryParams['interactorType'] = this.prepareFiltersForParams(this._interactorTypeFilter);\n    }\n    this.router.navigate([], {\n      queryParams\n    });\n    ProgressBarComponent.hide();\n    // This is a test case event for GA, to monitor if users ever use more then one filter.\n    const filterCount = this.getFilterCount();\n    if (1 < filterCount) {\n      this.googleAnalyticsService.fireMultiFilterEvent(filterCount.toString());\n    }\n  }\n\n  private prepareFiltersForParams(filter: string[]): string {\n    return filter.toString().replace(/,/g, '+');\n  }\n\n  private getFilterCount(): number {\n    return this._spicesFilter.length + this._interactorTypeFilter.length + this._bioRoleFilter.length;\n  }\n\n  /**\n   *\n   * @param pageIndex new page index after hitting the paginator to update the URL and reload content\n   */\n  public onPageChange(pageIndex: number): void {\n    this.currentPageIndex = pageIndex;\n    this.reloadPage();\n  }\n\n  public onResetAllFilters(): void {\n    this.spicesFilter = [];\n    this.bioRoleFilter = [];\n    this.interactorTypeFilter = [];\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onSpicesFilterChanged(filter: string[]): void {\n    this.spicesFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onBiologicalRoleFilterChanged(filter: string[]): void {\n    this.bioRoleFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onInteractorTypeFilterChanged(filter: string[]): void {\n    this.interactorTypeFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  get query(): string {\n    return this._query;\n  }\n\n  set query(value) {\n    this._query = value;\n  }\n\n  get currentPageIndex(): number {\n    return this._currentPageIndex;\n  }\n\n  set currentPageIndex(value: number) {\n    this._currentPageIndex = value;\n  }\n\n  get complexSearch(): ComplexSearchResult {\n    return this._complexSearch;\n  }\n\n  set complexSearch(value: ComplexSearchResult) {\n    this._complexSearch = value;\n  }\n\n  get lastPageIndex(): number {\n    return this._lastPageIndex;\n  }\n\n  set lastPageIndex(value: number) {\n    this._lastPageIndex = value;\n  }\n\n  get pageSize(): number {\n    return this._pageSize;\n  }\n\n  set pageSize(value: number) {\n    this._pageSize = value;\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n\n  public get allInteractorsInComplexSearch(): Interactor[] {\n    return this._allInteractorsInComplexSearch;\n  }\n\n  set allInteractorsInComplexSearch(value: Interactor[]) {\n    this._allInteractorsInComplexSearch = value;\n  }\n\n  toggleDisplayType() {\n    this.DisplayType = !this.DisplayType;\n  }\n\n  get interactorsSorting(): string {\n    return this._interactorsSorting;\n  }\n\n  setInteractorsSorting(typeOfSorting: string) {\n    this._interactorsSorting = typeOfSorting;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ComplexResultsComponent} from './complex-results.component';\nimport {RouterModule} from '@angular/router';\nimport {ComplexPaginatorComponent} from './complex-paginator/complex-paginator.component';\nimport {ComplexFilterComponent} from './complex-filter/complex-filter.component';\nimport {ComplexListComponent} from './complex-list/complex-list.component';\nimport {ProgressSpinnerModule} from '../../shared/loading-indicators/progress-spinner/progress-spinner.module';\nimport {ComplexNavigatorComponent} from './complex-navigator/complex-navigator.component';\nimport {TableStructureComponent} from './complex-navigator/table-structure/table-structure.component';\nimport { TableHeaderComponent } from './complex-navigator/table-structure/table-header/table-header.component';\nimport { TableInteractorColumnComponent } from './complex-navigator/table-structure/table-interactor-column/table-interactor-column.component';\n\n\n@NgModule({\n  imports: [RouterModule.forChild([\n    {path: '', component: ComplexResultsComponent},\n  ]),\n    CommonModule,\n    ProgressSpinnerModule\n  ],\n  exports: [\n    TableStructureComponent\n  ],\n  declarations: [ComplexResultsComponent,\n    ComplexListComponent,\n    ComplexFilterComponent,\n    ComplexPaginatorComponent,\n    ComplexNavigatorComponent,\n    TableStructureComponent,\n    TableHeaderComponent,\n    TableInteractorColumnComponent,\n  ]\n})\nexport class ComplexResultsModule {\n}\n","export class ComplexComponent {\n  private _identifier: string;\n  private _identifierLink: string;\n  private _name: string;\n  private _description: string;\n  private _stochiometry: string;\n  private _interactorType: string;\n\n  constructor(identifier: string,\n              identifierLink: string,\n              name: string,\n              description: string,\n              stochiometry: string,\n              interactorType: string) {\n    this._identifier = identifier;\n    this._identifierLink = identifierLink;\n    this._name = name;\n    this._description = description;\n    this._stochiometry = stochiometry;\n    this._interactorType = interactorType;\n  }\n\n  get identifier(): string {\n    return this._identifier;\n  }\n\n  get identifierLink(): string {\n    return this._identifierLink;\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  get description(): string {\n    return this._description;\n  }\n\n  get stochiometry(): string {\n    return this._stochiometry;\n  }\n\n  get interactorType(): string {\n    return this._interactorType;\n  }\n}\n","export class Interactor {\n  private _identifier: string;\n  private _identifierLink: string;\n  private _name: string;\n  private _description: string;\n  private _interactorType: string;\n\n  constructor(identifier: string,\n              identifierLink: string,\n              name: string,\n              description: string,\n              interactorType: string) {\n    this._identifier = identifier;\n    this._identifierLink = identifierLink;\n    this._name = name;\n    this._description = description;\n    this._interactorType = interactorType;\n  }\n\n  get identifier(): string {\n    return this._identifier;\n  }\n\n  get identifierLink(): string {\n    return this._identifierLink;\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  get description(): string {\n    return this._description;\n  }\n\n  get interactorType(): string {\n    return this._interactorType;\n  }\n\n}\n","export default \"<div class=\\\"filters row\\\">\\n  <div class=\\\"columns medium-6\\\"><h3>Filters</h3></div>\\n  <div class=\\\"columns medium-6\\\">\\n    <div *ngIf=\\\"anyFiltersSelected()\\\">\\n      <a class=\\\"button\\\" (click)=\\\"resetAllFilters()\\\"><i class=\\\"icon icon-functional\\\" data-icon=\\\"d\\\"></i> Reset filters</a>\\n    </div>\\n  </div>\\n  <div class=\\\"columns medium-12\\\">\\n    <div *ngIf=\\\"facets.species_f\\\">\\n      <b>Species</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.species_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, spicesFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\"> {{ facet.name }} ({{ facet.count }})\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div *ngIf=\\\"facets.pbiorole_f\\\">\\n      <b>Biological Role</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.pbiorole_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, bioRoleFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\"> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n\\n    <div *ngIf=\\\"facets.ptype_f\\\">\\n      <b>Interactor Type</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.ptype_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, interactorTypeFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ interactorTypeIcon(facet) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\"> {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ interactorTypeIcon(facet) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n    <div *ngIf=\\\"!facets.species_f && !facets.pbiorole_f && !facets.ptype_f\\\">\\n      <h6>No filters available</h6>\\n    </div>\\n  </div>\\n</div>\\n\";","export default \"<ul class=\\\"no-bullet\\\">\\n  <li *ngFor=\\\"let complex of complexSearch.elements\\\">\\n    <h3><a [routerLink]=\\\"['/complex', complex.complexAC]\\\">{{ complex.complexName }}</a></h3>\\n    <div class=\\\"description\\\" style=\\\"background-color: white\\\">\\n      <b>Complex AC:</b> {{ complex.complexAC }} / <b>Organism:</b> ({{ complex.organismName }})<br>\\n      <b>Description:</b>\\n      <div *ngIf=\\\"complex.description.length <= 250\\\">\\n        {{ complex.description }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n      <div *ngIf=\\\"complex.description.length > 250\\\">\\n        {{ complex.description.substr(0, 250) }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n    </div>\\n  </li>\\n</ul>\\n\";","export default \"<div class=\\\"ComplexNavigator\\\">\\n  <cp-table-structure [complexSearch]=\\\"complexSearch\\\"\\n                      [interactors]=\\\"interactors\\\"\\n                      [interactorsSorting]=\\\"interactorsSorting\\\">\\n  </cp-table-structure>\\n</div>\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"table CN-table\\\">\\n    <!-- When table is not overflowing -->\\n    <thead class=\\\"tableHead\\\" *ngIf=\\\"complexSearch.elements.length<=6\\\">\\n    <tr>\\n      <th class=\\\"interactorsHeader horizontal\\\">Interactors</th>\\n      <th class=\\\"horizontal\\\" *ngFor=\\\"let complex of complexSearch.elements\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           title=\\\"{{complex.complexAC}}\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n              <div class=\\\"line\\\"></div>\\n                <div class=\\\"horizontal-label\\\">\\n                  <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                  {{ complex.complexName }}\\n                </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n    </tr>\\n    </thead>\\n    <!-- When table is overflowing -->\\n    <thead class=\\\"tableHeadOverflow\\\" *ngIf=\\\"complexSearch.elements.length>6\\\">\\n    <tr [style.--cols]=\\\"complexSearch.elements.length\\\">\\n      <th class=\\\"interactorsHeader\\\">Interactors</th>\\n      <th class=\\\"rotate\\\" *ngFor=\\\"let complex of complexSearch.elements\\\">\\n\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           title=\\\"{{complex.complexAC}}\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n<!--            <div class=\\\"line\\\"></div>-->\\n              <div class=\\\"tilted-label\\\">\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                {{ complex.complexName }}\\n              </div>\\n            </span>\\n          </div>\\n        </a>\\n\\n      </th>\\n    </tr>\\n    </thead>\\n  </table>\\n</div>\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"interactors-table\\\">\\n    <!-- Interactors' column -->\\n    <ng-container *ngFor=\\\" let interactor of enrichedInteractors; let i=index\\\">\\n      <tr *ngIf=\\\"!interactor.hidden\\\">\\n        <ng-container *ngIf=\\\"classificationChosen()=='Type'\\\">\\n          <ng-container *ngFor=\\\"let oneType of rangeOfInteractorType()\\\">\\n            <ng-container *ngIf=\\\"oneType[1]==i\\\">\\n              <td [attr.rowspan]=\\\"oneType[3]\\\" class=\\\"interactorSeparation\\\" title=\\\"{{oneType[0]}}\\\">\\n                <div class=\\\"interactorSeparationName\\\"> {{ oneType[0] }}</div>\\n              </td>\\n            </ng-container>\\n          </ng-container>\\n        </ng-container>\\n        <ng-container *ngIf=\\\"classificationChosen()=='Organism'\\\">\\n          <ng-container *ngFor=\\\"let oneOrganism of rangeOfInteractorOrganisms()\\\">\\n            <ng-container *ngIf=\\\"oneOrganism[1]==i\\\">\\n              <td [attr.rowspan]=\\\"oneOrganism[3]\\\" class=\\\"interactorSeparation\\\" title=\\\"{{oneOrganism[0]}}\\\">\\n                <div class=\\\"interactorSeparationName\\\"> {{ oneOrganism[0] }}</div>\\n              </td>\\n            </ng-container>\\n          </ng-container>\\n        </ng-container>\\n        <td class=\\\"interactorsColumn\\\">\\n          <div>\\n            {{ interactor.interactor.name }}\\n            <i class=\\\"{{interactorTypeIcon(interactor.interactor)}}\\\"\\n               title=\\\"{{interactor.interactor.interactorType}}\\\"></i>\\n            <!-- Adding of the icons to access details of the interactor -->\\n            <a [routerLink]=\\\"['/complex/search']\\\"\\n               [queryParams]=\\\"{query: interactor.interactor.identifier, page: 1}\\\"\\n               target=\\\"_blank\\\">\\n              <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n                 title=\\\"Complexes containing this interactor\\\"></i>\\n            </a>\\n          </div>\\n          <!-- Icon for the expandable -->\\n          <div class=\\\"container\\\" *ngIf=\\\"interactor.isSubComplex\\\">\\n            <a title=\\\"{{ interactor.interactor.name }}'s interactors\\\" (click)=\\\"toggleSubcomplexExpandable(i)\\\">\\n              {{ interactor.interactor.identifier }}\\n              <i class=\\\"icon icon-common\\\" data-icon=\\\"&#xf078;\\\"\\n                 style=\\\"font-size:small; margin-top: 2px\\\"></i>\\n            </a>\\n          </div>\\n          <div *ngIf=\\\"showExternalLink(interactor.interactor)\\\" class=\\\"interactorType\\\">\\n            <a href=\\\"{{interactor.interactor.identifierLink}}\\\"\\n               target=\\\"_blank\\\">{{ interactor.interactor.identifier }}\\n              <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n            </a>\\n          </div>\\n        </td>\\n        <!-- Interactors' stoichiometry -->\\n        <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n          <td class=\\\"intStoich\\\">\\n            <div [ngClass]=\\\"displayTopLineClass(complex, i)\\\"></div>\\n            <ng-container *ngIf=\\\"!!findInteractorInComplex(complex.complex, interactor.interactor.identifier)\\\">\\n              <div class=\\\"stoichNum\\\"\\n                   title=\\\"{{ getStochiometry(complex.complex, interactor.interactor.identifier) }}\\\">\\n                {{ stochiometryOfInteractors(complex.complex, interactor.interactor.identifier) }}\\n              </div>\\n            </ng-container>\\n            <ng-container class=\\\"stoichComponent\\\"\\n                          *ngIf=\\\"findInteractorsInSubComplex(complex.complex, interactor.interactor.identifier).length > 0\\\">\\n              <!-- subcomplexes' interactors' stoichiometry -->\\n              <div class=\\\"stoichNum\\\"\\n                   title=\\\"{{ getStoichiometrySubComplex(complex.complex, interactor.interactor.identifier) }}\\\">\\n                {{ stoichiometryOfInteractorsMainTable(complex.complex, interactor.interactor.identifier) }}\\n              </div>\\n            </ng-container>\\n            <div [ngClass]=\\\"displayBottomLineClass(complex, i)\\\"></div>\\n          </td>\\n        </ng-container>\\n      </tr>\\n      <!-- Expandable menu for subcomplexes -->\\n      <ng-container *ngIf=\\\"interactor.expanded\\\">\\n        <ng-container *ngIf=\\\"!!interactor.subComponents\\\">\\n          <tbody class=\\\"expandedRows\\\">\\n          <tr class=\\\"expandedRows\\\" *ngFor=\\\"let el of interactor.subComponents; let j=index\\\">\\n            <td class=\\\"intStoich\\\">\\n              <div style=\\\"font-weight: bold\\\">\\n                <a [routerLink]=\\\"['/complex/search']\\\"\\n                   [queryParams]=\\\"{query: el.identifier, page: 1}\\\"\\n                   target=\\\"_blank\\\">\\n                  {{ el.name }}\\n                  <i class=\\\"{{interactorTypeIcon(el)}}\\\"\\n                     title=\\\"{{interactor.interactor.interactorType}}\\\"></i>\\n                  <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n                     title=\\\"More complexes containing this interactor\\\"></i>\\n                </a>\\n              </div>\\n              <div *ngIf=\\\"showExternalLink(el)\\\" class=\\\"interactorType\\\">\\n                <a href=\\\"{{el.identifierLink}}\\\" target=\\\"_blank\\\">{{ el.identifier }}\\n                  <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\" title=\\\"More information\\\"\\n                  ></i>\\n                </a>\\n              </div>\\n            </td>\\n            <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n              <td class=\\\"intStoich\\\">\\n                <div [ngClass]=\\\"displayTopLineClassExpanded(complex, i, j)\\\"></div>\\n                <ng-container *ngIf=\\\"!!findInteractorInComplex(complex.complex, el.identifier)\\\">\\n                  <div class=\\\"stoichNum\\\"\\n                       title=\\\"{{ getStochiometry(complex.complex, el.identifier) }}\\\">\\n                    {{ stochiometryOfInteractors(complex.complex, el.identifier) }}\\n                  </div>\\n                </ng-container>\\n                <ng-container\\n                  *ngIf=\\\"!!findInteractorInExpandedSubComplex(interactor, complex.complex, el.identifier)\\\">\\n                  <!-- subcomplexes' interactors' stoichiometry -->\\n                  <div class=\\\"stoichNum\\\"\\n                       title=\\\"{{ getStochiometryInExpandedSubComplex(interactor, el.identifier) }}\\\">\\n                    {{ stoichiometryOfInteractorsExpandable(interactor, el.identifier) }}\\n                  </div>\\n                </ng-container>\\n                <div [ngClass]=\\\"displayBottomLineClassExpanded(complex, i, j)\\\"></div>\\n              </td>\\n            </ng-container>\\n          </tr>\\n          </tbody>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n\\n  </table>\\n</div>\\n\";","export default \"<div class=\\\"complexNavigatorTable\\\">\\n  <div class=\\\"header\\\">\\n    <cp-table-header [complexSearch]=\\\"complexSearch\\\">\\n    </cp-table-header>\\n  </div>\\n  <div class=\\\"interactors\\\">\\n    <cp-table-interactor-column\\n      [complexSearch]=\\\"complexSearch\\\"\\n      [interactors]=\\\"interactors\\\"\\n      [interactorsSorting]=\\\"interactorsSorting\\\">\\n    </cp-table-interactor-column>\\n  </div>\\n</div>\\n\\n\";","export default \"<div>\\n  <h5 class=\\\"text-center\\\">{{currentPageIndex}} of {{lastPageIndex}}</h5>\\n  <ul class=\\\"pagination text-center\\\" role=\\\"navigation\\\" aria-label=\\\"Pagination\\\">\\n    <li class=\\\"arrow unavailable\\\" *ngIf=\\\"currentPageIndex != 1\\\" aria-disabled=\\\"true\\\"><a\\n      (click)=\\\"getPreviousPage()\\\">&laquo; Previous</a></li>\\n    <ng-container *ngFor=\\\"let index of pagination\\\">\\n      <li *ngIf=\\\"index[1] == 'true'\\\" class=\\\"current\\\"><span class=\\\"show-for-sr\\\">You're on page</span>{{index[0]}}</li>\\n      <li *ngIf=\\\"index[1] == 'false'\\\"><a (click)=\\\"getPage(index[0])\\\">{{index[0]}}</a></li>\\n    </ng-container>\\n    <li class=\\\"arrow\\\" *ngIf=\\\"currentPageIndex != lastPageIndex\\\"><a (click)=\\\"getNextPage()\\\">Next &raquo;</a></li>\\n  </ul>\\n</div>\\n\";","export default \"<div class=\\\"margin-top-large margin-bottom-large row\\\">\\n  <ng-container *ngIf=\\\"complexSearch;else loadingSpinner\\\">\\n    <div class=\\\"columns medium-12\\\" *ngIf=\\\"complexSearch.totalNumberOfResults !== 0\\\">\\n      <h2 class=\\\"padding-left-large\\\">Total number of results: {{ complexSearch.totalNumberOfResults }} </h2>\\n      <div class=\\\"columns medium-4\\\">\\n        <cp-complex-filter *ngIf=\\\"spicesFilter && bioRoleFilter && interactorTypeFilter\\\"\\n                           [spicesFilter]=\\\"spicesFilter\\\"\\n                           [bioRoleFilter]=\\\"bioRoleFilter\\\"\\n                           [interactorTypeFilter]=\\\"interactorTypeFilter\\\" [facets]=\\\"complexSearch.facets\\\"\\n                           (onResetAllFilters)=\\\"onResetAllFilters()\\\"\\n                           (onSpicesFilterChanged)=\\\"onSpicesFilterChanged($event)\\\"\\n                           (onBiologicalRoleFilterChanged)=\\\"onBiologicalRoleFilterChanged($event)\\\"\\n                           (onInteractorTypeFilterChanged)=\\\"onInteractorTypeFilterChanged($event)\\\">\\n        </cp-complex-filter>\\n      </div>\\n      <div class=\\\"columns medium-8\\\">\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n        <div class=\\\"listOfResults\\\" *ngIf=\\\"DisplayType==false\\\">\\n          <div class=\\\"displayButton\\\" style=\\\"text-align: center\\\">\\n            <input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"Complex navigator\\\" class=\\\"button\\\"\\n                   (click)=\\\"toggleDisplayType()\\\">\\n          </div>\\n          <cp-complex-list [complexSearch]=\\\"complexSearch\\\">\\n          </cp-complex-list>\\n        </div>\\n        <div class=\\\"Complex-navigator\\\" *ngIf=\\\"DisplayType\\\">\\n          <div class=\\\"buttonContainer\\\">\\n            <div class=\\\"displayButton\\\" style=\\\"text-align: center\\\">\\n              <input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"View list\\\" class=\\\"button\\\"\\n                     (click)=\\\"toggleDisplayType()\\\">\\n            </div>\\n            <div class=\\\"sortingInteractors\\\">\\n              <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Interactors sorting\\\" class=\\\"button\\\">\\n              <div class=\\\"typeOfSorting\\\">\\n                <input type=\\\"submit\\\" name=\\\"appearanceClassification\\\" value=\\\"Occurrence\\\" class=\\\"button\\\"\\n                       (click)=\\\"setInteractorsSorting('Appearance')\\\">\\n                <input type=\\\"submit\\\" name=\\\"typeClassification\\\" value=\\\"Type\\\" class=\\\"button\\\"\\n                       (click)=\\\"setInteractorsSorting('Type')\\\">\\n                <input type=\\\"submit\\\" name=\\\"organismClassification\\\" value=\\\"Organism\\\" class=\\\"button\\\"\\n                       (click)=\\\"setInteractorsSorting('Organism')\\\">\\n                <input type=\\\"submit\\\" name=\\\"geneClassification\\\" value=\\\"Orthology (Not available yet)\\\" class=\\\"button\\\"\\n                       (click)=\\\"setInteractorsSorting('Orthology')\\\">\\n              </div>\\n            </div>\\n          </div>\\n          <div class=\\\"Matrix\\\">\\n            <cp-complex-navigator [complexSearch]=\\\"complexSearch\\\"\\n                                  [interactors]=\\\"allInteractorsInComplexSearch\\\"\\n                                  [interactorsSorting]=\\\"interactorsSorting\\\">\\n            </cp-complex-navigator>\\n          </div>\\n        </div>\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"columns medium-12 callout alert\\\" *ngIf=\\\"complexSearch.totalNumberOfResults === 0\\\">\\n      <h2>No Complex Portal results found</h2>\\n      <h3>We're sorry but we couldn't find anything that matched your search for: <b>{{ query }}</b></h3>\\n      <h4>Please consider refining your terms:</h4>\\n      <ul>\\n        <li>Make sure all words are spelled correctly</li>\\n        <li>Try different keywords</li>\\n        <li>Be more precise: use gene or protein IDs, e.g. Ndc80 or Q04571</li>\\n        <li>Remove quotes around phrases to search for each word individually. bike shed will often show more results\\n          than\\n          \\\"bike shed\\\"\\n        </li>\\n      </ul>\\n    </div>\\n  </ng-container>\\n  <ng-template #loadingSpinner>\\n    <cp-progress-spinner [query]=\\\"query\\\"></cp-progress-spinner>\\n  </ng-template>\\n</div>\\n\";"]}