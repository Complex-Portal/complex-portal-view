{"version":3,"mappings":"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","names":["interactorTypeIcon","type","ComplexFilterComponent","googleAnalyticsService","_classCallCheck","_angular_core__WEBPACK_IMPORTED_MODULE_4__","_createClass","key","value","filter","status","spicesFilter","push","fireAddedFilterEvent","splice","indexOf","fireRemovedFilterEvent","onSpicesFilterChanged","emit","bioRoleFilter","onBiologicalRoleFilterChanged","interactorTypeFilter","onInteractorTypeFilterChanged","onResetAllFilters","_spicesFilter","length","_bioRoleFilter","_interactorTypeFilter","element","get","_facets","set","facet","name","_shared_google_analytics_service_analytics_service__WEBPACK_IMPORTED_MODULE_2__","selector","template","ComplexListComponent","_angular_core__WEBPACK_IMPORTED_MODULE_2__","ComplexNavigatorSortingComponent","setInteractorsSorting","typeOfSorting","interactorsSortingChange","ComplexNavigatorComponent","TableHeaderComponent","classifyComplexesSize","classifyComplexesSimilarities","complexSearch","isInteractorSortingSet","searchResult","elements","complexesWithSimilarities","Map","biggestComplex","_step","complex","totalLength","interactors","_step3","complexInteractorChecked","interactorType","subComplex","find","c","complexAC","identifier","_loop","_iterator3","_iterator","bigComplex","_step2","comparedComplex","similarities","_step4","biggestComplexInteractor","_step5","complexInteractor","_iterator5","_step6","subComponent","_step7","_iterator7","_iterator6","_loop2","_iterator4","_iterator2","sort","a","b","complex1","complex2","_step8","complex1Interactor","_step9","complex2Interactor","_iterator9","_this","_step10","_step11","_iterator11","_iterator10","_loop3","_iterator8","classifiedList","forEach","found","classification","classifiedComplex","index","similarity","_this2","calculateSimilarity","listOfComplex","reduce","acc","val","concat","unique","includes","indexA","indexB","interactorsSorting","formatStoichiometryValues","stoichiometry","matchedStoichiometry","fetchValuesFromStoichiometry","minValue","parseInt","maxValue","toString","pattern","match","findInteractorInComplex","componentId","component","getStoichiometry","stochiometry","stoichiometryOfInteractors","interactorId","EnrichedInteractor","EnrichedComplex","TableInteractorColumnComponent","complexPortalService","changes","enrichInteractors","classifyInteractors","calculateAllStartAndEndIndexes","enrichedInteractors","classifyInteractorsByType","classifyInteractorsByOrganism","classifyInteractorsByOccurrence","_step12","interactor","isSubComplex","newEnrichedInteractor","hidden","expanded","subComponents","partOfComplex","timesAppearing","organismName","_this3","loadSubInteractors","subscribe","_loop4","_iterator12","interactorOrganism","i","j","subInteractorIds","map","foundComplex","getSimplifiedComplex","pipe","enrichedComplexes","_step13","calculateStartAndEndIndexes","_iterator13","valueA","valueB","Math","min","max","subComponentsToCheck","enrichedComplex","startInteractorIndex","endInteractorIndex","startSubComponentIndex","endSubComponentIndex","getMinValue","getMaxValue","k","_step14","_step15","_this4","enrichedInteractor","_loop5","_iterator15","_iterator14","localeCompare","rangeOfInteractorOrganismV2","rangeOfInteractorTypeV2","_step16","oneInteractor","_step17","_step18","complexesInteractors","stoichiometryValue","isNaN","_iterator18","_step19","oneSubInteractor","oneEnrichedInteractor","_this5","_loop6","_iterator19","_iterator17","_iterator16","ranges","start","oneType","_shared_service_complex_portal_service__WEBPACK_IMPORTED_MODULE_2__","_angular_core__WEBPACK_IMPORTED_MODULE_6__","TableInteractorExternalLinkComponent","identifierLink","TableInteractorNameComponent","_angular_core__WEBPACK_IMPORTED_MODULE_3__","TableInteractorStoichiometryComponent","TableMainInteractorComponent","_complex_navigator_utils__WEBPACK_IMPORTED_MODULE_2__","some","interactorIndex","doesLineCrossInteractorCell","doesLineEndOnInteractorCell","doesLineStartOnInteractorCell","matches","findInteractorsInSubComplex","stoichiometryValues","addedStoichiometryValues","_this6","components","_step20","_iterator20","TableSubcomponentInteractorComponent","subComponentIndex","doesLineCrossSubcomponentCell","doesLineEndOnSubcomponentCell","doesLineStartOnSubcomponentCell","findInteractorInSubcomplex","_this7","TableStructureComponent","router","_angular_router__WEBPACK_IMPORTED_MODULE_2__","ComplexPaginatorComponent","updatePaginatior","end","pagination","_lastPageIndex","_currentPageIndex","_pagination","onPageChange","lastPageIndex","pageIndex","currentPageIndex","ComplexResultsComponent","route","titleService","LIST_VIEW","setTitle","_allInteractorsInComplexSearch","queryParams","_this8","_query","split","Number","requestComplexResults","document","body","scrollTop","findComplex","query","pageSize","_this9","totalNumberOfResults","ceil","_step21","_shared_model_complex_results_interactor_model__WEBPACK_IMPORTED_MODULE_5__","description","_loop7","_iterator21","_shared_loading_indicators_progress_bar_progress_bar_component__WEBPACK_IMPORTED_MODULE_3__","undefined","prepareFiltersForParams","navigate","filterCount","getFilterCount","fireMultiFilterEvent","replace","reloadPage","_complexSearch","_pageSize","DisplayType","COMPLEX_NAVIGATOR_VIEW","_angular_router__WEBPACK_IMPORTED_MODULE_6__","_angular_platform_browser__WEBPACK_IMPORTED_MODULE_7__","_shared_google_analytics_service_analytics_service__WEBPACK_IMPORTED_MODULE_4__","ComplexResultsModule","imports","_angular_router__WEBPACK_IMPORTED_MODULE_16__","path","_complex_results_component__WEBPACK_IMPORTED_MODULE_0__","_angular_common__WEBPACK_IMPORTED_MODULE_17__","_shared_loading_indicators_progress_spinner_progress_spinner_module__WEBPACK_IMPORTED_MODULE_4__","exports","_complex_navigator_table_structure_table_structure_component__WEBPACK_IMPORTED_MODULE_6__","declarations","_complex_list_complex_list_component__WEBPACK_IMPORTED_MODULE_3__","_complex_filter_complex_filter_component__WEBPACK_IMPORTED_MODULE_2__","_complex_paginator_complex_paginator_component__WEBPACK_IMPORTED_MODULE_1__","_complex_navigator_complex_navigator_component__WEBPACK_IMPORTED_MODULE_5__","_complex_navigator_table_structure_table_header_table_header_component__WEBPACK_IMPORTED_MODULE_7__","_complex_navigator_table_structure_table_interactor_column_table_interactor_column_component__WEBPACK_IMPORTED_MODULE_8__","_complex_navigator_table_structure_table_interactor_column_table_interactor_name_table_interactor_name_component__WEBPACK_IMPORTED_MODULE_9__","_complex_navigator_table_structure_table_interactor_column_table_interactor_external_link_table_interactor_external_link_component__WEBPACK_IMPORTED_MODULE_10__","_complex_navigator_table_structure_table_interactor_column_table_interactor_stoichiometry_table_interactor_stoichiometry_component__WEBPACK_IMPORTED_MODULE_11__","_complex_navigator_table_structure_table_interactor_column_table_main_interactor_table_main_interactor_component__WEBPACK_IMPORTED_MODULE_12__","_complex_navigator_table_structure_table_interactor_column_table_subcomponent_interactor_table_subcomponent_interactor_component__WEBPACK_IMPORTED_MODULE_13__","_complex_navigator_sorting_complex_navigator_sorting_component__WEBPACK_IMPORTED_MODULE_14__","Interactor","_identifier","_identifierLink","_name","_description","_interactorType","__webpack_exports__"],"sources":["webpack:///src/app/complex/complex-portal-utils.ts","webpack:///src/app/complex/complex-results/complex-filter/complex-filter.component.ts","webpack:///src/app/complex/complex-results/complex-list/complex-list.component.ts","webpack:///src/app/complex/complex-results/complex-navigator-sorting/complex-navigator-sorting.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/complex-navigator-utils.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.ts","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.ts","webpack:///src/app/complex/complex-results/complex-paginator/complex-paginator.component.ts","webpack:///src/app/complex/complex-results/complex-results.component.ts","webpack:///src/app/complex/complex-results/complex-results.module.ts","webpack:///src/app/complex/shared/model/complex-results/interactor.model.ts","webpack:///src/app/complex/complex-results/complex-filter/complex-filter.component.html","webpack:///src/app/complex/complex-results/complex-list/complex-list.component.html","webpack:///src/app/complex/complex-results/complex-navigator-sorting/complex-navigator-sorting.component.html","webpack:///src/app/complex/complex-results/complex-navigator/complex-navigator.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.html","webpack:///src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.html","webpack:///src/app/complex/complex-results/complex-paginator/complex-paginator.component.html","webpack:///src/app/complex/complex-results/complex-results.component.html"],"sourcesContent":["export function interactorTypeIcon(type): string {\n  switch (type) {\n    case 'small molecule':\n      return 'icon icon-conceptual icon-chemical';\n    case 'protein':\n    case 'peptide':\n      return 'icon icon-conceptual icon-structures-3d';\n    case 'stable complex':\n      return 'icon icon-conceptual icon-systems';\n    case 'molecule set':\n      return 'icon icon-generic icon-math';\n    case 'single stranded deoxyribonucleic acid':\n    case 'double stranded deoxyribonucleic acid':\n    case 'small nuclear rna':\n    case 'small nucleolar rna':\n    case 'ribosomal rna':\n    case 'messenger rna':\n    case 'transfer rna':\n    case 'signal recognition particle rna':\n    case 'ribonucleic acid':\n    case 'nucleic acid':\n    case 'long non-coding ribonucleic acid':\n      return 'icon icon-conceptual icon-dna';\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Facets} from '../../shared/model/complex-results/facets.model';\nimport {AnalyticsService} from '../../../shared/google-analytics/service/analytics.service';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\nimport {interactorTypeIcon} from '../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-complex-filter',\n  templateUrl: './complex-filter.component.html',\n  styleUrls: ['./complex-filter.component.css']\n})\nexport class ComplexFilterComponent implements OnInit {\n\n  private _facets: Facets;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n  @Output() onSpicesFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onBiologicalRoleFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onInteractorTypeFilterChanged: EventEmitter<string[]> = new EventEmitter<string[]>();\n  @Output() onResetAllFilters: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor(private googleAnalyticsService: AnalyticsService) {\n  }\n\n  ngOnInit() {\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeSpeciesFilter(filter: string, status: boolean) {\n    if (status) {\n      this.spicesFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.spicesFilter.splice(this.spicesFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onSpicesFilterChanged.emit(this.spicesFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeBiologicalRoleFilter(filter: string, status: boolean) {\n    if (status) {\n      this.bioRoleFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.bioRoleFilter.splice(this.bioRoleFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onBiologicalRoleFilterChanged.emit(this.bioRoleFilter);\n  }\n\n  /**\n   *\n   * @param filter selected filter\n   * @param status status if selected filter has been added or removed\n   */\n  public changeInteractorTypeFilter(filter: string, status: boolean) {\n    if (status) {\n      this.interactorTypeFilter.push(filter);\n      this.googleAnalyticsService.fireAddedFilterEvent(filter);\n    } else {\n      this.interactorTypeFilter.splice(this.interactorTypeFilter.indexOf(filter), 1);\n      this.googleAnalyticsService.fireRemovedFilterEvent(filter);\n    }\n    this.onInteractorTypeFilterChanged.emit(this.interactorTypeFilter);\n  }\n\n  /**\n   * Emit event to parent component to remove all filters\n   */\n  public resetAllFilters() {\n    this.onResetAllFilters.emit(true);\n  }\n\n  /**\n   *\n   * @returns {boolean} true is any filter array contains an filter\n   */\n  public anyFiltersSelected() {\n    return (this._spicesFilter.length !== 0 || this._bioRoleFilter.length !== 0 || this._interactorTypeFilter.length !== 0);\n  }\n\n  /**\n   *\n   * @param element filter to check if already selected\n   * @param filter selected filters\n   * @returns {boolean} true if filter is already in selected filters\n   */\n  public isSelected(element: string, filter: string[]): boolean {\n    return filter.indexOf(element) !== -1;\n  }\n\n  get facets(): Facets {\n    return this._facets;\n  }\n\n  @Input()\n  set facets(value: Facets) {\n    this._facets = value;\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  @Input()\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  @Input()\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  @Input()\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n\n  public facetTypeIcon(facet): string {\n    return interactorTypeIcon(facet.name);\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\n\n@Component({\n  selector: 'cp-complex-list',\n  templateUrl: './complex-list.component.html',\n  styleUrls: ['./complex-list.component.css']\n})\nexport class ComplexListComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n\n  constructor() {\n  }\n\n  ngOnInit() {\n  }\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-navigator-sorting',\n  templateUrl: './complex-navigator-sorting.component.html',\n  styleUrls: ['./complex-navigator-sorting.component.css']\n})\nexport class ComplexNavigatorSortingComponent implements OnInit {\n  @Output() interactorsSortingChange = new EventEmitter<string>();\n  @Input() interactorsSorting: string;\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.setInteractorsSorting('Occurrence');\n  }\n\n  setInteractorsSorting(typeOfSorting: string) {\n    this.interactorsSortingChange.emit(typeOfSorting);\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\n\n\n@Component({\n  selector: 'cp-complex-navigator',\n  templateUrl: './complex-navigator.component.html',\n  styleUrls: ['./complex-navigator.component.css']\n})\nexport class ComplexNavigatorComponent {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  interactorsSorting: 'Occurrence';\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {ComplexSearchResult} from '../../../../shared/model/complex-results/complex-search.model';\nimport {TableInteractorColumnComponent} from '../table-interactor-column/table-interactor-column.component';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\n@Component({\n  selector: 'cp-table-header',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css'],\n})\n\nexport class TableHeaderComponent implements OnInit {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactorsTable: TableInteractorColumnComponent;\n  @Input() interactorsSorting: string;\n  \n  ngOnInit(): void {\n    this.classifyComplexesSize();\n    this.classifyComplexesSimilarities(this.complexSearch);\n    this.isInteractorSortingSet();\n  }\n\n  classifyComplexesSize(): void {\n    const searchResult: Element[] = this.complexSearch.elements;\n    const complexesWithSimilarities: Map<Element, number> = new Map<ComplexSearchResult['elements'][0], number>();\n    const biggestComplex: [Element, number] = [searchResult[0], 0];\n\n    // check which complex is the biggest\n    for (const complex of searchResult) {\n      let totalLength = complex.interactors.length;\n      for (const complexInteractorChecked of complex.interactors) {\n        if (complexInteractorChecked.interactorType === 'stable complex') {\n          const subComplex: Element = searchResult.find(c => c.complexAC === complexInteractorChecked.identifier);\n          totalLength += subComplex.interactors.length;\n        }\n      }\n      if (totalLength > biggestComplex[1]) {\n        biggestComplex[0] = complex;\n        biggestComplex[1] = totalLength;\n      }\n    }\n\n    // console.log(typeof biggestComplex[0]);\n    const bigComplex: Element = biggestComplex[0]; // access to the complex\n\n    // compare the other complexes with the biggest\n    for (const comparedComplex of searchResult) {\n      let similarities = 0;\n      for (const biggestComplexInteractor of bigComplex.interactors) {\n        for (const complexInteractor of comparedComplex.interactors) {\n          if (biggestComplexInteractor.identifier === complexInteractor.identifier) {\n            similarities++;\n          }\n        }\n        if (biggestComplexInteractor.interactorType === 'stable complex') {\n          const subComplex: Element = searchResult.find(c => c.complexAC === biggestComplexInteractor.identifier);\n          if (comparedComplex.complexAC === bigComplex.complexAC) {\n            similarities += subComplex.interactors.length;\n          }\n          for (const subComponent of subComplex.interactors) {\n            for (const complexInteractor of comparedComplex.interactors) {\n              if (subComponent.identifier === complexInteractor.identifier) {\n                similarities++;\n              }\n            }\n          }\n        }\n      }\n      complexesWithSimilarities.set(comparedComplex, similarities);\n    }\n    // sort complexes depending on their similarities with the biggest\n    this.complexSearch.elements.sort((a, b) => complexesWithSimilarities.get(b)! - complexesWithSimilarities.get(a)!);\n  }\n\n  calculateSimilarity(complex1, complex2) {\n    let similarities = 0;\n    for (const complex1Interactor of complex1.interactors) {\n      for (const complex2Interactor of complex2.interactors) {\n        if (complex1Interactor.identifier === complex2Interactor.identifier) {\n          similarities++;\n        }\n      }\n      if (complex1Interactor.interactorType === 'stable complex') {\n        const subComplex: Element = this.complexSearch.elements.find(\n          complex => complex.complexAC === complex1Interactor.identifier\n        );\n        if (complex2.complexAC === complex1.complexAC) {\n          similarities += subComplex.interactors.length;\n        }\n        for (const subComponent of subComplex.interactors) {\n          for (const complexInteractor of complex2.interactors) {\n            if (subComponent.identifier === complexInteractor.identifier) {\n              similarities++;\n            }\n          }\n        }\n      }\n    }\n    return similarities;\n  }\n\n  classifyComplexesSimilarities(complexSearch) {\n    const classifiedList = [];\n    complexSearch.elements.forEach(complex => {\n      let found = false;\n      classifiedList.forEach(classification => {\n        classification.forEach((classifiedComplex, index) => {\n          const similarity = this.calculateSimilarity(complex, classifiedComplex);\n          if (similarity >= 1) {\n            found = true;\n            classification.splice(index + 1, 0, complex);\n          }\n        });\n      });\n      if (!found) {\n        // this list is multidimensional (1 list per complex)\n        classifiedList.push([complex]);\n      }\n    });\n\n    // make the array 1D\n    const listOfComplex = classifiedList.reduce((acc, val) => acc.concat(val), []);\n\n    // The list which was multidimensional before has duplicates\n    const unique = [];\n    listOfComplex.forEach(element => {\n      if (!unique.includes(element)) {\n        unique.push(element);\n      }\n    });\n\n    // sorting by similarities\n    this.complexSearch.elements.sort((a, b) => {\n      const indexA = unique.indexOf(a);\n      const indexB = unique.indexOf(b);\n      if (indexA !== -1 && indexB !== -1) {\n        return indexA - indexB; // Sort in ascending order based on the index\n      } else if (indexA !== -1) {\n        return -1; // Put element a before element b\n      } else if (indexB !== -1) {\n        return 1; // Put element b before element a\n      } else {\n        return 0; // Leave the order unchanged if both elements are not found in unique list\n      }\n    });\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n}\n","import {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\n\nexport function formatStoichiometryValues(stoichiometry: string): string {\n  if (!!stoichiometry) {\n    const matchedStoichiometry = fetchValuesFromStoichiometry(stoichiometry);\n    if (!!matchedStoichiometry) {\n      const minValue = parseInt(matchedStoichiometry[1], 10);\n      const maxValue = parseInt(matchedStoichiometry[2], 10);\n      if (minValue === maxValue) {\n        return minValue.toString();\n      } else {\n        return `${minValue}, ${maxValue}`;\n      }\n    }\n  }\n  return ' '; // sometimes we don't have the stoichiometry value\n}\n\nexport function fetchValuesFromStoichiometry(stoichiometry: string) {\n  const pattern = 'minValue: ([0-9+]), maxValue: ([0-9+])';\n  return stoichiometry.match(pattern);\n}\n\nexport function findInteractorInComplex(complex: Element, componentId: string): ComplexComponent {\n  return complex.interactors.find(component => component.identifier === componentId);\n}\n\nexport function getStoichiometry(complex: Element, componentId: string): string {\n  const match = this.findInteractorInComplex(complex, componentId);\n  if (!!match) {\n    if (!!match.stochiometry) {\n      return 'Stoichiometry values: ' + (match.stochiometry);\n    } else {\n      return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n    }\n  }\n  return null;\n}\n\nexport function stoichiometryOfInteractors(complex: Element, interactorId: string): string {\n  const match = findInteractorInComplex(complex, interactorId);\n  if (!!match) {\n    return formatStoichiometryValues(match.stochiometry);\n  }\n  return null;\n}\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {ComplexSearchResult} from '../../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../../shared/model/complex-results/interactor.model';\n// import {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {Observable} from 'rxjs/Observable';\nimport {of} from 'rxjs';\nimport {ComplexPortalService} from '../../../../shared/service/complex-portal.service';\nimport {map} from 'rxjs/operators';\nimport {formatStoichiometryValues, stoichiometryOfInteractors} from './complex-navigator-utils';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\nexport class EnrichedInteractor {\n  interactor: Interactor;\n  hidden: boolean;\n  isSubComplex: boolean;\n  expanded: boolean;\n  subComponents: ComplexComponent[];\n  partOfComplex: number[];\n  timesAppearing: number;\n  organismName: string;\n}\n\nexport class EnrichedComplex {\n  complex: Element;\n  startInteractorIndex: number;\n  endInteractorIndex: number;\n  startSubComponentIndex: number;\n  endSubComponentIndex: number;\n}\n\n@Component({\n  selector: 'cp-table-interactor-column',\n  templateUrl: './table-interactor-column.component.html',\n  styleUrls: ['./table-interactor-column.component.css']\n})\nexport class TableInteractorColumnComponent implements OnChanges {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactorsSorting: string;\n  @Input() interactors: Interactor[];\n\n  enrichedInteractors: EnrichedInteractor[];\n  enrichedComplexes: EnrichedComplex[];\n  ranges: number[];\n\n\n  constructor(private complexPortalService: ComplexPortalService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!!changes['interactors']) {\n      this.enrichInteractors();\n    }\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  private classifyInteractors(): void {\n    if (!!this.interactorsSorting && !!this.enrichedInteractors && this.enrichedInteractors.length > 0) {\n      if (this.interactorsSorting === 'Type') {\n        this.classifyInteractorsByType();\n      } else if (this.interactorsSorting === 'Organism') {\n        this.classifyInteractorsByOrganism();\n      } else {\n        this.classifyInteractorsByOccurrence();\n      }\n    }\n  }\n\n  private enrichInteractors() {\n    this.enrichedInteractors = [];\n    for (const interactor of this.interactors) {\n      const isSubComplex = interactor.interactorType === 'stable complex';\n      const newEnrichedInteractor: EnrichedInteractor = {\n        interactor,\n        hidden: false,\n        isSubComplex,\n        expanded: false,\n        subComponents: null,\n        partOfComplex: [],\n        timesAppearing: 0,\n        organismName: '',\n      };\n      if (isSubComplex) {\n        this.loadSubInteractors(newEnrichedInteractor).subscribe(subComponents => newEnrichedInteractor.subComponents = subComponents);\n      }\n      this.enrichedInteractors.push(newEnrichedInteractor);\n    }\n    this.interactorOrganism();\n  }\n\n  toggleSubcomplexExpandable(i: number): void {\n    this.enrichedInteractors[i].expanded = !this.enrichedInteractors[i].expanded;\n\n    if (this.enrichedInteractors[i].expanded) {\n      // EnrichedInteractor has been expanded, we need to:\n\n      // 1. Collapse the other ones, in case there is any other expanded\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        if (i !== j) {\n          this.enrichedInteractors[j].expanded = false;\n        }\n      }\n\n      // 2. Hide any interactor now displayed in the expanded section\n      if (!!this.enrichedInteractors[i].subComponents) {\n        const subInteractorIds: string[] = this.enrichedInteractors[i].subComponents.map(component => component.identifier);\n        for (let j = 0; j < this.enrichedInteractors.length; j++) {\n          if (i !== j) {\n            this.enrichedInteractors[j].hidden = !!subInteractorIds.includes(this.enrichedInteractors[j].interactor.identifier);\n          }\n        }\n      }\n    } else {\n      // EnrichedInteractor has been collapsed, we need to:\n      // 1. Display any interactor previously hidden\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        this.enrichedInteractors[j].hidden = false;\n      }\n    }\n\n    // Something has been expanded or collapsed, we need to recalculate the start and end indexes for the lines\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n\n  }\n\n  private loadSubInteractors(interactor: EnrichedInteractor): Observable<ComplexComponent[]> {\n    // this function returns the list of subcomponents of an interactor of type stable complex\n    const foundComplex: Element = this.complexSearch.elements.find(complex => complex.complexAC === interactor.interactor.identifier);\n    if (!!foundComplex) {\n      return of(foundComplex.interactors);\n    } else {\n      // Actually call the back-end to fetch these\n      return this.complexPortalService.getSimplifiedComplex(interactor.interactor.identifier)\n        .pipe(map(complex => complex?.interactors));\n    }\n  }\n\n  private calculateAllStartAndEndIndexes(): void {\n    this.enrichedComplexes = [];\n\n    for (const complex of this.complexSearch.elements) {\n      this.enrichedComplexes.push(this.calculateStartAndEndIndexes(complex));\n    }\n  }\n\n  private getMinValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.min(valueA, valueB);\n  }\n\n  private getMaxValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.max(valueA, valueB);\n  }\n\n  private calculateStartAndEndIndexes(complex: Element): EnrichedComplex {\n    const subComponentsToCheck: string[] = [];\n\n    const enrichedComplex: EnrichedComplex = {\n      complex,\n      startInteractorIndex: null,\n      endInteractorIndex: null,\n      startSubComponentIndex: null,\n      endSubComponentIndex: null\n    };\n\n    // We iterate through the interactors to find the first and last one part of the complex\n    // We do this to be able to draw a line connecting all interactors in the complex\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n        for (let j = 0; j < complex.interactors.length; j++) {\n          if (complex.interactors[j].identifier === this.enrichedInteractors[i].interactor.identifier) {\n            // The interactor is part of the complex, we update the start and end indices for the interactors\n            // line as it may start in this interactor\n            enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n            enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n\n            // The interactor is a subcomplex\n            if (this.enrichedInteractors[i].isSubComplex && !!this.enrichedInteractors[i].subComponents) {\n              // The subcomponents of that subcomplex could also be displayed in the table as separate interactors.\n              // In that case, the line could start or end there, so we need to also check the position of those\n              // interactors. We add those subcomponents to 'subComponentsToCheck' to check their position later\n              this.enrichedInteractors[i].subComponents.forEach(subComponent => subComponentsToCheck.push(subComponent.identifier));\n              if (this.enrichedInteractors[i].expanded) {\n                // If the subcomplex is expanded, as the subcomplex is part of the complex, all its subcomponents are also part\n                // of it. That means we need a line connecting all the subcomponents.\n                // That line must also connect to the subcomplex, so we start it at -1 to make sure it starts at the interactor cell\n                // and not at the first subcomponent\n                enrichedComplex.startSubComponentIndex = -1;\n                enrichedComplex.endSubComponentIndex = this.enrichedInteractors[i].subComponents.length - 1;\n              }\n            }\n          } else if (this.enrichedInteractors[i].isSubComplex &&\n            !!this.enrichedInteractors[i].subComponents &&\n            this.enrichedInteractors[i].expanded) {\n            // The interactor is not part of the complex, but it is a subcomplex, and it is expanded.\n            // This means the subcomponents of the subcomplex are visible, and any of them could be part of the complex.\n            // In that case, the line could start or end on any of those subcomponents\n            for (let k = 0; k < this.enrichedInteractors[i].subComponents.length; k++) {\n              if (complex.interactors[j].identifier === this.enrichedInteractors[i].subComponents[k].identifier) {\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the interactors\n                // line as it may start in this interactor\n                enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n                enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n                // The subcomponent of this interactor is part of the complex, we update the start and end indices for the subcomponents\n                // line as it may start in this subcomponent\n                enrichedComplex.startSubComponentIndex = this.getMinValue(enrichedComplex.startSubComponentIndex, k);\n                enrichedComplex.endSubComponentIndex = this.getMaxValue(enrichedComplex.endSubComponentIndex, k);\n              }\n            }\n          }\n        }\n      }\n    }\n\n    // We finally check the position of the subcomponents of subcomplexes part of the complex on the main table.\n    // If any is before or after where the lines start and end, then we need to update the start and end indexes,\n    // as the line must start or end there\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n        if (subComponentsToCheck.includes(this.enrichedInteractors[i].interactor.identifier)) {\n          // The interactor is part of a subcomplex that is part of the complex, we update the start and end indices for the interactors\n          // line as it may start in this interactor\n          enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n          enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n        }\n      }\n    }\n    return enrichedComplex;\n  }\n\n  private interactorOrganism() {\n    for (const complex of this.complexSearch.elements) {\n      const organismName = complex.organismName;\n      for (const complexInteractor of complex.interactors) {\n        const match = this.enrichedInteractors.find(\n          enrichedInteractor => enrichedInteractor.interactor.identifier === complexInteractor.identifier\n        );\n        match.organismName = organismName;\n      }\n    }\n  }\n\n  public classifyInteractorsByOrganism() {\n    this.enrichedInteractors.sort((a, b) => b.organismName.localeCompare(a.organismName));\n    // this.calculateAllStartAndEndIndexes();\n    this.rangeOfInteractorOrganismV2();\n  }\n\n  public classifyInteractorsByType() {\n    this.enrichedInteractors.sort((a, b) => b.interactor.interactorType.localeCompare(a.interactor.interactorType));\n    this.rangeOfInteractorTypeV2();\n  }\n\n  public classifyInteractorsByOccurrence() {\n    for (const oneInteractor of this.enrichedInteractors) {\n      for (const complex of this.complexSearch.elements) {\n        for (const complexesInteractors of complex.interactors) {\n          if (oneInteractor.interactor.identifier === complexesInteractors.identifier) {\n            const stoichiometryValue = parseInt(stoichiometryOfInteractors(complex, oneInteractor.interactor.identifier), 10);\n            if (!isNaN(stoichiometryValue)) {\n              oneInteractor.timesAppearing += stoichiometryValue;\n            }\n          }\n        }\n        if (oneInteractor.isSubComplex && !!oneInteractor.subComponents) {\n          for (const oneSubInteractor of oneInteractor.subComponents) {\n            const oneEnrichedInteractor = this.enrichedInteractors.find(\n              enrichedInteractor => enrichedInteractor.interactor.identifier === oneSubInteractor.identifier\n            );\n            oneEnrichedInteractor.timesAppearing = parseInt(formatStoichiometryValues(oneSubInteractor.stochiometry), 10);\n          }\n        }\n      }\n    }\n    this.enrichedInteractors.sort((a, b) =>\n      b.timesAppearing - a.timesAppearing\n    );\n    this.ranges = [];\n  }\n\n  public rangeOfInteractorTypeV2() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.interactorType !== this.enrichedInteractors[i + 1].interactor.interactorType) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.interactorType, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  public rangeOfInteractorOrganismV2() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].organismName !== this.enrichedInteractors[i + 1].organismName) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].organismName, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-external-link',\n  templateUrl: './table-interactor-external-link.component.html',\n  styleUrls: ['./table-interactor-external-link.component.css']\n})\nexport class TableInteractorExternalLinkComponent {\n\n  @Input() interactorId: string;\n  @Input() identifierLink: string;\n  @Input() interactorType: string;\n\n  showExternalLink(): boolean {\n    return this.interactorType !== 'stable complex' && !!this.identifierLink;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {interactorTypeIcon} from '../../../../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-table-interactor-name',\n  templateUrl: './table-interactor-name.component.html',\n  styleUrls: ['./table-interactor-name.component.css']\n})\nexport class TableInteractorNameComponent implements OnInit {\n\n  @Input() interactorName: string;\n  @Input() interactorType: string;\n  @Input() interactorId: string;\n  @Input() interactorTypeIcon: string;\n\n  ngOnInit(): void {\n    this.interactorTypeIcon = interactorTypeIcon(this.interactorType);\n  }\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-stoichiometry',\n  templateUrl: './table-interactor-stoichiometry.component.html',\n  styleUrls: ['./table-interactor-stoichiometry.component.css']\n})\nexport class TableInteractorStoichiometryComponent {\n  @Input() stoichiometryText: string;\n  @Input() stoichiometryValue: string;\n}\n","import {Component, Input} from '@angular/core';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {Element} from '../../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {\n  fetchValuesFromStoichiometry,\n  findInteractorInComplex,\n  getStoichiometry,\n  stoichiometryOfInteractors\n} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-main-interactor',\n  templateUrl: './table-main-interactor.component.html',\n  styleUrls: ['./table-main-interactor.component.css']\n})\nexport class TableMainInteractorComponent {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  findInteractorInComplex = findInteractorInComplex;\n  getStoichiometry = getStoichiometry;\n  stoichiometryOfInteractors = stoichiometryOfInteractors;\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  findInteractorsInSubComplex(complex: Element, interactorId: string): ComplexComponent[] {\n    return this.enrichedInteractors\n      // filter subcomplexes\n      .filter(interactor => interactor.isSubComplex)\n      // filter subcomplexes included in complex\n      .filter(interactor =>\n        complex.interactors.some(component => component.identifier === interactor.interactor.identifier))\n      // filter subcomplexes that match the componentId\n      .filter(interactor => !!interactor.subComponents)\n      .map(interactor => interactor.subComponents.find(subComponent => subComponent.identifier === interactorId))\n      .filter(component => !!component);\n  }\n\n  public displayTopLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnInteractorCell(complex, interactorIndex) && !this.doesLineStartOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnInteractorCell(complex, interactorIndex) && !this.doesLineEndOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  getStoichiometrySubComplex(complex: Element, interactorId: string): string {\n    const matches = this.findInteractorsInSubComplex(complex, interactorId);\n    if (matches.length > 0) {\n      const stoichiometryValues = this.addedStoichiometryValues(matches);\n      if (!!stoichiometryValues) {\n        return `Stoichiometry values: minValue: ${stoichiometryValues[0]}, maxValue: ${stoichiometryValues[1]}`;\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  stoichiometryOfInteractorsMainTable(complex: Element, interactorId: string): string {\n    const matches = this.findInteractorsInSubComplex(complex, interactorId);\n    if (matches.length > 0) {\n      const stoichiometryValues = this.addedStoichiometryValues(matches);\n      if (!!stoichiometryValues) {\n        if (stoichiometryValues[0] === stoichiometryValues[1]) {\n          return stoichiometryValues[0].toString();\n        } else {\n          return `${stoichiometryValues[0]}, ${stoichiometryValues[1]}`;\n        }\n      } else {\n        return ' ';\n      }\n    }\n    return null;\n  }\n\n  private doesLineCrossInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n\n      // The line starts before this interactor and ends after, so it crosses through the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      // The line starts before this interactor and end at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor, and it must cross through the interactor cell to the subcomponents\n        if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n\n      if (!this.enrichedInteractors[interactorIndex].isSubComplex) {\n        // If the interactor is not a subcomplex, then the interactor has no subcomponents and the line starts in it\n        return true;\n      }\n      // If the interactor is a subcomplex.\n      // If the interactor is actually part of the complex, the line starts in this interactor\n      // Otherwise, the line actually starts on one of the subcomponents of the complex, but not on the interactor itself, as it is\n      // not part of the complex.\n      if (complex.complex.interactors.some(component =>\n        this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line ends at this interactor or on any of its subcomponents\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n\n      // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n      // the line does not end in this interactor, and it must cross through to the subcomponents\n      if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n        if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  private addedStoichiometryValues(components: ComplexComponent[]): [number, number] {\n    let minValue: number = null;\n    let maxValue: number = null;\n    for (const component of components) {\n      if (!!component.stochiometry) {\n        const matchedStoichiometry = fetchValuesFromStoichiometry(component.stochiometry);\n        if (!!matchedStoichiometry\n        ) {\n          if (minValue === null) {\n            minValue = 0;\n          }\n          if (maxValue === null) {\n            maxValue = 0;\n          }\n          minValue += parseInt(matchedStoichiometry[1], 10);\n          maxValue += parseInt(matchedStoichiometry[2], 10);\n        }\n      }\n    }\n    if (minValue !== null && maxValue !== null) {\n      return [minValue, maxValue];\n    }\n    return null;\n  }\n\n}\n","import {Component, Input} from '@angular/core';\nimport {Element} from '../../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {findInteractorInComplex, formatStoichiometryValues, getStoichiometry, stoichiometryOfInteractors} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-subcomponent-interactor',\n  templateUrl: './table-subcomponent-interactor.component.html',\n  styleUrls: ['./table-subcomponent-interactor.component.css']\n})\nexport class TableSubcomponentInteractorComponent {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() j: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  findInteractorInComplex = findInteractorInComplex;\n  getStoichiometry = getStoichiometry;\n  stoichiometryOfInteractors = stoichiometryOfInteractors;\n  \n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  get el(): ComplexComponent {\n    return this.enrichedInteractors[this.i].subComponents[this.j];\n  }\n\n  public displayTopLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public findInteractorInExpandedSubComplex(interactor: EnrichedInteractor, complex: Element, interactorId: string): ComplexComponent {\n    if (complex.interactors.some(component => component.identifier === interactor.interactor.identifier)) {\n      return interactor.subComponents.find(component => component.identifier === interactorId);\n    }\n    return null;\n  }\n\n  getStoichiometryInExpandedSubComplex(interactor: EnrichedInteractor, interactorId: string): string {\n    const match = this.findInteractorInSubcomplex(interactor, interactorId);\n    if (!!match) {\n      if (!!match.stochiometry) {\n        return 'Stoichiometry values: ' + (match.stochiometry);\n      } else {\n        return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n      }\n    }\n    return null;\n  }\n\n  stoichiometryOfInteractorsExpandable(interactor: EnrichedInteractor, interactorId: string): string {\n    const match = this.findInteractorInSubcomplex(interactor, interactorId);\n    if (!!match) {\n      return formatStoichiometryValues(match.stochiometry);\n    }\n    return null;\n  }\n\n  private doesLineCrossSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n      // The line starts before this interactor and ends after, so it crosses through all the subcomponents of the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n        // The line starts before this subcomponent and ends after, so it crosses through the subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this interactor, and it ends on a later subcomponent, so it crosses through this subcomponent\n        if (complex.startInteractorIndex < interactorIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this subcomponent, and it ends on a later interactor, so it crosses through this subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endInteractorIndex > interactorIndex) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n      if (complex.startSubComponentIndex != null && complex.startSubComponentIndex === subComponentIndex) {\n        // If the subcomplex is a component of the complex, the line starts in the cell of the interactor, meaning it cannot\n        // start on any subcomponent.\n        // Otherwise, it starts on the subcomponent with the index subComponentIndex\n        return !complex.complex.interactors.some(component =>\n          this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier);\n\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n      // The line ends at this interactor and this subcomponent\n      if (complex.endSubComponentIndex != null && complex.endSubComponentIndex === subComponentIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private findInteractorInSubcomplex(interactor: EnrichedInteractor, interactorId: string): ComplexComponent {\n    return interactor.subComponents.find(component => component.identifier === interactorId);\n  }\n\n}\n","import {Component, Input} from '@angular/core';\nimport {ComplexSearchResult} from '../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../shared/model/complex-results/interactor.model';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'cp-table-structure',\n  templateUrl: './table-structure.component.html',\n  styleUrls: ['./table-structure.component.css']\n})\nexport class TableStructureComponent {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() interactorsSorting: string;\n\n  constructor(private router: Router) {\n  }\n}\n","import {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-paginator',\n  templateUrl: './complex-paginator.component.html',\n  styleUrls: ['./complex-paginator.component.css']\n})\nexport class ComplexPaginatorComponent implements OnInit, OnChanges {\n  private _lastPageIndex: number;\n  private _currentPageIndex: number;\n  private _pagination: any;\n\n  @Output() onPageChange: EventEmitter<number> = new EventEmitter<number>();\n\n\n  constructor() {\n  }\n\n  ngOnInit() {\n    this.updatePaginatior();\n  }\n\n\n  ngOnChanges(changes: SimpleChanges): void {\n    this.updatePaginatior();\n  }\n\n  public updatePaginatior(): void {\n    let start: number;\n    let end: number;\n    this.pagination = [];\n    if (this._lastPageIndex < 5) {\n      start = 1;\n      end = this._lastPageIndex;\n\n    } else {\n      if (this._currentPageIndex === 1 || this._currentPageIndex === 2) {\n        start = 1;\n        end = 5;\n      } else if (this._currentPageIndex === this._lastPageIndex || this._currentPageIndex === this._lastPageIndex - 1) {\n        start = this._lastPageIndex - 4;\n        end = this._lastPageIndex;\n      } else {\n        start = this._currentPageIndex - 2;\n        end = this._currentPageIndex + 2;\n      }\n    }\n    while (start <= end) {\n      if (start === this._currentPageIndex) {\n        this._pagination.push([[this._currentPageIndex], [true]]);\n      } else {\n        this._pagination.push([[start], [false]]);\n      }\n      start++;\n    }\n  }\n\n  public getFirstPage(): void {\n    this.onPageChange.emit(1);\n  }\n\n  public getLastPage(): void {\n    this.onPageChange.emit(this.lastPageIndex);\n  }\n\n  public getPage(pageIndex: number) {\n    this.onPageChange.emit(pageIndex);\n  }\n\n  public getPreviousPage(): void {\n    this.onPageChange.emit(this.currentPageIndex - 1);\n  }\n\n  public getNextPage(): void {\n    this.onPageChange.emit(this.currentPageIndex + 1);\n  }\n\n  get lastPageIndex() {\n    return this._lastPageIndex;\n  }\n\n  @Input()\n  set lastPageIndex(value) {\n    this._lastPageIndex = value;\n  }\n\n  get currentPageIndex() {\n    return this._currentPageIndex;\n  }\n\n  @Input()\n  set currentPageIndex(value) {\n    this._currentPageIndex = value;\n  }\n\n  get pagination() {\n    return this._pagination;\n  }\n\n  set pagination(value) {\n    this._pagination = value;\n  }\n}\n","import {AfterViewInit, Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, NavigationExtras, Router} from '@angular/router';\nimport {ComplexSearchResult} from '../shared/model/complex-results/complex-search.model';\nimport {ComplexPortalService} from '../shared/service/complex-portal.service';\nimport {ProgressBarComponent} from '../../shared/loading-indicators/progress-bar/progress-bar.component';\nimport {Title} from '@angular/platform-browser';\nimport {AnalyticsService} from '../../shared/google-analytics/service/analytics.service';\nimport {Interactor} from '../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-results',\n  templateUrl: './complex-results.component.html',\n  styleUrls: ['./complex-results.component.css'],\n})\nexport class ComplexResultsComponent implements OnInit, AfterViewInit {\n  LIST_VIEW = 'LIST_VIEW';\n  COMPLEX_NAVIGATOR_VIEW = 'COMPLEX_NAVIGATOR_VIEW';\n  private _query: string;\n  private _currentPageIndex: number;\n  private _complexSearch: ComplexSearchResult;\n  private _lastPageIndex: number;\n  private _pageSize = 15;\n  private _spicesFilter: string[];\n  private _bioRoleFilter: string[];\n  private _interactorTypeFilter: string[];\n  private _allInteractorsInComplexSearch: Interactor[] = [];\n  DisplayType: string = this.LIST_VIEW;\n  interactorsSorting: string;\n\n\n  constructor(private route: ActivatedRoute, private router: Router,\n              private complexPortalService: ComplexPortalService, private titleService: Title,\n              private googleAnalyticsService: AnalyticsService,\n  ) {\n  }\n\n  ngOnInit() {\n    this.titleService.setTitle('Complex Portal - Results');\n    this._allInteractorsInComplexSearch = [];\n    this.route\n      .queryParams\n      .subscribe(queryParams => {\n        this._query = queryParams['query'];\n        this._spicesFilter = queryParams['species'] ? queryParams['species'].split('+') : [];\n        this._bioRoleFilter = queryParams['bioRole'] ? queryParams['bioRole'].split('+') : [];\n        this._interactorTypeFilter = queryParams['interactorType'] ? queryParams['interactorType'].split('+') : [];\n        this._currentPageIndex = queryParams['page'] ? Number(queryParams['page']) : 1;\n        // TODO This is out for now, but CP-84 (JIRA )should fix that!!\n        // this.pageSize = queryParams['size'] ? Number(queryParams['size']) : 10;\n        this.requestComplexResults();\n        document.body.scrollTop = 0;\n      });\n  }\n\n  ngAfterViewInit(): void {\n  }\n\n  private requestComplexResults() {\n    this.complexPortalService.findComplex(this.query, this.spicesFilter, this.bioRoleFilter,\n      this.interactorTypeFilter, this.currentPageIndex, this.pageSize).subscribe(complexSearch => {\n      this.complexSearch = complexSearch;\n      this._allInteractorsInComplexSearch = [];\n      if (this.complexSearch.totalNumberOfResults !== 0) {\n        this.lastPageIndex = Math.ceil(complexSearch.totalNumberOfResults / this.pageSize);\n        for (let i = 0; i < complexSearch.elements.length; i++) {\n          for (const component of complexSearch.elements[i].interactors) {\n            if (!this._allInteractorsInComplexSearch.some(interactor => interactor.identifier === component.identifier)) {\n              this._allInteractorsInComplexSearch.push(\n                new Interactor(\n                  component.identifier,\n                  component.identifierLink,\n                  component.name,\n                  component.description,\n                  component.interactorType));\n            }\n          }\n        }\n      }\n      ProgressBarComponent.hide();\n    });\n  }\n\n  /**\n   * Prepare query params to build new URL after filter or pagination has changed\n   */\n  private reloadPage(): void {\n    const queryParams: NavigationExtras = {};\n    queryParams['query'] = this._query;\n    queryParams['page'] = this._currentPageIndex;\n    if (this._spicesFilter !== undefined && this._spicesFilter.length !== 0) {\n      queryParams['species'] = this.prepareFiltersForParams(this.spicesFilter);\n    }\n    if (this._bioRoleFilter !== undefined && this._bioRoleFilter.length !== 0) {\n      queryParams['bioRole'] = this.prepareFiltersForParams(this._bioRoleFilter);\n    }\n    if (this._interactorTypeFilter !== undefined && this._interactorTypeFilter.length !== 0) {\n      queryParams['interactorType'] = this.prepareFiltersForParams(this._interactorTypeFilter);\n    }\n    this.router.navigate([], {\n      queryParams\n    });\n    ProgressBarComponent.hide();\n    // This is a test case event for GA, to monitor if users ever use more then one filter.\n    const filterCount = this.getFilterCount();\n    if (1 < filterCount) {\n      this.googleAnalyticsService.fireMultiFilterEvent(filterCount.toString());\n    }\n  }\n\n  private prepareFiltersForParams(filter: string[]): string {\n    return filter.toString().replace(/,/g, '+');\n  }\n\n  private getFilterCount(): number {\n    return this._spicesFilter.length + this._interactorTypeFilter.length + this._bioRoleFilter.length;\n  }\n\n  /**\n   *\n   * @param pageIndex new page index after hitting the paginator to update the URL and reload content\n   */\n  public onPageChange(pageIndex: number): void {\n    this.currentPageIndex = pageIndex;\n    this.reloadPage();\n  }\n\n  public onResetAllFilters(): void {\n    this.spicesFilter = [];\n    this.bioRoleFilter = [];\n    this.interactorTypeFilter = [];\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onSpicesFilterChanged(filter: string[]): void {\n    this.spicesFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onBiologicalRoleFilterChanged(filter: string[]): void {\n    this.bioRoleFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  public onInteractorTypeFilterChanged(filter: string[]): void {\n    this.interactorTypeFilter = filter;\n    this.currentPageIndex = 1;\n    this.reloadPage();\n  }\n\n  get query(): string {\n    return this._query;\n  }\n\n  set query(value) {\n    this._query = value;\n  }\n\n  get currentPageIndex(): number {\n    return this._currentPageIndex;\n  }\n\n  set currentPageIndex(value: number) {\n    this._currentPageIndex = value;\n  }\n\n  get complexSearch(): ComplexSearchResult {\n    return this._complexSearch;\n  }\n\n  set complexSearch(value: ComplexSearchResult) {\n    this._complexSearch = value;\n  }\n\n  get lastPageIndex(): number {\n    return this._lastPageIndex;\n  }\n\n  set lastPageIndex(value: number) {\n    this._lastPageIndex = value;\n  }\n\n  get pageSize(): number {\n    return this._pageSize;\n  }\n\n  set pageSize(value: number) {\n    this._pageSize = value;\n  }\n\n  get spicesFilter(): string[] {\n    return this._spicesFilter;\n  }\n\n  set spicesFilter(value: string[]) {\n    this._spicesFilter = value;\n  }\n\n  get bioRoleFilter(): string[] {\n    return this._bioRoleFilter;\n  }\n\n  set bioRoleFilter(value: string[]) {\n    this._bioRoleFilter = value;\n  }\n\n  get interactorTypeFilter(): string[] {\n    return this._interactorTypeFilter;\n  }\n\n  set interactorTypeFilter(value: string[]) {\n    this._interactorTypeFilter = value;\n  }\n\n  public get allInteractorsInComplexSearch(): Interactor[] {\n    return this._allInteractorsInComplexSearch;\n  }\n\n  set allInteractorsInComplexSearch(value: Interactor[]) {\n    this._allInteractorsInComplexSearch = value;\n  }\n\n  setListView() {\n    this.DisplayType = this.LIST_VIEW;\n  }\n\n  setComplexNavigatorView() {\n    this.DisplayType = this.COMPLEX_NAVIGATOR_VIEW;\n  }\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {ComplexResultsComponent} from './complex-results.component';\nimport {RouterModule} from '@angular/router';\nimport {ComplexPaginatorComponent} from './complex-paginator/complex-paginator.component';\nimport {ComplexFilterComponent} from './complex-filter/complex-filter.component';\nimport {ComplexListComponent} from './complex-list/complex-list.component';\nimport {ProgressSpinnerModule} from '../../shared/loading-indicators/progress-spinner/progress-spinner.module';\nimport {ComplexNavigatorComponent} from './complex-navigator/complex-navigator.component';\nimport {TableStructureComponent} from './complex-navigator/table-structure/table-structure.component';\nimport {TableHeaderComponent} from './complex-navigator/table-structure/table-header/table-header.component';\nimport {\n  TableInteractorColumnComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-column.component';\nimport {\n  TableInteractorNameComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component';\nimport {\n  TableInteractorExternalLinkComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component';\nimport {\n  TableInteractorStoichiometryComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component';\nimport {\n  TableMainInteractorComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component';\nimport {\n  TableSubcomponentInteractorComponent\n} from './complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component';\nimport {ComplexNavigatorSortingComponent} from './complex-navigator-sorting/complex-navigator-sorting.component';\n\n\n@NgModule({\n  imports: [RouterModule.forChild([\n    {path: '', component: ComplexResultsComponent},\n  ]),\n    CommonModule,\n    ProgressSpinnerModule\n  ],\n  exports: [\n    TableStructureComponent\n  ],\n  declarations: [ComplexResultsComponent,\n    ComplexListComponent,\n    ComplexFilterComponent,\n    ComplexPaginatorComponent,\n    ComplexNavigatorComponent,\n    TableStructureComponent,\n    TableHeaderComponent,\n    TableInteractorColumnComponent,\n    TableInteractorNameComponent,\n    TableInteractorExternalLinkComponent,\n    TableInteractorStoichiometryComponent,\n    TableMainInteractorComponent,\n    TableSubcomponentInteractorComponent,\n    ComplexNavigatorSortingComponent,\n  ]\n})\nexport class ComplexResultsModule {\n}\n","export class Interactor {\n  private _identifier: string;\n  private _identifierLink: string;\n  private _name: string;\n  private _description: string;\n  private _interactorType: string;\n\n  constructor(identifier: string,\n              identifierLink: string,\n              name: string,\n              description: string,\n              interactorType: string) {\n    this._identifier = identifier;\n    this._identifierLink = identifierLink;\n    this._name = name;\n    this._description = description;\n    this._interactorType = interactorType;\n  }\n\n  get identifier(): string {\n    return this._identifier;\n  }\n\n  get identifierLink(): string {\n    return this._identifierLink;\n  }\n\n  get name(): string {\n    return this._name;\n  }\n\n  get description(): string {\n    return this._description;\n  }\n\n  get interactorType(): string {\n    return this._interactorType;\n  }\n\n}\n","export default \"<div class=\\\"filters row\\\">\\n  <div class=\\\"columns medium-6\\\"><h3>Filters</h3></div>\\n  <div class=\\\"columns medium-6\\\">\\n    <div *ngIf=\\\"anyFiltersSelected()\\\">\\n      <a class=\\\"button\\\" (click)=\\\"resetAllFilters()\\\"><i class=\\\"icon icon-functional\\\" data-icon=\\\"d\\\"></i> Reset filters</a>\\n    </div>\\n  </div>\\n  <div class=\\\"columns medium-12\\\">\\n    <div *ngIf=\\\"facets.species_f\\\">\\n      <b>Species</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.species_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, spicesFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeSpeciesFilter(filter.value, filter.checked)\\\"> {{ facet.name }} ({{ facet.count }})\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n    <div *ngIf=\\\"facets.pbiorole_f\\\">\\n      <b>Biological Role</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.pbiorole_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, bioRoleFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeBiologicalRoleFilter(filter.value, filter.checked)\\\"> {{ facet.name }}\\n              ({{ facet.count }})\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n\\n\\n    <div *ngIf=\\\"facets.ptype_f\\\">\\n      <b>Interactor Type</b>\\n      <ul class=\\\"no-bullet\\\">\\n        <li *ngFor=\\\"let facet of facets.ptype_f\\\">\\n          <div [ngSwitch]=\\\"isSelected(facet.name, interactorTypeFilter)\\\">\\n            <div *ngSwitchCase=\\\"true\\\">\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\" checked> {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ facetTypeIcon(facet) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n            <div *ngSwitchDefault>\\n              <input type=\\\"checkbox\\\" #filter value=\\\"{{facet.name}}\\\"\\n                     (change)=\\\"changeInteractorTypeFilter(filter.value, filter.checked)\\\"> {{ facet.name }}\\n              ({{ facet.count }})\\n              <i class=\\\"{{ facetTypeIcon(facet) }}\\\"\\n                 style=\\\"font-size: large;\\\"></i>\\n            </div>\\n          </div>\\n        </li>\\n      </ul>\\n    </div>\\n    <div *ngIf=\\\"!facets.species_f && !facets.pbiorole_f && !facets.ptype_f\\\">\\n      <h6>No filters available</h6>\\n    </div>\\n  </div>\\n</div>\\n\";","export default \"<ul class=\\\"no-bullet\\\">\\n  <li *ngFor=\\\"let complex of complexSearch.elements\\\">\\n    <h3><a [routerLink]=\\\"['/complex', complex.complexAC]\\\">{{ complex.complexName }}</a></h3>\\n    <div class=\\\"description\\\" style=\\\"background-color: white\\\">\\n      <b>Complex AC:</b> {{ complex.complexAC }} / <b>Organism:</b> ({{ complex.organismName }})<br>\\n      <b>Description:</b>\\n      <div *ngIf=\\\"complex.description.length <= 250\\\">\\n        {{ complex.description }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n      <div *ngIf=\\\"complex.description.length > 250\\\">\\n        {{ complex.description.substr(0, 250) }}<a [routerLink]=\\\"['/complex', complex.complexAC]\\\">...</a>\\n      </div>\\n    </div>\\n  </li>\\n</ul>\\n\";","export default \"<div class=\\\"sortingInteractors\\\">\\n  <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Sort interactors\\\" class=\\\"button\\\">\\n  <div class=\\\"typeOfSorting\\\">\\n    <input type=\\\"submit\\\" name=\\\"appearanceClassification\\\" value=\\\"Occurrence\\\" class=\\\"button\\\"\\n           (click)=\\\"setInteractorsSorting('Occurrence')\\\">\\n    <input type=\\\"submit\\\" name=\\\"typeClassification\\\" value=\\\"Type\\\" class=\\\"button\\\"\\n           (click)=\\\"setInteractorsSorting('Type')\\\">\\n    <input type=\\\"submit\\\" name=\\\"organismClassification\\\" value=\\\"Organism\\\" class=\\\"button\\\"\\n           (click)=\\\"setInteractorsSorting('Organism')\\\">\\n    <input type=\\\"submit\\\" name=\\\"geneClassification\\\" value=\\\"Orthology (Not available yet)\\\" class=\\\"button\\\"\\n           (click)=\\\"setInteractorsSorting('Orthology')\\\">\\n  </div>\\n</div>\\n\";","export default \"<div class=\\\"ComplexNavigator\\\">\\n  <cp-complex-navigator-sorting\\n    [(interactorsSorting)]=\\\"interactorsSorting\\\">\\n  </cp-complex-navigator-sorting>\\n  <cp-table-structure [complexSearch]=\\\"complexSearch\\\"\\n                      [interactors]=\\\"interactors\\\"\\n                      [interactorsSorting]=\\\"interactorsSorting\\\">\\n  </cp-table-structure>\\n</div>\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"table CN-table\\\">\\n    <!-- When table is not overflowing -->\\n    <thead class=\\\"tableHead\\\" *ngIf=\\\"complexSearch.elements.length<=6\\\">\\n    <tr>\\n      <!--      <td class=\\\"filler\\\" *ngIf=\\\"!isInteractorSortingSet()\\\"></td>-->\\n      <th class=\\\"interactorsHeader horizontal\\\">Interactors\\n      </th>\\n      <th class=\\\"horizontal\\\" *ngFor=\\\"let complex of complexSearch.elements\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           title=\\\"{{complex.complexAC}}\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n              <div class=\\\"line\\\"></div>\\n                <div class=\\\"horizontal-label\\\">\\n                  <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                  {{ complex.complexName }}\\n                </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n    </tr>\\n    </thead>\\n    <!-- When table is overflowing -->\\n    <thead class=\\\"tableHeadOverflow\\\" *ngIf=\\\"complexSearch.elements.length>6\\\">\\n    <tr [style.--cols]=\\\"complexSearch.elements.length\\\">\\n      <th class=\\\"interactorsHeader\\\">Interactors</th>\\n      <th class=\\\"rotate\\\" *ngFor=\\\"let complex of complexSearch.elements\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           title=\\\"{{complex.complexAC}}\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span title=\\\"{{ complex.complexName }} - {{ complex.complexAC}}\\\">\\n              <div class=\\\"tilted-label\\\">\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                {{ complex.complexName }}\\n              </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n      <div class=\\\"spaceHolder\\\"></div>\\n    </tr>\\n    </thead>\\n  </table>\\n</div>\\n\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"interactors-table\\\">\\n    <!-- Interactors' column -->\\n    <ng-container *ngFor=\\\" let interactor of enrichedInteractors; let i=index\\\">\\n      <tr *ngIf=\\\"!interactor.hidden\\\">\\n        <ng-container *ngFor=\\\"let oneType of ranges\\\" class=\\\"interactorsOrdering\\\">\\n          <td *ngIf=\\\"oneType[2]===i\\\" [attr.rowspan]=\\\"oneType[1]\\\" class=\\\"interactorSeparation\\\"\\n              title=\\\"{{oneType[0]}}\\\">\\n            <div class=\\\"interactorNameContainer\\\" [style.--rowspanSize]=\\\"oneType[1]\\\">\\n              {{ oneType[0] }}\\n            </div>\\n          </td>\\n        </ng-container>\\n        <td class=\\\"interactorsColumn\\\">\\n          <cp-table-interactor-name\\n            [interactorName]=\\\"interactor.interactor.name\\\"\\n            [interactorType]=\\\"interactor.interactor.interactorType\\\"\\n            [interactorId]=\\\"interactor.interactor.identifier\\\"\\n          ></cp-table-interactor-name>\\n          <!-- Icon for the expandable -->\\n          <div class=\\\"container\\\" *ngIf=\\\"interactor.isSubComplex\\\">\\n            <a title=\\\"{{ interactor.interactor.name }} interactors\\\" (click)=\\\"toggleSubcomplexExpandable(i)\\\">\\n              {{ interactor.interactor.identifier }}\\n              <i class=\\\"icon icon-common\\\" data-icon=\\\"&#xf078;\\\"\\n                 style=\\\"font-size:small; margin-top: 2px\\\"></i>\\n            </a>\\n          </div>\\n          <cp-table-interactor-external-link\\n            [interactorId]=\\\"interactor.interactor.identifier\\\"\\n            [interactorType]=\\\"interactor.interactor.interactorType\\\"\\n            [identifierLink]=\\\"interactor.interactor.identifierLink\\\"\\n          ></cp-table-interactor-external-link>\\n        </td>\\n        <!-- Interactors' stoichiometry -->\\n        <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n          <td class=\\\"intStoich\\\">\\n            <cp-table-main-interactor\\n              [complex]=\\\"complex\\\"\\n              [i]=\\\"i\\\"\\n              [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n            ></cp-table-main-interactor>\\n          </td>\\n        </ng-container>\\n        <div class=\\\"spaceHolder\\\" *ngIf=\\\"complexSearch.elements.length>6\\\"></div>\\n      </tr>\\n      <!-- Expandable menu for subcomplexes -->\\n      <ng-container *ngIf=\\\"interactor.expanded\\\">\\n        <ng-container *ngIf=\\\"!!interactor.subComponents\\\">\\n          <tr *ngFor=\\\"let el of interactor.subComponents; let j=index\\\"\\n              class=\\\"expandedRows\\\"\\n              [ngClass]=\\\"{'firstExpandedRow': j === 0, 'lastExpandedRow': j === interactor.subComponents.length - 1}\\\">\\n            <td [attr.rowspan]=\\\"interactor.subComponents.length\\\" class=\\\"interactorSeparation\\\"\\n                title=\\\"{{interactor.interactor.name}}'s interactors\\\"\\n                *ngIf=\\\"j === 0 && (interactorsSorting === 'Type' || interactorsSorting === 'Organism')\\\">\\n              <div class=\\\"interactorSeparationName\\\"> {{ interactor.interactor.name }} interactors</div>\\n            </td>\\n            <td class=\\\"subComponentColumn\\\">\\n              <div>\\n                <cp-table-interactor-name\\n                  [interactorName]=\\\"el.name\\\"\\n                  [interactorType]=\\\"el.interactorType\\\"\\n                  [interactorId]=\\\"el.identifier\\\"\\n                ></cp-table-interactor-name>\\n              </div>\\n              <cp-table-interactor-external-link\\n                [interactorId]=\\\"el.identifier\\\"\\n                [interactorType]=\\\"el.interactorType\\\"\\n                [identifierLink]=\\\"el.identifierLink\\\"\\n              ></cp-table-interactor-external-link>\\n            </td>\\n            <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n              <td class=\\\"intStoich\\\">\\n                <cp-table-subcomponent-interactor\\n                  [complex]=\\\"complex\\\"\\n                  [i]=\\\"i\\\"\\n                  [j]=\\\"j\\\"\\n                  [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n                ></cp-table-subcomponent-interactor>\\n              </td>\\n            </ng-container>\\n            <div class=\\\"spaceHolder\\\" *ngIf=\\\"complexSearch.elements.length>6\\\"></div>\\n          </tr>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n  </table>\\n</div>\\n\";","export default \"<div class=\\\"externalLinkContainer\\\" *ngIf=\\\"showExternalLink()\\\">\\n  <a href=\\\"{{identifierLink}}\\\"\\n     target=\\\"_blank\\\">{{ interactorId }}\\n    <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\" title=\\\"More information\\\"></i>\\n  </a>\\n</div>\\n\";","export default \"<div>\\n  {{ interactorName }}\\n  <i class=\\\"{{interactorTypeIcon}}\\\"\\n     title=\\\"{{interactorType}}\\\"></i>\\n  <!-- Adding of the icons to access details of the interactor -->\\n  <a [routerLink]=\\\"['/complex/search']\\\"\\n     [queryParams]=\\\"{query: interactorId, page: 1}\\\"\\n     target=\\\"_blank\\\">\\n    <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n       title=\\\"Complexes containing this interactor\\\"></i>\\n  </a>\\n</div>\\n\";","export default \"<ng-container>\\n  <div class=\\\"stoichNum\\\" title=\\\"{{ stoichiometryText }}\\\">\\n    {{ stoichiometryValue }}\\n  </div>\\n</ng-container>\\n\";","export default \"<div [ngClass]=\\\"displayTopLineClass(complex, i)\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!findInteractorInComplex(complex.complex, interactor.interactor.identifier)\\\"\\n  [stoichiometryText]=\\\"getStoichiometry(complex.complex, interactor.interactor.identifier)\\\"\\n  [stoichiometryValue]=\\\"stoichiometryOfInteractors(complex.complex, interactor.interactor.identifier)\\\"\\n></cp-table-interactor-stoichiometry>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"findInteractorsInSubComplex(complex.complex, interactor.interactor.identifier).length > 0\\\"\\n  [stoichiometryText]=\\\"getStoichiometrySubComplex(complex.complex, interactor.interactor.identifier)\\\"\\n  [stoichiometryValue]=\\\"stoichiometryOfInteractorsMainTable(complex.complex, interactor.interactor.identifier)\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"displayBottomLineClass(complex, i)\\\"></div>\\n\";","export default \"<div [ngClass]=\\\"displayTopLineClassExpanded(complex, i, j)\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!findInteractorInComplex(complex.complex, el.identifier)\\\"\\n  [stoichiometryText]=\\\"getStoichiometry(complex.complex, el.identifier)\\\"\\n  [stoichiometryValue]=\\\"stoichiometryOfInteractors(complex.complex, el.identifier)\\\"\\n></cp-table-interactor-stoichiometry>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!findInteractorInExpandedSubComplex(interactor, complex.complex, el.identifier)\\\"\\n  [stoichiometryText]=\\\"getStoichiometryInExpandedSubComplex(interactor, el.identifier)\\\"\\n  [stoichiometryValue]=\\\"stoichiometryOfInteractorsExpandable(interactor, el.identifier)\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"displayBottomLineClassExpanded(complex, i, j)\\\"></div>\\n\";","export default \"<div class=\\\"complexNavigatorTable\\\">\\n  <div class=\\\"header\\\"\\n       (scroll)=\\\"body.scrollLeft = header.scrollLeft\\\" #header>\\n\\n    <cp-table-header [complexSearch]=\\\"complexSearch\\\">\\n    </cp-table-header>\\n  </div>\\n  <div class=\\\"interactors\\\"\\n       (scroll)=\\\"header.scrollLeft = body.scrollLeft\\\" #body>\\n    <cp-table-interactor-column\\n      [complexSearch]=\\\"complexSearch\\\"\\n      [interactors]=\\\"interactors\\\"\\n      [interactorsSorting]=\\\"interactorsSorting\\\">\\n    </cp-table-interactor-column>\\n  </div>\\n  <div class=\\\"spaceHolder\\\"></div>\\n</div>\\n\\n\";","export default \"<div>\\n  <h5 class=\\\"text-center\\\">{{currentPageIndex}} of {{lastPageIndex}}</h5>\\n  <ul class=\\\"pagination text-center\\\" role=\\\"navigation\\\" aria-label=\\\"Pagination\\\">\\n    <li class=\\\"arrow unavailable\\\" *ngIf=\\\"currentPageIndex != 1\\\" aria-disabled=\\\"true\\\"><a\\n      (click)=\\\"getPreviousPage()\\\">&laquo; Previous</a></li>\\n    <ng-container *ngFor=\\\"let index of pagination\\\">\\n      <li *ngIf=\\\"index[1] == 'true'\\\" class=\\\"current\\\"><span class=\\\"show-for-sr\\\">You're on page</span>{{index[0]}}</li>\\n      <li *ngIf=\\\"index[1] == 'false'\\\"><a (click)=\\\"getPage(index[0])\\\">{{index[0]}}</a></li>\\n    </ng-container>\\n    <li class=\\\"arrow\\\" *ngIf=\\\"currentPageIndex != lastPageIndex\\\"><a (click)=\\\"getNextPage()\\\">Next &raquo;</a></li>\\n  </ul>\\n</div>\\n\";","export default \"<div class=\\\"margin-top-large margin-bottom-large row\\\">\\n  <ng-container *ngIf=\\\"complexSearch;else loadingSpinner\\\">\\n    <div class=\\\"columns medium-12\\\" *ngIf=\\\"complexSearch.totalNumberOfResults !== 0\\\">\\n      <h2 class=\\\"padding-left-large\\\">Total number of results: {{ complexSearch.totalNumberOfResults }} </h2>\\n      <div class=\\\"row\\\">\\n        <div class=\\\"displayButton columns medium-8\\\" style=\\\"text-align: center\\\">\\n          <input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"View list\\\" class=\\\"button view-button\\\"\\n                 (click)=\\\"setListView()\\\" [ngClass]=\\\"{'selected': DisplayType === LIST_VIEW}\\\">\\n          <input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"View Complex Navigator\\\" class=\\\"button view-button\\\"\\n                 (click)=\\\"setComplexNavigatorView()\\\" [ngClass]=\\\"{'selected': DisplayType === COMPLEX_NAVIGATOR_VIEW}\\\">\\n        </div>\\n      </div>\\n      <div class=\\\"columns medium-4\\\">\\n        <cp-complex-filter *ngIf=\\\"spicesFilter && bioRoleFilter && interactorTypeFilter\\\"\\n                           [spicesFilter]=\\\"spicesFilter\\\"\\n                           [bioRoleFilter]=\\\"bioRoleFilter\\\"\\n                           [interactorTypeFilter]=\\\"interactorTypeFilter\\\" [facets]=\\\"complexSearch.facets\\\"\\n                           (onResetAllFilters)=\\\"onResetAllFilters()\\\"\\n                           (onSpicesFilterChanged)=\\\"onSpicesFilterChanged($event)\\\"\\n                           (onBiologicalRoleFilterChanged)=\\\"onBiologicalRoleFilterChanged($event)\\\"\\n                           (onInteractorTypeFilterChanged)=\\\"onInteractorTypeFilterChanged($event)\\\">\\n        </cp-complex-filter>\\n      </div>\\n      <div class=\\\"columns medium-8\\\">\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n        <cp-complex-list class=\\\"listOfResults\\\" *ngIf=\\\"DisplayType===LIST_VIEW\\\"\\n                         [complexSearch]=\\\"complexSearch\\\">\\n        </cp-complex-list>\\n        <cp-complex-navigator class=\\\"Complex-navigator\\\" *ngIf=\\\"DisplayType===COMPLEX_NAVIGATOR_VIEW\\\"\\n                              [complexSearch]=\\\"complexSearch\\\"\\n                              [interactors]=\\\"allInteractorsInComplexSearch\\\">\\n        </cp-complex-navigator>\\n        <cp-complex-paginator [currentPageIndex]=\\\"currentPageIndex\\\"\\n                              [lastPageIndex]=\\\"lastPageIndex\\\"\\n                              (onPageChange)=\\\"onPageChange($event)\\\"></cp-complex-paginator>\\n      </div>\\n    </div>\\n\\n    <div class=\\\"columns medium-12 callout alert\\\" *ngIf=\\\"complexSearch.totalNumberOfResults === 0\\\">\\n      <h2>No Complex Portal results found</h2>\\n      <h3>We're sorry but we couldn't find anything that matched your search for: <b>{{ query }}</b></h3>\\n      <h4>Please consider refining your terms:</h4>\\n      <ul>\\n        <li>Make sure all words are spelled correctly</li>\\n        <li>Try different keywords</li>\\n        <li>Be more precise: use gene or protein IDs, e.g. Ndc80 or Q04571</li>\\n        <li>Remove quotes around phrases to search for each word individually. bike shed will often show more results\\n          than\\n          \\\"bike shed\\\"\\n        </li>\\n      </ul>\\n    </div>\\n  </ng-container>\\n  <ng-template #loadingSpinner>\\n    <cp-progress-spinner [query]=\\\"query\\\"></cp-progress-spinner>\\n  </ng-template>\\n</div>\\n\";"]}