{"version":3,"file":"default-src_app_complex_complex-results_complex-navigator_complex-navigator_module_ts-es2015.js","mappings":"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","sources":["./src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.ts","./src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.ts","./src/app/complex/complex-results/complex-navigator/complex-navigator.component.ts","./src/app/complex/complex-results/complex-navigator/complex-navigator.module.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/complex-navigator-utils.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.ts","./src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.ts","./src/app/complex/complex-results/complex-navigator-buttons/complex-navigator-buttons.component.html","./src/app/complex/complex-results/complex-navigator/complex-list-display-buttons/complex-list-display-buttons.component.html","./src/app/complex/complex-results/complex-navigator/complex-navigator.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-header/table-header.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-column.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component.html","./src/app/complex/complex-results/complex-navigator/table-structure/table-structure.component.html"],"sourcesContent":["import {Component, EventEmitter, Input, Output, OnInit} from '@angular/core';\n\n@Component({\n  selector: 'cp-complex-navigator-buttons',\n  templateUrl: './complex-navigator-buttons.component.html',\n  styleUrls: ['./complex-navigator-buttons.component.css']\n})\nexport class ComplexNavigatorButtonsComponent implements OnInit {\n  @Output() interactorsSortingChange = new EventEmitter<string>();\n  @Output() organismIconDisplayChange = new EventEmitter<boolean>();\n  @Output() interactorTypeDisplayChange = new EventEmitter<boolean>();\n  @Output() IDDisplayChange = new EventEmitter<boolean>();\n\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  typeOfDisplay: string;\n\n  ngOnInit() {\n    this.updateDisplay();\n  }\n\n  interactorsSortingChanges(typeOfSorting: string) {\n    this.interactorsSortingChange.emit(typeOfSorting);\n    if (this.typeOfDisplay === 'detailed') {\n      if (typeOfSorting === 'Type') {\n        this.interactorTypeDisplay = false;\n        this.organismIconDisplay = true;\n      } else if (typeOfSorting === 'Organism') {\n        this.organismIconDisplay = false;\n        this.interactorTypeDisplay = true;\n      }\n      this.updateDisplay();\n    }\n  }\n\n  DisplayingOrganism() {\n    this.organismIconDisplay = !this.organismIconDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingType() {\n    this.interactorTypeDisplay = !this.interactorTypeDisplay;\n    this.updateDisplay();\n  }\n\n  DisplayingID() {\n    this.IDDisplay = !this.IDDisplay;\n    this.updateDisplay();\n  }\n\n  setDisplayType(type: string) {\n    if (type === 'compact') {\n      this.compactDisplay();\n    } else if (type === 'detailed') {\n      this.detailedDisplay();\n    }\n  }\n\n  compactDisplay() {\n    this.organismIconDisplay = false;\n    this.interactorTypeDisplay = false;\n    this.IDDisplay = false;\n    this.typeOfDisplay = 'compact';\n    this.changesEmitter();\n  }\n\n  detailedDisplay() {\n    this.organismIconDisplay = true;\n    this.interactorTypeDisplay = true;\n    this.IDDisplay = true;\n    this.typeOfDisplay = 'detailed';\n    this.changesEmitter();\n  }\n\n  updateDisplay() {\n    if (this.organismIconDisplay || this.interactorTypeDisplay || this.IDDisplay) {\n      this.typeOfDisplay = 'detailed';\n    } else {\n      this.typeOfDisplay = 'compact';\n    }\n    this.changesEmitter();\n  }\n\n  changesEmitter() {\n    this.organismIconDisplayChange.emit(this.organismIconDisplay);\n    this.interactorTypeDisplayChange.emit(this.interactorTypeDisplay);\n    this.IDDisplayChange.emit(this.IDDisplay);\n  }\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\n\nexport const LIST_VIEW = 'view_list';\nexport const COMPLEX_NAVIGATOR_VIEW = 'view_complex_navigator';\n\n@Component({\n  selector: 'cp-complex-list-display-buttons',\n  templateUrl: './complex-list-display-buttons.component.html',\n  styleUrls: ['./complex-list-display-buttons.component.css']\n})\nexport class ComplexListDisplayButtonsComponent {\n\n  @Input() displayType: string;\n  @Output() displayTypeChange = new EventEmitter<string>();\n\n  setListView() {\n    this.displayType = LIST_VIEW;\n    this.displayTypeChange.emit(this.displayType);\n  }\n\n  setComplexNavigatorView() {\n    this.displayType = COMPLEX_NAVIGATOR_VIEW;\n    this.displayTypeChange.emit(this.displayType);\n  }\n\n  isDisplayComplexNavigatorView(): boolean {\n    return this.displayType === COMPLEX_NAVIGATOR_VIEW;\n  }\n\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {ComplexSearchResult} from '../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../shared/model/complex-results/interactor.model';\n\n@Component({\n  selector: 'cp-complex-navigator',\n  templateUrl: './complex-navigator.component.html',\n  styleUrls: ['./complex-navigator.component.css']\n})\n\nexport class ComplexNavigatorComponent {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  interactorsSorting = 'Occurrence';\n  organismIconDisplay = true;\n  interactorTypeDisplay = true;\n  IDDisplay = true;\n}\n","import {NgModule} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MarkdownModule} from 'ngx-markdown';\nimport {ComplexNavigatorComponent} from './complex-navigator.component';\nimport {TableStructureComponent} from './table-structure/table-structure.component';\nimport {TableHeaderComponent} from './table-structure/table-header/table-header.component';\nimport {TableInteractorColumnComponent} from './table-structure/table-interactor-column/table-interactor-column.component';\nimport {\n  TableInteractorNameComponent\n} from './table-structure/table-interactor-column/table-interactor-name/table-interactor-name.component';\nimport {\n  TableInteractorExternalLinkComponent\n} from './table-structure/table-interactor-column/table-interactor-external-link/table-interactor-external-link.component';\nimport {\n  TableInteractorStoichiometryComponent\n} from './table-structure/table-interactor-column/table-interactor-stoichiometry/table-interactor-stoichiometry.component';\nimport {\n  TableMainInteractorComponent\n} from './table-structure/table-interactor-column/table-main-interactor/table-main-interactor.component';\nimport {\n  TableSubcomponentInteractorComponent\n} from './table-structure/table-interactor-column/table-subcomponent-interactor/table-subcomponent-interactor.component';\nimport {ComplexNavigatorButtonsComponent} from '../complex-navigator-buttons/complex-navigator-buttons.component';\nimport {ProgressSpinnerModule} from '../../../shared/loading-indicators/progress-spinner/progress-spinner.module';\nimport {RouterModule} from '@angular/router';\nimport {ComplexListDisplayButtonsComponent} from './complex-list-display-buttons/complex-list-display-buttons.component';\nimport {MatTooltipModule} from '@angular/material/tooltip';\n\n@NgModule({\n  imports: [\n    RouterModule,\n    CommonModule,\n    ProgressSpinnerModule,\n    MarkdownModule,\n    MatTooltipModule\n  ],\n  exports: [\n    ComplexNavigatorComponent,\n    ComplexListDisplayButtonsComponent\n  ],\n  declarations: [\n    ComplexNavigatorComponent,\n    TableStructureComponent,\n    TableHeaderComponent,\n    TableInteractorColumnComponent,\n    TableInteractorNameComponent,\n    TableInteractorExternalLinkComponent,\n    TableInteractorStoichiometryComponent,\n    TableMainInteractorComponent,\n    TableSubcomponentInteractorComponent,\n    ComplexNavigatorButtonsComponent,\n    ComplexListDisplayButtonsComponent\n  ]\n})\nexport class ComplexNavigatorModule {\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\nimport {organismIcon} from '../../../../complex-portal-utils';\nimport {BasketService} from '../../../../../shared/basket/service/basket.service';\n\n@Component({\n  selector: 'cp-table-header',\n  templateUrl: './table-header.component.html',\n  styleUrls: ['./table-header.component.css'],\n})\n\nexport class TableHeaderComponent {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private basketService: BasketService) {\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  iconOrganism(organismName: string) {\n    return organismIcon(organismName);\n  }\n\n  toggleBasket(complex: Element) {\n    if (this.isInBasket(complex.complexAC)) {\n      this.removeComplex(complex.complexAC);\n    } else {\n      this.saveComplex(complex);\n    }\n  }\n\n  saveComplex(complex: Element) {\n    this.basketService.saveInBasket(complex);\n  }\n\n  removeComplex(complexAC: string): void {\n    this.basketService.deleteFromBasket(complexAC);\n    this.onComplexRemovedFromBasket.emit(complexAC);\n  }\n\n  isInBasket(complexAC: string): boolean {\n    return this.basketService.isInBasket(complexAC);\n  }\n}\n","import {Element} from '../../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedInteractor} from './table-interactor-column.component';\n\n\nexport class ComponentWithStoichiometry {\n  identifier: string;\n  stochiometryValue: [number, number];\n  stochiometryText?: string;\n  stochiometryValueFormatted?: string;\n}\n\nexport function findInteractorInComplex(complex: Element,\n                                        interactorId: string,\n                                        enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const interactor = findInteractorInComplexComponents(complex.interactors, interactorId, enrichedInteractors);\n  if (!!interactor) {\n    return {\n      identifier: interactor.identifier,\n      stochiometryValue: interactor.stochiometryValue,\n      stochiometryText: getStoichiometryText(interactor.stochiometryValue),\n      stochiometryValueFormatted: formatStoichiometryValues(interactor.stochiometryValue)\n    };\n  }\n  return null;\n}\n\n// Private functions\n\nfunction findInteractorInComplexComponents(complexComponents: ComplexComponent[],\n                                           interactorId: string,\n                                           enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  // We look for the interactor in the complex, as one of the components, or as part of any subcomplex of the complex, recursively.\n  // Even if we find a match for the interactor as one of the complex components, we keep looking at other components, as the interactor\n  // could also be part of a subcomplex, so the stoichiometry would need to be added for all matches.\n\n  let interactorFound = false;\n  let stoichiometry: [number, number] = null;\n\n  // We iterate through all the components of the complex to find matches\n  for (const complexComponent of complexComponents) {\n    const interactorMatch = findInteractorInComplexComponent(complexComponent, interactorId, enrichedInteractors);\n    if (!!interactorMatch) {\n      // We found a match for the interactor, on this component, or on a subcomponent of it in the case of a subcomplex\n      interactorFound = true;\n      // If we have any stoichiometry for the component, we add it to the total stoichiometry\n      if (!!interactorMatch.stochiometryValue) {\n        if (!!stoichiometry) {\n          stoichiometry = [\n            stoichiometry[0] + interactorMatch.stochiometryValue[0],\n            stoichiometry[1] + interactorMatch.stochiometryValue[1]\n          ];\n        } else {\n          stoichiometry = [\n            interactorMatch.stochiometryValue[0],\n            interactorMatch.stochiometryValue[1]\n          ];\n        }\n      }\n    }\n  }\n\n  // If we have found the interactor as part of one of the complex components, or part of a subcomplex, we return it\n  if (interactorFound) {\n    return {\n      identifier: interactorId,\n      stochiometryValue: stoichiometry\n    };\n  }\n\n  return null;\n}\n\nfunction findInteractorInComplexComponent(complexComponent: ComplexComponent,\n                                          interactorId: string,\n                                          enrichedInteractors: EnrichedInteractor[]): ComponentWithStoichiometry {\n\n  const componentStoichiometry = parseStoichiometryValues(complexComponent.stochiometry);\n\n  if (complexComponent.identifier === interactorId) {\n    // The interactor is the complex component we are currently checking\n    return {\n      identifier: interactorId,\n      stochiometryValue: componentStoichiometry\n    };\n  }\n\n  if (complexComponent.interactorType === 'stable complex') {\n    // If the id does not match, and the component is a subcomplex, then we can look for the interactor in the subcomplex components\n    const complexComponentInteractor = enrichedInteractors.find(interactor =>\n      interactor.interactor.identifier === complexComponent.identifier);\n\n    if (!!complexComponentInteractor && !!complexComponentInteractor.subComponents) {\n      const subComponentsMatch = findInteractorInComplexComponents(\n        complexComponentInteractor.subComponents, interactorId, enrichedInteractors);\n\n      if (!!subComponentsMatch) {\n        // We have found the interactor in the subcomplex\n        if (!!subComponentsMatch.stochiometryValue) {\n          if (!!componentStoichiometry) {\n            // If we have stoichiometry for both the component and the subcomponent, we add both\n            return {\n              identifier: interactorId,\n              stochiometryValue: [\n                componentStoichiometry[0] * subComponentsMatch.stochiometryValue[0],\n                componentStoichiometry[1] * subComponentsMatch.stochiometryValue[1]\n              ]\n            };\n          } else {\n            // If we only have stoichiometry for the subcomponent, we use that stoichiometry\n            return {\n              identifier: interactorId,\n              stochiometryValue: subComponentsMatch.stochiometryValue\n            };\n          }\n        } else {\n          // If we only have stoichiometry for the component, we use that stoichiometry\n          return {\n            identifier: interactorId,\n            stochiometryValue: componentStoichiometry\n          };\n        }\n      }\n    }\n  }\n\n  return null;\n}\n\nfunction fetchValuesFromStoichiometry(stoichiometry: string) {\n  const pattern = 'minValue: ([0-9+]), maxValue: ([0-9+])';\n  return stoichiometry.match(pattern);\n}\n\nfunction parseStoichiometryValues(stoichiometry: string): [number, number] {\n  if (!!stoichiometry) {\n    const matchedStoichiometry = fetchValuesFromStoichiometry(stoichiometry);\n    if (!!matchedStoichiometry) {\n      const minValue = parseInt(matchedStoichiometry[1], 10);\n      const maxValue = parseInt(matchedStoichiometry[2], 10);\n      if (!isNaN(minValue) && !isNaN(maxValue)) {\n        return [minValue, maxValue];\n      }\n    }\n  }\n  return null;\n}\n\nfunction formatStoichiometryValues(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n    const minValue = stoichiometry[0];\n    const maxValue = stoichiometry[1];\n    if (minValue === maxValue) {\n      return minValue.toString();\n    } else {\n      return `${minValue}-${maxValue}`;\n    }\n  }\n  return ' '; // sometimes we don't have the stoichiometry value\n}\n\nfunction getStoichiometryText(stoichiometry: [number, number]): string {\n  if (!!stoichiometry) {\n    return 'Stoichiometry values: minValue: ' + stoichiometry[0] + ', maxValue: ' + stoichiometry[1];\n  } else {\n    return 'No stoichiometry data available'; // sometimes we don't have the stoichiometry value\n  }\n}\n","import {Component, Input, OnChanges, SimpleChanges} from '@angular/core';\nimport {Interactor} from '../../../../shared/model/complex-results/interactor.model';\nimport {ComplexComponent} from '../../../../shared/model/complex-results/complex-component.model';\nimport {Observable} from 'rxjs/Observable';\nimport {of} from 'rxjs';\nimport {ComplexPortalService} from '../../../../shared/service/complex-portal.service';\nimport {map} from 'rxjs/operators';\nimport {findInteractorInComplex} from './complex-navigator-utils';\nimport {Element} from '../../../../shared/model/complex-results/element.model';\n\n\nexport class EnrichedInteractor {\n  interactor: Interactor;\n  hidden: boolean;\n  isSubComplex: boolean;\n  expanded: boolean;\n  subComponents: ComplexComponent[];\n  partOfComplex: number[];\n  timesAppearing: number;\n}\n\nexport class EnrichedComplex {\n  complex: Element;\n  startInteractorIndex: number;\n  endInteractorIndex: number;\n  startSubComponentIndex: number;\n  endSubComponentIndex: number;\n  startInteractorIncludedWhenExpanded: boolean;\n}\n\n@Component({\n  selector: 'cp-table-interactor-column',\n  templateUrl: './table-interactor-column.component.html',\n  styleUrls: ['./table-interactor-column.component.css']\n})\nexport class TableInteractorColumnComponent implements OnChanges {\n  @Input() complexes: Element[];\n  @Input() interactorsSorting: string;\n  @Input() interactors: Interactor[];\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n\n  enrichedInteractors: EnrichedInteractor[];\n  enrichedComplexes: EnrichedComplex[];\n  ranges: number[];\n\n  _timesAppearingByType: Map<string, number>;\n  _timesAppearingByOrganism: Map<string, number>;\n\n  constructor(private complexPortalService: ComplexPortalService) {\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (!!changes['interactors']) {\n      this.enrichInteractors();\n      this.calculateTimesAppearing();\n    }\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n  }\n\n  private classifyInteractors(): void {\n    if (!!this.interactorsSorting && !!this.enrichedInteractors && this.enrichedInteractors.length > 0) {\n      if (this.interactorsSorting === 'Type') {\n        this.classifyInteractorsByType();\n      } else if (this.interactorsSorting === 'Organism') {\n        this.classifyInteractorsByOrganism();\n      } else {\n        this.classifyInteractorsByOccurrence();\n      }\n    }\n  }\n\n  private enrichInteractors() {\n    this.enrichedInteractors = [];\n    for (const interactor of this.interactors) {\n      const isSubComplex = interactor.interactorType === 'stable complex';\n      const newEnrichedInteractor: EnrichedInteractor = {\n        interactor,\n        hidden: false,\n        isSubComplex,\n        expanded: false,\n        subComponents: null,\n        partOfComplex: [],\n        timesAppearing: 0,\n      };\n      if (isSubComplex) {\n        this.loadSubInteractors(newEnrichedInteractor).subscribe(subComponents => newEnrichedInteractor.subComponents = subComponents);\n      }\n      this.enrichedInteractors.push(newEnrichedInteractor);\n    }\n  }\n\n  toggleSubcomplexExpandable(i: number): void {\n    this.enrichedInteractors[i].expanded = !this.enrichedInteractors[i].expanded;\n\n    if (this.enrichedInteractors[i].expanded) {\n      // EnrichedInteractor has been expanded, we need to:\n\n      // 1. Collapse the other ones, in case there is any other expanded\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        if (i !== j) {\n          this.enrichedInteractors[j].expanded = false;\n        }\n      }\n\n      // 2. Hide any interactor now displayed in the expanded section\n      if (!!this.enrichedInteractors[i].subComponents) {\n        const subInteractorIds: string[] = this.enrichedInteractors[i].subComponents.map(component => component.identifier);\n        for (let j = 0; j < this.enrichedInteractors.length; j++) {\n          if (i !== j) {\n            this.enrichedInteractors[j].hidden = !!subInteractorIds.includes(this.enrichedInteractors[j].interactor.identifier);\n          }\n        }\n      }\n    } else {\n      // EnrichedInteractor has been collapsed, we need to:\n      // 1. Display any interactor previously hidden\n      for (let j = 0; j < this.enrichedInteractors.length; j++) {\n        this.enrichedInteractors[j].hidden = false;\n      }\n    }\n\n    // Something has been expanded or collapsed, we need to recalculate the start and end indexes for the lines\n    this.classifyInteractors();\n    this.calculateAllStartAndEndIndexes();\n\n  }\n\n  private loadSubInteractors(interactor: EnrichedInteractor): Observable<ComplexComponent[]> {\n    // this function returns the list of subcomponents of an interactor of type stable complex\n    const foundComplex: Element = this.complexes.find(complex => complex.complexAC === interactor.interactor.identifier);\n    if (!!foundComplex) {\n      return of(foundComplex.interactors);\n    } else {\n      // Actually call the back-end to fetch these\n      return this.complexPortalService.getSimplifiedComplex(interactor.interactor.identifier)\n        .pipe(map(complex => complex?.interactors));\n    }\n  }\n\n  private calculateAllStartAndEndIndexes(): void {\n    this.enrichedComplexes = [];\n\n    for (const complex of this.complexes) {\n      this.enrichedComplexes.push(this.calculateStartAndEndIndexes(complex));\n    }\n  }\n\n  private getMinValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.min(valueA, valueB);\n  }\n\n  private getMaxValue(valueA: number, valueB: number) {\n    if (valueB === null) {\n      return valueA;\n    }\n    if (valueA === null) {\n      return valueB;\n    }\n    return Math.max(valueA, valueB);\n  }\n\n  private calculateStartAndEndIndexes(complex: Element): EnrichedComplex {\n    const enrichedComplex: EnrichedComplex = {\n      complex,\n      startInteractorIndex: null,\n      endInteractorIndex: null,\n      startSubComponentIndex: null,\n      endSubComponentIndex: null,\n      startInteractorIncludedWhenExpanded: true,\n    };\n\n    // We iterate through the interactors to find the first and last one part of the complex\n    // We do this to be able to draw a line connecting all interactors in the complex\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      if (!this.enrichedInteractors[i].hidden) {\n\n        if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].interactor.identifier, this.enrichedInteractors)) {\n          // The interactor is part of the complex, we update the start and end indices for the interactors\n          // line as it may start in this interactor\n          enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n          if (enrichedComplex.startInteractorIndex === i) {\n            // The line starts in this interactor, so the line always starts in this interactor, even when expanded\n            enrichedComplex.startInteractorIncludedWhenExpanded = true;\n          }\n          enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n\n          // The interactor is a subcomplex\n          if (this.enrichedInteractors[i].isSubComplex && !!this.enrichedInteractors[i].subComponents) {\n            if (this.enrichedInteractors[i].expanded) {\n              // If the subcomplex is expanded, as the subcomplex is part of the complex, all its subcomponents are also part\n              // of it. That means we need a line connecting all the subcomponents.\n              // That line must also connect to the subcomplex, so we start it at -1 to make sure it starts at the interactor cell\n              // and not at the first subcomponent\n              enrichedComplex.startSubComponentIndex = -1;\n              enrichedComplex.endSubComponentIndex = this.enrichedInteractors[i].subComponents.length - 1;\n            }\n          }\n        } else if (this.enrichedInteractors[i].isSubComplex &&\n          !!this.enrichedInteractors[i].subComponents &&\n          this.enrichedInteractors[i].expanded) {\n          // The interactor is not part of the complex, but it is a subcomplex, and it is expanded.\n          // This means the subcomponents of the subcomplex are visible, and any of them could be part of the complex.\n          // In that case, the line could start or end on any of those subcomponents\n          for (let k = 0; k < this.enrichedInteractors[i].subComponents.length; k++) {\n            if (!!findInteractorInComplex(complex, this.enrichedInteractors[i].subComponents[k].identifier, this.enrichedInteractors)) {\n              // The subcomponent of this interactor is part of the complex, we update the start and end indices for the interactors\n              // line as it may start in this interactor\n              enrichedComplex.startInteractorIndex = this.getMinValue(enrichedComplex.startInteractorIndex, i);\n              if (enrichedComplex.startInteractorIndex === i) {\n                // The line starts in a subcomponent of the interactor, but not on the interactor itself,\n                // so the line does not start in the interactor when expanded\n                enrichedComplex.startInteractorIncludedWhenExpanded = false;\n              }\n              enrichedComplex.endInteractorIndex = this.getMaxValue(enrichedComplex.endInteractorIndex, i);\n              // The subcomponent of this interactor is part of the complex, we update the start and end indices for the subcomponents\n              // line as it may start in this subcomponent\n              enrichedComplex.startSubComponentIndex = this.getMinValue(enrichedComplex.startSubComponentIndex, k);\n              enrichedComplex.endSubComponentIndex = this.getMaxValue(enrichedComplex.endSubComponentIndex, k);\n            }\n          }\n        }\n      }\n    }\n    return enrichedComplex;\n  }\n\n  public classifyInteractorsByOrganism() {\n    this.enrichedInteractors.sort((a, b) => {\n      if (b.interactor.organismName === a.interactor.organismName) {\n        return b.timesAppearing - a.timesAppearing;\n      } else {\n        const organismBTimesAppearing = this._timesAppearingByOrganism.get(b.interactor.organismName);\n        const organismATimesAppearing = this._timesAppearingByOrganism.get(a.interactor.organismName);\n        if (organismBTimesAppearing === organismATimesAppearing) {\n          return b.interactor.organismName.localeCompare(a.interactor.organismName);\n        } else {\n          return organismBTimesAppearing - organismATimesAppearing;\n        }\n      }\n    });\n    this.rangeOfInteractorOrganism();\n  }\n\n  public classifyInteractorsByType() {\n    this.enrichedInteractors.sort((a, b) => {\n      if (b.interactor.interactorType === a.interactor.interactorType) {\n        return b.timesAppearing - a.timesAppearing;\n      } else {\n        const typeBTimesAppearing = this._timesAppearingByType.get(b.interactor.interactorType);\n        const typeATimesAppearing = this._timesAppearingByType.get(a.interactor.interactorType);\n        if (typeBTimesAppearing === typeATimesAppearing) {\n          return b.interactor.interactorType.localeCompare(a.interactor.interactorType);\n        } else {\n          return typeBTimesAppearing - typeATimesAppearing;\n        }\n      }\n    });\n    this.rangeOfInteractorType();\n  }\n\n  public classifyInteractorsByOccurrence() {\n    this.enrichedInteractors.sort((a, b) =>\n      b.timesAppearing - a.timesAppearing\n    );\n    this.ranges = [];\n  }\n\n  public rangeOfInteractorType() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.interactorType !== this.enrichedInteractors[i + 1].interactor.interactorType) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.interactorType, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  public rangeOfInteractorOrganism() {\n    const ranges = [];  // [type of interactor, first occurrence, last occurrence, length of the occurrence]\n    let length = 0;\n    let start = null;\n    for (let i = 0; i < this.enrichedInteractors.length; i++) {\n      const oneType = [];\n      if (!this.enrichedInteractors[i].hidden) {\n        length += 1;\n        if (start === null) {\n          start = i;\n        }\n      }\n      if (!this.enrichedInteractors[i + 1]\n        || (this.enrichedInteractors[i].isSubComplex && this.enrichedInteractors[i].expanded)\n        || this.enrichedInteractors[i].interactor.organismName !== this.enrichedInteractors[i + 1].interactor.organismName) {\n        if (start !== null) {\n          oneType.push(this.enrichedInteractors[i].interactor.organismName, length, start);\n          ranges.push(oneType);\n          start = null;\n        }\n        length = 0;\n      }\n    }\n    this.ranges = ranges;\n  }\n\n  isInteractorSortingSet() {\n    return this.interactorsSorting === 'Type' || this.interactorsSorting === 'Organism';\n  }\n\n  getExpandedRowClass(i: number, length: number): string {\n    if (i === 0) {\n      if (length === 1) {\n        return 'singleExpandedRow';\n      } else {\n        return 'firstExpandedRow';\n      }\n    } else if (i === length - 1) {\n      return 'lastExpandedRow';\n    }\n    return null;\n  }\n\n  private calculateTimesAppearing() {\n    // Initialise times appearing by type or organism\n    this._timesAppearingByType = new Map();\n    this._timesAppearingByOrganism = new Map();\n    for (const oneInteractor of this.enrichedInteractors) {\n      // Initialise times appearing for each interactor\n      oneInteractor.timesAppearing = 0;\n      for (const complex of this.complexes) {\n        const match = findInteractorInComplex(complex, oneInteractor.interactor.identifier, this.enrichedInteractors);\n        if (!!match) {\n          // Update times appearing for the interactor\n          oneInteractor.timesAppearing += 1;\n          // Update times appearing for the interactor type\n          this._timesAppearingByType.set(\n            oneInteractor.interactor.interactorType,\n            (this._timesAppearingByType.get(oneInteractor.interactor.interactorType) || 0) + 1);\n          // Update times appearing for the interactor organism\n          this._timesAppearingByOrganism.set(\n            oneInteractor.interactor.organismName,\n            (this._timesAppearingByOrganism.get(oneInteractor.interactor.organismName) || 0) + 1);\n        }\n      }\n    }\n  }\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-external-link',\n  templateUrl: './table-interactor-external-link.component.html',\n  styleUrls: ['./table-interactor-external-link.component.css']\n})\nexport class TableInteractorExternalLinkComponent implements OnInit {\n\n  @Input() interactorId: string;\n  @Input() identifierLink: string;\n  @Input() interactorType: string;\n  @Input() isMainInteractor: boolean;\n  @Input() IDDisplay: boolean;\n\n  @Output() externalLinkVisible: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  ngOnInit(): void {\n    this.showExternalLink();\n  }\n\n  showExternalLink(): boolean {\n    if (this.isMainInteractor && this.interactorType === 'stable complex') {\n      this.externalLinkVisible.emit(false);\n      return false;\n    }\n    this.externalLinkVisible.emit(!!this.identifierLink);\n    return !!this.identifierLink;\n  }\n}\n","import {Component, Input, OnInit} from '@angular/core';\nimport {interactorTypeIcon} from '../../../../../complex-portal-utils';\nimport {organismIcon} from '../../../../../complex-portal-utils';\n\n@Component({\n  selector: 'cp-table-interactor-name',\n  templateUrl: './table-interactor-name.component.html',\n  styleUrls: ['./table-interactor-name.component.css']\n})\nexport class TableInteractorNameComponent implements OnInit {\n\n  @Input() interactorName: string;\n  @Input() interactorType: string;\n  @Input() interactorId: string;\n  @Input() interactorOrganism: string;\n  @Input() identifierLink: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() isMainInteractor: boolean;\n  interactorTypeIcon: string;\n  interactorOrganismIcon: string;\n  externalLinkVisible: boolean;\n\n  ngOnInit(): void {\n    this.interactorTypeIcon = interactorTypeIcon(this.interactorType);\n    this.interactorOrganismIcon = organismIcon(this.interactorOrganism);\n  }\n\n  externalLinkVisibleHandler(isVisible: boolean): void {\n    this.externalLinkVisible = isVisible;\n  }\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'cp-table-interactor-stoichiometry',\n  templateUrl: './table-interactor-stoichiometry.component.html',\n  styleUrls: ['./table-interactor-stoichiometry.component.css']\n})\nexport class TableInteractorStoichiometryComponent {\n  @Input() stoichiometryText: string;\n  @Input() stoichiometryValue: string;\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-main-interactor',\n  templateUrl: './table-main-interactor.component.html',\n  styleUrls: ['./table-main-interactor.component.css']\n})\nexport class TableMainInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  topLineClass: string;\n  bottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(\n      this.complex.complex, this.interactor.interactor.identifier, this.enrichedInteractors);\n    this.topLineClass = this.displayTopLineClass(this.complex, this.i);\n    this.bottomLineClass = this.displayBottomLineClass(this.complex, this.i);\n  }\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  public displayTopLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnInteractorCell(complex, interactorIndex) && !this.doesLineStartOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClass(complex: EnrichedComplex, interactorIndex: number): string {\n    if (this.doesLineCrossInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnInteractorCell(complex, interactorIndex) && !this.doesLineEndOnInteractorCell(complex, interactorIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n\n      // The line starts before this interactor and ends after, so it crosses through the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      // The line starts before this interactor and end at this interactor or on any of its subcomponents\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex === interactorIndex) {\n        // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n        // the line does not end in this interactor, and it must cross through the interactor cell to the subcomponents\n        if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n          if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n            return true;\n          }\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n\n      if (!this.enrichedInteractors[interactorIndex].isSubComplex) {\n        // If the interactor is not a subcomplex, then the interactor has no subcomponents and the line starts in it\n        return true;\n      }\n      // If the interactor is a subcomplex.\n      // If the interactor is actually part of the complex, the line starts in this interactor\n      // Otherwise, the line actually starts on one of the subcomponents of the complex, but not on the interactor itself, as it is\n      // not part of the complex.\n      if (complex.startInteractorIncludedWhenExpanded) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnInteractorCell(complex: EnrichedComplex, interactorIndex: number): boolean {\n    // The line ends at this interactor or on any of its subcomponents\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n\n      // If the interactor is an expanded subcomplex, and there is any line between the subcomponents, then\n      // the line does not end in this interactor, and it must cross through to the subcomponents\n      if (this.enrichedInteractors[interactorIndex].isSubComplex && this.enrichedInteractors[interactorIndex].expanded) {\n        if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n}\n","import {Component, Input, OnChanges} from '@angular/core';\nimport {ComplexComponent} from '../../../../../shared/model/complex-results/complex-component.model';\nimport {EnrichedComplex, EnrichedInteractor} from '../table-interactor-column.component';\nimport {ComponentWithStoichiometry, findInteractorInComplex} from '../complex-navigator-utils';\n\n@Component({\n  selector: 'cp-table-subcomponent-interactor',\n  templateUrl: './table-subcomponent-interactor.component.html',\n  styleUrls: ['./table-subcomponent-interactor.component.css']\n})\n\nexport class TableSubcomponentInteractorComponent implements OnChanges {\n  @Input() complex: EnrichedComplex;\n  @Input() i: number;\n  @Input() j: number;\n  @Input() enrichedInteractors: EnrichedInteractor[];\n\n  interactorComponent: ComponentWithStoichiometry;\n  displayTopLineClass: string;\n  displayBottomLineClass: string;\n\n  ngOnChanges(): void {\n    this.interactorComponent = findInteractorInComplex(this.complex.complex, this.el.identifier, this.enrichedInteractors);\n    this.displayTopLineClass = this.displayTopLineClassExpanded(this.complex, this.i, this.j);\n    this.displayBottomLineClass = this.displayBottomLineClassExpanded(this.complex, this.i, this.j);\n  }\n\n\n  get interactor(): EnrichedInteractor {\n    return this.enrichedInteractors[this.i];\n  }\n\n  get el(): ComplexComponent {\n    return this.enrichedInteractors[this.i].subComponents[this.j];\n  }\n\n  public displayTopLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  public displayBottomLineClassExpanded(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): string {\n    if (this.doesLineCrossSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n    if (this.doesLineStartOnSubcomponentCell(complex, interactorIndex, subComponentIndex) &&\n      !this.doesLineEndOnSubcomponentCell(complex, interactorIndex, subComponentIndex)) {\n      return 'verticalLine';\n    }\n\n    return 'transparentVerticalLine';\n  }\n\n  private doesLineCrossSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.startInteractorIndex != null && complex.endInteractorIndex != null) {\n      // The line starts before this interactor and ends after, so it crosses through all the subcomponents of the interactor\n      if (complex.startInteractorIndex < interactorIndex && complex.endInteractorIndex > interactorIndex) {\n        return true;\n      }\n\n      if (complex.startSubComponentIndex != null && complex.endSubComponentIndex != null) {\n        // The line starts before this subcomponent and ends after, so it crosses through the subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this interactor, and it ends on a later subcomponent, so it crosses through this subcomponent\n        if (complex.startInteractorIndex < interactorIndex && complex.endSubComponentIndex > subComponentIndex) {\n          return true;\n        }\n\n        // The line started before this subcomponent, and it ends on a later interactor, so it crosses through this subcomponent\n        if (complex.startSubComponentIndex < subComponentIndex && complex.endInteractorIndex > interactorIndex) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineStartOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    // The line starts at this interactor or on any of its subcomponents\n    if (complex.startInteractorIndex != null && complex.startInteractorIndex === interactorIndex) {\n      if (complex.startSubComponentIndex != null && complex.startSubComponentIndex === subComponentIndex) {\n        // If the subcomplex is a component of the complex, the line starts in the cell of the interactor, meaning it cannot\n        // start on any subcomponent.\n        // Otherwise, it starts on the subcomponent with the index subComponentIndex\n        return !complex.complex.interactors.some(component =>\n          this.enrichedInteractors[interactorIndex].interactor.identifier === component.identifier);\n\n      }\n    }\n\n    return false;\n  }\n\n  private doesLineEndOnSubcomponentCell(complex: EnrichedComplex, interactorIndex: number, subComponentIndex: number): boolean {\n    if (complex.endInteractorIndex != null && complex.endInteractorIndex === interactorIndex) {\n      // The line ends at this interactor and this subcomponent\n      if (complex.endSubComponentIndex != null && complex.endSubComponentIndex === subComponentIndex) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n}\n","import {Component, EventEmitter, Input, OnChanges, Output} from '@angular/core';\nimport {ComplexSearchResult} from '../../../shared/model/complex-results/complex-search.model';\nimport {Interactor} from '../../../shared/model/complex-results/interactor.model';\nimport {Element} from '../../../shared/model/complex-results/element.model';\nimport {ComplexComponent} from '../../../shared/model/complex-results/complex-component.model';\n\n@Component({\n  selector: 'cp-table-structure',\n  templateUrl: './table-structure.component.html',\n  styleUrls: ['./table-structure.component.css']\n})\nexport class TableStructureComponent implements OnChanges {\n  @Input() complexSearch: ComplexSearchResult;\n  @Input() interactors: Interactor[];\n  @Input() interactorsSorting: string;\n  @Input() organismIconDisplay: boolean;\n  @Input() interactorTypeDisplay: boolean;\n  @Input() IDDisplay: boolean;\n  @Input() canAddComplexesToBasket: boolean;\n  @Input() canRemoveComplexesFromBasket: boolean;\n  @Output() onComplexRemovedFromBasket: EventEmitter<string> = new EventEmitter<string>();\n\n  sortedComplexes: Element[] = [];\n\n  ngOnChanges(): void {\n    this.sortedComplexes = this.classifyComplexesSimilaritiesV2(this.complexSearch.elements);\n  }\n\n  private getComponentAsComplex(component: ComplexComponent): Element | undefined {\n    return this.complexSearch.elements.find(interactor => interactor.complexAC === component.identifier);\n  }\n\n  private getAllComponents(complex?: Element, components: ComplexComponent[] = []): ComplexComponent[] {\n    for (const component of complex.interactors) {\n      if (component.interactorType === 'stable complex') {\n        const subComplex = this.getComponentAsComplex(component);\n        if (subComplex) {\n          components.push(...this.getAllComponents(subComplex));\n        } else {\n          components.push(component);\n        }\n      } else {\n        components.push(component);\n      }\n    }\n    return components;\n  }\n\n  private calculateSimilarity(complex1: Element, complex2: Element) {\n    if (complex1 === complex2) {\n      return new Set(this.getAllComponents(complex1)).size;\n    }\n\n    const [components1, components2] =\n      [complex1, complex2]\n        .map(complex => new Set(this.getAllComponents(complex).map(c => c.identifier)));\n\n    return [...components1.values()].reduce((s, c1) => components2.has(c1) ? s + 1 : s, 0);\n  }\n\n  classifyComplexesSimilaritiesV2(complexesList: Element[]) {\n    const comparedComplexes: [Element, Element, number][] = [];\n    for (const complex of complexesList) {\n      for (const comparedComplex of complexesList) {\n        // for unique comparison\n        if (complex.complexAC >= comparedComplex.complexAC) {\n          comparedComplexes.push([complex, comparedComplex, this.calculateSimilarity(complex, comparedComplex)]);\n        }\n      }\n    }\n    comparedComplexes.sort((a, b) => b[2] - a[2]); // sorting by similarityScore\n    const complexesOrderedSet = this.uniqueComplexesListOrderedBySimilarity(comparedComplexes);\n    // to be used in the table as a 1D array\n    return Array.from(complexesOrderedSet);\n  }\n\n  uniqueComplexesListOrderedBySimilarity(complexesListSimilarities: [Element, Element, number][]) {\n    const complexesOrderedSet = new Set<Element>();\n    for (let i = 0; i < complexesListSimilarities.length; i++) {\n      const [complex1, complex2, similarityScore] = complexesListSimilarities[i];\n      if (similarityScore !== 0) {\n        complexesOrderedSet.add(complex1);\n        complexesOrderedSet.add(complex2);\n        for (let j = i + 1; j < complexesListSimilarities.length; j++) {\n          const [complex3, complex4, similarityScore2nd] = complexesListSimilarities[j];\n          if (complex1 === complex3 && similarityScore2nd !== 0) {\n            complexesOrderedSet.add(complex4);\n          }\n        }\n        if (complexesOrderedSet.size === this.complexSearch.elements.length) {\n          // All complexes have been added, we can return and stop the loops\n          return complexesOrderedSet;\n        }\n      }\n      if (complexesOrderedSet.size === this.complexSearch.elements.length) {\n        // All complexes have been added, we can return and stop the loops\n        return complexesOrderedSet;\n      }\n    }\n    return complexesOrderedSet;\n  }\n}\n","export default \"<div class=\\\"filters\\\">\\n  <div class=\\\"sortingInteractors\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Sort components\\\" class=\\\"button\\\">\\n    <div class=\\\"typeOfSorting\\\">\\n      <input type=\\\"button\\\" name=\\\"occurrenceClassification\\\" value=\\\"Occurrence\\\" class=\\\"button\\\"\\n             (click)=\\\"interactorsSortingChanges('Occurrence')\\\">\\n      <input type=\\\"button\\\" name=\\\"typeClassification\\\" value=\\\"Type\\\" class=\\\"button\\\"\\n             (click)=\\\"interactorsSortingChanges('Type')\\\">\\n      <input type=\\\"button\\\" name=\\\"organismClassification\\\" value=\\\"Organism\\\" class=\\\"button\\\"\\n             (click)=\\\"interactorsSortingChanges('Organism')\\\">\\n      <!--      <input type=\\\"submit\\\" name=\\\"geneClassification\\\" value=\\\"Orthology (Not available yet)\\\" class=\\\"button\\\"-->\\n      <!--             (click)=\\\"InteractorsSortingChanges('Orthology')\\\">-->\\n    </div>\\n  </div>\\n\\n  <div class=\\\"dropdown\\\">\\n    <input type=\\\"submit\\\" name=\\\"classificationButton\\\" value=\\\"Display Options\\\" class=\\\"button\\\">\\n    <ul class=\\\"displaySize\\\">\\n      <li>\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"displayType\\\" value=\\\"Compact\\\" class=\\\"checkbox compact\\\"\\n                 (click)=\\\"setDisplayType('compact')\\\" [checked]=\\\"typeOfDisplay === 'compact'\\\">\\n          Compact display\\n        </label>\\n      </li>\\n      <li class=\\\"detailedDisplay\\\">\\n        <label>\\n          <input type=\\\"radio\\\" name=\\\"displayType\\\" value=\\\"Detailed\\\" class=\\\"checkbox detailed\\\"\\n                 (click)=\\\"setDisplayType('detailed')\\\" [checked]=\\\"typeOfDisplay === 'detailed'\\\">\\n          Detailed display\\n        </label>\\n        <ul class=\\\"detailedDisplayOptions\\\">\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"organism\\\" value=\\\"organism\\\" class=\\\"checkbox\\\" [checked]=\\\"organismIconDisplay\\\"\\n                   (change)=\\\"DisplayingOrganism()\\\">\\n            Organism\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"type\\\" value=\\\"type\\\" class=\\\"checkbox\\\" [checked]=\\\"interactorTypeDisplay\\\"\\n                   (change)=\\\"DisplayingType()\\\">\\n            Type\\n          </li>\\n          <li>\\n            <input type=\\\"checkbox\\\" name=\\\"id\\\" value=\\\"id\\\" class=\\\"checkbox\\\" [checked]=\\\"IDDisplay\\\"\\n                   (change)=\\\"DisplayingID()\\\">\\n            Interactor ID\\n          </li>\\n        </ul>\\n      </li>\\n    </ul>\\n  </div>\\n</div>\\n\";","export default \"<div class=\\\"displayButton columns medium-12\\\" [ngClass]=\\\"\\\">\\n  <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button\\\"\\n          (click)=\\\"setListView()\\\" [ngClass]=\\\"{'selected': !isDisplayComplexNavigatorView()}\\\">\\n    View list\\n  </button>\\n  <button type=\\\"submit\\\" name=\\\"submit\\\" class=\\\"button view-button cnButton\\\"\\n          (click)=\\\"setComplexNavigatorView()\\\" [ngClass]=\\\"{'selected': isDisplayComplexNavigatorView()}\\\">\\n    View Complex Navigator\\n    <span class=\\\"new-tag\\\" [ngClass]=\\\"{'new-tag-selected': displayType === isDisplayComplexNavigatorView()}\\\">NEW!</span>\\n  </button>\\n</div>\\n\";","export default \"<div class=\\\"ComplexNavigator\\\">\\n  <div class=\\\"Buttons\\\" [ngClass]=\\\"complexSearch.totalNumberOfResults <=6 ? 'smallCNButtons' : ''\\\">\\n    <cp-complex-navigator-buttons\\n      [(interactorsSorting)]=\\\"interactorsSorting\\\"\\n      [(organismIconDisplay)]=\\\"organismIconDisplay\\\"\\n      [(interactorTypeDisplay)]=\\\"interactorTypeDisplay\\\"\\n      [(IDDisplay)]=\\\"IDDisplay\\\">\\n    </cp-complex-navigator-buttons>\\n  </div>\\n  <cp-table-structure [complexSearch]=\\\"complexSearch\\\"\\n                      [interactors]=\\\"interactors\\\"\\n                      [interactorsSorting]=\\\"interactorsSorting\\\"\\n                      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                      [IDDisplay]=\\\"IDDisplay\\\"\\n                      [canAddComplexesToBasket]=\\\"canAddComplexesToBasket\\\"\\n                      [canRemoveComplexesFromBasket]=\\\"canRemoveComplexesFromBasket\\\"\\n                      (onComplexRemovedFromBasket)=\\\"onComplexRemovedFromBasket.emit($event)\\\">\\n  </cp-table-structure>\\n</div>\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"table CN-table\\\">\\n    <!-- When table is not overflowing -->\\n    <thead class=\\\"tableHead\\\" *ngIf=\\\"complexes.length<=6\\\">\\n    <tr>\\n      <th *ngIf=\\\"isInteractorSortingSet()\\\" class=\\\"spaceHolderSorting\\\"></th>\\n      <th class=\\\"interactorsHeader horizontal\\\">\\n        Components\\n      </th>\\n      <th class=\\\"horizontal\\\" *ngFor=\\\"let complex of complexes\\\" [class.predicted]=\\\"complex.predictedComplex\\\">\\n        <div class=\\\"horizontal-label\\\">\\n          <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n             target=\\\"_blank\\\">\\n            <div>\\n              <span [matTooltip]=\\\"complex.complexName+ ' - '+ complex.complexAC + ' - ' + complex.organismName\\\">\\n                <div class=\\\"line\\\"></div>\\n                <i class=\\\"{{iconOrganism(complex.organismName)}}\\\"></i>\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                {{ complex.complexName }}\\n              </span>\\n            </div>\\n          </a>\\n        </div>\\n        <div class=\\\"basketButton\\\">\\n          <a class=\\\"button\\\" (click)=\\\"toggleBasket(complex)\\\">\\n            <i class=\\\"icon icon-common\\\" [attr.data-icon]=\\\"isInBasket(complex.complexAC) ? '':''\\\"></i>\\n          </a>\\n        </div>\\n      </th>\\n    </tr>\\n    </thead>\\n    <!-- When table is overflowing -->\\n    <thead class=\\\"tableHeadOverflow\\\" *ngIf=\\\"complexes.length > 6\\\"\\n           [ngClass]=\\\"isInteractorSortingSet() ? 'tableHeadOverflowWithSorting' : 'tableHeadOverflow'\\\">\\n    <tr [style.--cols]=\\\"complexes.length\\\"\\n        [style.--intHeader]=\\\"isInteractorSortingSet() ? '156px':''\\\"\\n        [style.--sizeSpaceHolder]=\\\"'185px'\\\">\\n      <th class=\\\"spaceHolderHeaderOverflow\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\\\">\\n      </th>\\n      <th class=\\\"rotate\\\" *ngFor=\\\"let complex of complexes\\\"\\n          [class.predicted]=\\\"complex.predictedComplex\\\"\\n          [style.--cols]=\\\"complexes.length\\\">\\n        <a [routerLink]=\\\"['/complex', complex.complexAC]\\\"\\n           [matTooltip]=\\\"complex.complexName+ ' - '+ complex.complexAC\\\"\\n           target=\\\"_blank\\\">\\n          <div>\\n            <span>\\n              <div class=\\\"tilted-label\\\">\\n                <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\"></i>\\n                {{ complex.complexName }}\\n              </div>\\n            </span>\\n          </div>\\n        </a>\\n      </th>\\n      <div class=\\\"spaceHolder\\\"></div>\\n    </tr>\\n    <!-- icons row -->\\n    <tr [style.--cols]=\\\"complexes.length\\\"\\n        [style.--intHeader]=\\\"isInteractorSortingSet() ? '156px':''\\\"\\n        [style.--sizeSpaceHolder]=\\\"'185px'\\\">\\n      <th class=\\\"interactorsHeader overflow\\\"\\n          [style]=\\\"isInteractorSortingSet() ? 'min-width: 156px; max-width: 156px;':''\\\">\\n        Components\\n      </th>\\n      <ng-container *ngFor=\\\" let complex of complexes;\\\">\\n        <th class=\\\"iconOrganism\\\" [class.predicted]=\\\"complex.predictedComplex\\\">\\n          <div>\\n            <a class=\\\"button\\\" (click)=\\\"toggleBasket(complex)\\\">\\n              <i class=\\\"icon icon-common\\\" [attr.data-icon]=\\\"isInBasket(complex.complexAC) ? '':''\\\"></i>\\n            </a>\\n          </div>\\n          <div>\\n            <i class=\\\"{{iconOrganism(complex.organismName)}}\\\" [matTooltip]=\\\"complex.organismName\\\"></i>\\n          </div>\\n        </th>\\n      </ng-container>\\n      <div class=\\\"spaceHolder\\\"></div>\\n    </tr>\\n    </thead>\\n  </table>\\n</div>\\n\\n\\n\";","export default \"<div class=\\\"Complex-navigator\\\">\\n  <table class=\\\"interactors-table\\\"\\n         [ngClass]=\\\"{'inheritedWidth': complexes.length > 6}\\\"\\n         [style.--cols]=\\\"complexes.length\\\">\\n    <ng-container *ngFor=\\\" let interactor of enrichedInteractors; let i=index\\\">\\n      <tr *ngIf=\\\"!interactor.hidden\\\">\\n        <ng-container *ngFor=\\\"let oneType of ranges\\\" class=\\\"interactorsOrdering\\\">\\n          <td *ngIf=\\\"oneType[2]===i\\\" [attr.rowspan]=\\\"oneType[1]\\\" class=\\\"interactorSeparation\\\"\\n              [matTooltip]=\\\"oneType[0]\\\">\\n            <div class=\\\"interactorNameContainer\\\" [style.--rowspanSize]=\\\"oneType[1]\\\">\\n              {{ oneType[0] }}\\n            </div>\\n          </td>\\n        </ng-container>\\n        <td class=\\\"interactorsColumn\\\"\\n            [ngClass]=\\\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\\\"\\n            [style]=\\\"ranges.length!=0 ? 'left:3ch':''\\\">\\n          <cp-table-interactor-name\\n            [interactorName]=\\\"interactor.interactor.name\\\"\\n            [interactorType]=\\\"interactor.interactor.interactorType\\\"\\n            [interactorId]=\\\"interactor.interactor.identifier\\\"\\n            [interactorOrganism]=\\\"interactor.interactor.organismName\\\"\\n            [identifierLink]=\\\"interactor.interactor.identifierLink\\\"\\n            [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n            [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n            [IDDisplay]=\\\"IDDisplay\\\"\\n          ></cp-table-interactor-name>\\n          <!-- Icon for the expandable -->\\n          <div class=\\\"container\\\" *ngIf=\\\"interactor.isSubComplex\\\">\\n            <a (click)=\\\"toggleSubcomplexExpandable(i)\\\"\\n               [matTooltip]=\\\"interactor.interactor.name + ' components'\\\">\\n              Components\\n              <i class=\\\"icon icon-common\\\" data-icon=\\\"&#xf078;\\\"\\n                 style=\\\"font-size:small;\\n                \\\"></i>\\n            </a>\\n          </div>\\n        </td>\\n        <!-- Interactors' stoichiometry -->\\n        <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n          <td class=\\\"intStoich\\\" [ngClass]=\\\"{'intStoichFixedWidth': complexes.length > 6}\\\" [class.predicted]=\\\"complex.complex.predictedComplex\\\">\\n            <cp-table-main-interactor\\n              [complex]=\\\"complex\\\"\\n              [i]=\\\"i\\\"\\n              [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n            ></cp-table-main-interactor>\\n          </td>\\n        </ng-container>\\n        <div *ngIf=\\\"complexes.length>6\\\"\\n             [ngClass]=\\\"isInteractorSortingSet() ? 'spaceHolderWithSorting' : 'spaceHolder'\\\"></div>\\n      </tr>\\n      <!-- Expandable menu for subcomplexes -->\\n      <ng-container *ngIf=\\\"interactor.expanded\\\">\\n        <ng-container *ngIf=\\\"!!interactor.subComponents\\\">\\n          <tr *ngFor=\\\"let el of interactor.subComponents; let j=index\\\"\\n              class=\\\"expandedRows\\\"\\n              [ngClass]=\\\"getExpandedRowClass(j, interactor.subComponents.length)\\\">\\n            <td [attr.rowspan]=\\\"interactor.subComponents.length\\\" class=\\\"interactorSeparation\\\"\\n                [matTooltip]=\\\"interactor.interactor.name + ' components'\\\"\\n                *ngIf=\\\"j === 0 && (interactorsSorting === 'Type' || interactorsSorting === 'Organism')\\\">\\n              <div class=\\\"interactorSeparationName\\\"\\n                   [style.--rowspanSize]=\\\"interactor.subComponents.length\\\"> {{ interactor.interactor.name }} components\\n              </div>\\n            </td>\\n            <td class=\\\"subComponentColumn\\\"\\n                [ngClass]=\\\"complexes.length<=6 ? 'horizontalHeader' : 'interactorsColumnFixedWidth'\\\"\\n                [style]=\\\"ranges.length!=0 ? 'left:3ch':''\\\">\\n              <div>\\n                <cp-table-interactor-name\\n                  [interactorName]=\\\"el.name\\\"\\n                  [interactorType]=\\\"el.interactorType\\\"\\n                  [interactorId]=\\\"el.identifier\\\"\\n                  [interactorOrganism]=\\\"interactor.interactor.organismName\\\"\\n                  [identifierLink]=\\\"el.identifierLink\\\"\\n                  [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n                  [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n                  [IDDisplay]=\\\"IDDisplay\\\"\\n                ></cp-table-interactor-name>\\n              </div>\\n            </td>\\n            <ng-container *ngFor=\\\"let complex of enrichedComplexes\\\">\\n              <td class=\\\"intStoich\\\" [ngClass]=\\\"{'intStoichFixedWidth': complexes.length > 6}\\\">\\n                <cp-table-subcomponent-interactor\\n                  [complex]=\\\"complex\\\"\\n                  [i]=\\\"i\\\"\\n                  [j]=\\\"j\\\"\\n                  [enrichedInteractors]=\\\"enrichedInteractors\\\"\\n                ></cp-table-subcomponent-interactor>\\n              </td>\\n            </ng-container>\\n            <div class=\\\"spaceHolder\\\" *ngIf=\\\"enrichedComplexes.length > 6\\\"></div>\\n          </tr>\\n        </ng-container>\\n      </ng-container>\\n    </ng-container>\\n  </table>\\n</div>\\n\";","export default \"<div class=\\\"externalLinkContainer\\\" [matTooltip]=\\\"'More information about ' + interactorId\\\">\\n  <a *ngIf=\\\"externalLinkVisible\\\" href=\\\"{{identifierLink}}\\\" target=\\\"_blank\\\" class=\\\"externalLinkContainer\\\">\\n    {{ interactorId }}\\n    <i class=\\\"icon icon-generic small\\\" data-icon=\\\"x\\\" title=\\\"More information about {{ interactorId }}\\\"></i>\\n  </a>\\n</div>\\n\";","export default \"<div class=\\\"container\\\">\\n  <div class=\\\"nameAndIcons\\\" [ngClass]=\\\"{inlineDisplay: interactorType==='stable complex'}\\\">\\n    <i *ngIf=\\\"organismIconDisplay\\\"\\n       class=\\\"{{interactorOrganismIcon}}\\\"\\n       [matTooltip]=\\\"interactorOrganism\\\"></i>\\n\\n    <i *ngIf=\\\"interactorTypeDisplay\\\"\\n       class=\\\"{{interactorTypeIcon}}\\\"\\n       [matTooltip]=\\\"interactorType\\\"></i>\\n\\n    <div class=\\\"name\\\" *ngIf=\\\"IDDisplay\\\" [matTooltip]=\\\"interactorId\\\"> {{ interactorName }}\\n    </div>\\n    <a *ngIf=\\\"IDDisplay\\\"\\n       [routerLink]=\\\"['/complex/search']\\\"\\n       [queryParams]=\\\"{query: interactorId, page: 1}\\\"\\n       target=\\\"_blank\\\">\\n      <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n         [matTooltip]=\\\"'More complexes containing ' + interactorName \\\"></i>\\n    </a>\\n\\n    <div class=\\\"nameCompact\\\" *ngIf=\\\"!IDDisplay\\\">\\n      <div class=\\\"name\\\" *ngIf=\\\"!IDDisplay\\\" [matTooltip]=\\\"'More information about ' + interactorName\\\">\\n        <a *ngIf=\\\"!!identifierLink\\\" href=\\\"{{identifierLink}}\\\" target=\\\"_blank\\\" class=\\\"externalLinkContainer\\\">\\n          {{ interactorName }}\\n        </a>\\n      </div>\\n      <a [routerLink]=\\\"['/complex/search']\\\"\\n         [queryParams]=\\\"{query: interactorId, page: 1}\\\"\\n         target=\\\"_blank\\\">\\n        <i class=\\\"icon icon-functional small\\\" data-icon=\\\"1\\\"\\n           [matTooltip]=\\\"'More complexes containing ' + interactorName \\\"></i>\\n      </a>\\n    </div>\\n  </div>\\n  <cp-table-interactor-external-link\\n    *ngIf=\\\"IDDisplay\\\"\\n    [interactorId]=\\\"interactorId\\\"\\n    [identifierLink]=\\\"identifierLink\\\"\\n    [interactorType]=\\\"interactorType\\\"\\n    [isMainInteractor]=\\\"isMainInteractor\\\"\\n    [IDDisplay]=\\\"IDDisplay\\\"\\n    (externalLinkVisible)=\\\"externalLinkVisibleHandler($event)\\\">\\n  </cp-table-interactor-external-link>\\n</div>\\n\";","export default \"<ng-container>\\n  <div class=\\\"stoichNum\\\" [matTooltip]=\\\"stoichiometryText\\\">\\n    {{ stoichiometryValue }}\\n  </div>\\n</ng-container>\\n\";","export default \"<div [ngClass]=\\\"topLineClass\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!interactorComponent\\\"\\n  [stoichiometryText]=\\\"interactorComponent.stochiometryText\\\"\\n  [stoichiometryValue]=\\\"interactorComponent.stochiometryValueFormatted\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"bottomLineClass\\\"></div>\\n\";","export default \"<div [ngClass]=\\\"displayTopLineClass\\\"></div>\\n<cp-table-interactor-stoichiometry\\n  *ngIf=\\\"!!interactorComponent\\\"\\n  [stoichiometryText]=\\\"interactorComponent.stochiometryText\\\"\\n  [stoichiometryValue]=\\\"interactorComponent.stochiometryValueFormatted\\\"\\n></cp-table-interactor-stoichiometry>\\n<div [ngClass]=\\\"displayBottomLineClass\\\"></div>\\n\";","export default \"<div class=\\\"complexNavigatorTable\\\">\\n  <div class=\\\"header\\\"\\n       (scroll)=\\\"body.scrollLeft = header.scrollLeft\\\" #header>\\n\\n    <cp-table-header [complexes]=\\\"sortedComplexes\\\"\\n                     [interactorsSorting]=\\\"interactorsSorting\\\"\\n                     [canAddComplexesToBasket]=\\\"canAddComplexesToBasket\\\"\\n                     [canRemoveComplexesFromBasket]=\\\"canRemoveComplexesFromBasket\\\"\\n                     (onComplexRemovedFromBasket)=\\\"onComplexRemovedFromBasket.emit($event)\\\">\\n    </cp-table-header>\\n  </div>\\n  <div class=\\\"interactors\\\"\\n       (scroll)=\\\"header.scrollLeft = body.scrollLeft\\\" #body>\\n    <cp-table-interactor-column\\n      [complexes]=\\\"sortedComplexes\\\"\\n      [interactors]=\\\"interactors\\\"\\n      [interactorsSorting]=\\\"interactorsSorting\\\"\\n      [organismIconDisplay]=\\\"organismIconDisplay\\\"\\n      [interactorTypeDisplay]=\\\"interactorTypeDisplay\\\"\\n      [IDDisplay]=\\\"IDDisplay\\\">\\n    </cp-table-interactor-column>\\n  </div>\\n  <div class=\\\"spaceHolder\\\"></div>\\n</div>\\n\\n\";"],"names":[],"sourceRoot":"webpack:///"}